file(String)->File => "java.io.File", "new(..)"
file_exists(File)->Boolean => "java.io.File", "exists(..)"
file_is_directory(File)->Boolean => "java.io.File", "isDirectory(..)"
file_name(File)->String => "java.io.File", "getName(..)"
file_list(File)->File* => "java.io.File", "listFiles(..)"
file_mkdirs(File)->Boolean => "java.io.File", "mkdirs(..)"

file_writer(File)->FileWriter => "java.io.FileWriter", "new(..)"
file_writer_append(FileWriter,String)->Void => "java.io.FileWriter", "write(..)"
file_writer_close(FileWriter)->Void => "java.io.FileWriter", "close(..)"
file_writer_println(Writer,String)->Void => "java.io.Writer", "println(..)"

file_input_stream(File)->InputStream => "java.io.FileInputStream", "new(..)"

input_stream_close(InputStream)->Void => "java.io.InputStream", "close(..)"

reader(InputStream)->Reader => "java.io.InputStreamReader", "new(..)"
buffered_reader(Reader)->BufferedReader => "java.io.BufferedReader", "new(..)"
data_output_stream(OutputStream)->DataOutputStream => "java.io.DataOutputStream", "new(..)"
read_line(BufferedReader)->String => "java.io.BufferedReader", "readLine(..)"
read_char(BufferedReader)->Int => "java.io.BufferedReader", "read(..)"
write_string(DataOutputStream,String)->Void => "java.io.DataOutputStream", "writeBytes(..)"
close_data_output_stream(DataOutputStream)->Void => "java.io.Closeable", "close(..)"

function read_string(buffered_reader, count) {
	@init() {
		i = 0
		s = ""
		c = 0
	}
	i < count && c!=-1 {
		c = read_char(buffered_reader)
		s[i++] = to_char(c)
	}
	@end() {
		return s
	}
}

function read_all_string(buffered_reader) {
	@init() {
		i = 0
		s = ""
		c = 0
	}
	c!=-1 {
		c = read_char(buffered_reader)
		s[i++] = to_char(c)
	}
	@end() {
		return s
	}
}


/*
 * A simple function to write a string in a file.
 */
function file_write_content(file_path,string) {
	@init() {
		f = file_writer(file_path)
		file_writer_append(f,string)
		file_writer_close(f)
	}
}

function file_read_content(file_path) {
	@init() {
		fis = file_input_stream(file(file_path))
		content = read_all_string(buffered_reader(reader(fis)))
		input_stream_close(fis)
		return content
	}
}
