
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue Sep 17 06:47:17 CEST 2019
//----------------------------------------------------

package ini.parser;

import java.util.*;
import java.io.*;
import ini.*;
import ini.ast.*;
import ini.ast.Process;
import ini.eval.function.*;
import ini.eval.at.*;

/** CUP v0.10k generated parser.
  * @version Tue Sep 17 06:47:17 CEST 2019
  */
public class IniParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public IniParser() {super();}

  /** Constructor which sets the default scanner. */
  public IniParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\257\000\002\002\004\000\002\003\004\000\002\003" +
    "\003\000\002\004\003\000\002\004\002\000\002\005\004" +
    "\000\002\006\004\000\002\006\002\000\002\007\005\000" +
    "\002\007\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\015\004\000\002\016\012\000\002\016\015" +
    "\000\002\016\004\000\002\025\002\000\002\025\005\000" +
    "\002\075\013\000\002\011\012\000\002\011\012\000\002" +
    "\012\003\000\002\012\002\000\002\013\005\000\002\013" +
    "\003\000\002\014\005\000\002\014\003\000\002\027\005" +
    "\000\002\027\003\000\002\030\005\000\002\030\003\000" +
    "\002\055\005\000\002\055\003\000\002\056\005\000\002" +
    "\056\003\000\002\060\005\000\002\060\003\000\002\061" +
    "\005\000\002\061\003\000\002\026\005\000\002\026\003" +
    "\000\002\017\003\000\002\017\002\000\002\020\005\000" +
    "\002\020\003\000\002\021\003\000\002\021\004\000\002" +
    "\022\003\000\002\022\002\000\002\023\005\000\002\023" +
    "\003\000\002\024\003\000\002\024\005\000\002\036\005" +
    "\000\002\036\005\000\002\037\005\000\002\041\003\000" +
    "\002\071\003\000\002\071\003\000\002\040\003\000\002" +
    "\040\006\000\002\040\010\000\002\040\005\000\002\043" +
    "\003\000\002\043\005\000\002\042\003\000\002\054\007" +
    "\000\002\054\005\000\002\072\010\000\002\107\006\000" +
    "\002\107\003\000\002\073\010\000\002\073\005\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\032\003\000\002\032\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\005\000\002\045\012\000\002\045\010\000" +
    "\002\045\010\000\002\045\006\000\002\112\005\000\002" +
    "\067\003\000\002\067\003\000\002\067\003\000\002\067" +
    "\005\000\002\067\005\000\002\067\004\000\002\067\005" +
    "\000\002\067\005\000\002\066\003\000\002\066\005\000" +
    "\002\066\005\000\002\066\004\000\002\066\004\000\002" +
    "\066\005\000\002\066\005\000\002\066\005\000\002\066" +
    "\005\000\002\066\005\000\002\066\005\000\002\066\005" +
    "\000\002\066\005\000\002\044\012\000\002\044\006\000" +
    "\002\044\004\000\002\044\010\000\002\110\003\000\002" +
    "\110\002\000\002\111\005\000\002\111\003\000\002\076" +
    "\005\000\002\076\002\000\002\074\012\000\002\074\010" +
    "\000\002\051\004\000\002\051\004\000\002\047\007\000" +
    "\002\050\011\000\002\052\003\000\002\052\002\000\002" +
    "\053\005\000\002\053\003\000\002\034\003\000\002\034" +
    "\002\000\002\035\005\000\002\035\003\000\002\057\003" +
    "\000\002\057\003\000\002\063\007\000\002\063\013\000" +
    "\002\062\006\000\002\065\004\000\002\065\002\000\002" +
    "\046\004\000\002\046\003\000\002\064\003\000\002\064" +
    "\003\000\002\070\007\000\002\070\007\000\002\077\010" +
    "\000\002\100\006\000\002\100\003\000\002\101\006\000" +
    "\002\101\005\000\002\103\003\000\002\103\003\000\002" +
    "\102\003\000\002\102\004\000\002\104\003\000\002\104" +
    "\002\000\002\105\005\000\002\105\003\000\002\106\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0161\000\060\002\ufffd\011\ufffd\015\ufffd\030\ufffd\037" +
    "\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd" +
    "\053\ufffd\054\ufffd\055\ufffd\057\006\061\ufffd\062\ufffd\063" +
    "\ufffd\064\ufffd\067\ufffd\070\ufffd\071\ufffd\074\ufffd\001\002" +
    "\000\100\002\ufffe\011\ufffe\014\ufffe\015\ufffe\016\ufffe\030" +
    "\ufffe\037\ufffe\040\ufffe\043\ufffe\045\ufffe\046\ufffe\047\ufffe" +
    "\050\ufffe\051\ufffe\052\ufffe\053\ufffe\054\ufffe\055\ufffe\056" +
    "\ufffe\057\214\060\ufffe\061\ufffe\062\ufffe\063\ufffe\064\ufffe" +
    "\066\ufffe\067\ufffe\070\ufffe\071\ufffe\072\ufffe\074\ufffe\001" +
    "\002\000\004\002\u0163\001\002\000\100\002\uffff\011\uffff" +
    "\014\uffff\015\uffff\016\uffff\030\uffff\037\uffff\040\uffff\043" +
    "\uffff\045\uffff\046\uffff\047\uffff\050\uffff\051\uffff\052\uffff" +
    "\053\uffff\054\uffff\055\uffff\056\uffff\057\uffff\060\uffff\061" +
    "\uffff\062\uffff\063\uffff\064\uffff\066\uffff\067\uffff\070\uffff" +
    "\071\uffff\072\uffff\074\uffff\001\002\000\056\002\ufffa\011" +
    "\017\015\065\030\025\037\027\045\020\046\036\047\042" +
    "\050\062\051\057\052\014\053\066\054\052\055\060\061" +
    "\051\062\013\063\040\064\043\067\032\070\037\071\016" +
    "\074\050\001\002\000\010\002\uffb0\014\uffb0\057\uffb0\001" +
    "\002\000\006\002\ufff4\057\ufff4\001\002\000\062\002\uffbe" +
    "\005\uffbe\007\uffbe\010\uffbe\012\uffbe\013\uffbe\014\uffbe\016" +
    "\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\024\uffbe\025\uffbe" +
    "\026\uffbe\027\uffbe\030\uffbe\032\u0161\034\uffbe\035\uffbe\036" +
    "\uffbe\041\uffbe\042\uffbe\057\uffbe\001\002\000\004\053\u015a" +
    "\001\002\000\062\002\uffa9\005\uffa9\007\uffa9\010\uffa9\012" +
    "\uffa9\013\uffa9\014\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9" +
    "\022\uffa9\024\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9\032" +
    "\uffa9\034\uffa9\035\uffa9\036\uffa9\041\uffa9\042\uffa9\057\uffa9" +
    "\001\002\000\052\006\103\007\uffad\015\100\017\uffad\020" +
    "\uffad\021\uffad\022\uffad\023\u0158\024\uffad\025\uffad\026\uffad" +
    "\027\uffad\030\uffad\031\101\032\uffad\033\102\034\uffad\035" +
    "\uffad\036\uffad\042\uffad\001\002\000\042\011\017\013\u0146" +
    "\015\065\030\025\037\027\045\020\046\036\047\042\050" +
    "\062\051\057\052\014\053\u0144\054\052\055\060\064\043" +
    "\070\037\001\002\000\040\011\017\015\065\030\025\037" +
    "\027\045\020\046\036\047\042\050\062\051\057\052\014" +
    "\053\066\054\052\055\060\064\043\070\037\001\002\000" +
    "\062\002\uff99\005\uff99\007\uff99\010\uff99\012\uff99\013\uff99" +
    "\014\uff99\016\uff99\017\uff99\020\uff99\021\uff99\022\uff99\024" +
    "\uff99\025\uff99\026\uff99\027\uff99\030\uff99\032\uff99\034\uff99" +
    "\035\uff99\036\uff99\041\uff99\042\uff99\057\uff99\001\002\000" +
    "\062\002\uffa2\005\uffa2\007\uffa2\010\uffa2\012\uffa2\013\uffa2" +
    "\014\uffa2\016\uffa2\017\uffa2\020\uffa2\021\uffa2\022\uffa2\024" +
    "\uffa2\025\uffa2\026\uffa2\027\uffa2\030\uffa2\032\uffa2\034\uffa2" +
    "\035\uffa2\036\uffa2\041\uffa2\042\uffa2\057\uffa2\001\002\000" +
    "\062\002\uffa5\005\uffa5\007\uffa5\010\uffa5\012\uffa5\013\uffa5" +
    "\014\uffa5\016\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5\024" +
    "\uffa5\025\uffa5\026\uffa5\027\uffa5\030\uffa5\032\uffa5\034\uffa5" +
    "\035\uffa5\036\uffa5\041\uffa5\042\uffa5\057\uffa5\001\002\000" +
    "\006\002\ufff6\057\ufff6\001\002\000\006\002\ufff5\057\ufff5" +
    "\001\002\000\040\011\017\015\065\030\025\037\027\045" +
    "\020\046\036\047\042\050\062\051\057\052\014\053\066" +
    "\054\052\055\060\064\043\070\037\001\002\000\006\002" +
    "\ufff8\057\ufff8\001\002\000\040\011\017\015\065\030\025" +
    "\037\027\045\020\046\036\047\042\050\062\051\057\052" +
    "\014\053\066\054\052\055\060\064\043\070\037\001\002" +
    "\000\062\002\uffa7\005\uffa7\007\uffa7\010\uffa7\012\uffa7\013" +
    "\uffa7\014\uffa7\016\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7" +
    "\024\uffa7\025\uffa7\026\uffa7\027\uffa7\030\uffa7\032\uffa7\034" +
    "\uffa7\035\uffa7\036\uffa7\041\uffa7\042\uffa7\057\uffa7\001\002" +
    "\000\006\002\ufff2\057\ufff2\001\002\000\004\054\u0126\001" +
    "\002\000\062\002\uffa6\005\uffa6\007\uffa6\010\uffa6\012\uffa6" +
    "\013\uffa6\014\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6\022" +
    "\uffa6\024\uffa6\025\uffa6\026\uffa6\027\uffa6\030\uffa6\032\uffa6" +
    "\034\uffa6\035\uffa6\036\uffa6\041\uffa6\042\uffa6\057\uffa6\001" +
    "\002\000\046\002\uffb4\007\uff98\014\uffb4\017\uff98\020\uff98" +
    "\021\uff98\022\uff98\024\uff98\025\uff98\026\uff98\027\uff98\030" +
    "\uff98\032\uff98\034\uff98\035\uff98\036\uff98\042\uff98\057\uffb4" +
    "\001\002\000\006\002\ufff3\057\ufff3\001\002\000\062\002" +
    "\uff9a\005\uff9a\007\uff9a\010\uff9a\012\uff9a\013\uff9a\014\uff9a" +
    "\016\uff9a\017\uff9a\020\uff9a\021\uff9a\022\uff9a\024\uff9a\025" +
    "\uff9a\026\uff9a\027\uff9a\030\uff9a\032\uff9a\034\uff9a\035\uff9a" +
    "\036\uff9a\041\uff9a\042\uff9a\057\uff9a\001\002\000\062\002" +
    "\uffac\005\uffac\007\uffac\010\uffac\012\uffac\013\uffac\014\uffac" +
    "\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac\024\uffac\025" +
    "\uffac\026\uffac\027\uffac\030\uffac\032\uffac\034\uffac\035\uffac" +
    "\036\uffac\041\uffac\042\uffac\057\uffac\001\002\000\004\053" +
    "\347\001\002\000\010\002\uffb3\014\uffb3\057\uffb3\001\002" +
    "\000\062\002\uffc4\005\uffc4\007\uffc4\010\uffc4\012\uffc4\013" +
    "\uffc4\014\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4" +
    "\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\032\uffc4\034" +
    "\uffc4\035\uffc4\036\uffc4\041\uffc4\042\uffc4\057\uffc4\001\002" +
    "\000\010\011\313\041\uffe7\053\312\001\002\000\046\002" +
    "\uffb1\007\uffaa\014\uffb1\017\uffaa\020\uffaa\021\uffaa\022\uffaa" +
    "\024\uffaa\025\uffaa\026\uffaa\027\uffaa\030\uffaa\032\uffaa\034" +
    "\uffaa\035\uffaa\036\uffaa\042\uffaa\057\uffb1\001\002\000\062" +
    "\002\uffa1\005\uffa1\007\uffa1\010\uffa1\012\uffa1\013\uffa1\014" +
    "\uffa1\016\uffa1\017\uffa1\020\uffa1\021\uffa1\022\uffa1\024\uffa1" +
    "\025\uffa1\026\uffa1\027\uffa1\030\uffa1\032\uffa1\034\uffa1\035" +
    "\uffa1\036\uffa1\041\uffa1\042\uffa1\057\uffa1\001\002\000\062" +
    "\002\uffa4\005\uffa4\007\uffa4\010\uffa4\012\uffa4\013\uffa4\014" +
    "\uffa4\016\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4\024\uffa4" +
    "\025\uffa4\026\uffa4\027\uffa4\030\uffa4\032\uffa4\034\uffa4\035" +
    "\uffa4\036\uffa4\041\uffa4\042\uffa4\057\uffa4\001\002\000\062" +
    "\002\uff92\005\uff92\007\uff92\010\uff92\012\uff92\013\uff92\014" +
    "\uff92\016\uff92\017\uff92\020\uff92\021\uff92\022\uff92\024\uff92" +
    "\025\uff92\026\uff92\027\uff92\030\uff92\032\uff92\034\uff92\035" +
    "\uff92\036\uff92\041\uff92\042\uff92\057\uff92\001\002\000\016" +
    "\002\uffcd\011\243\043\237\053\242\054\236\057\uffcd\001" +
    "\002\000\004\051\235\001\002\000\066\002\uffc5\005\uffc5" +
    "\007\uffc5\010\uffc5\012\uffc5\013\uffc5\014\uffc5\015\220\016" +
    "\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5" +
    "\025\uffc5\026\uffc5\027\uffc5\030\uffc5\032\uffc5\034\uffc5\035" +
    "\uffc5\036\uffc5\041\uffc5\042\uffc5\057\uffc5\001\002\000\062" +
    "\002\uffa8\005\uffa8\007\uffa8\010\uffa8\012\uffa8\013\uffa8\014" +
    "\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8\024\uffa8" +
    "\025\uffa8\026\uffa8\027\uffa8\030\uffa8\032\uffa8\034\uffa8\035" +
    "\uffa8\036\uffa8\041\uffa8\042\uffa8\057\uffa8\001\002\000\046" +
    "\002\uffb2\007\uffab\014\uffb2\017\uffab\020\uffab\021\uffab\022" +
    "\uffab\024\uffab\025\uffab\026\uffab\027\uffab\030\uffab\032\uffab" +
    "\034\uffab\035\uffab\036\uffab\042\uffab\057\uffb2\001\002\000" +
    "\040\007\126\017\125\020\114\021\111\022\121\024\123" +
    "\025\112\026\115\027\122\030\106\032\116\034\110\035" +
    "\113\036\107\042\124\001\002\000\042\007\uffa3\017\uffa3" +
    "\020\uffa3\021\uffa3\022\uffa3\023\216\024\uffa3\025\uffa3\026" +
    "\uffa3\027\uffa3\030\uffa3\032\uffa3\034\uffa3\035\uffa3\036\uffa3" +
    "\042\uffa3\001\002\000\062\002\uffbc\005\uffbc\007\uffbc\010" +
    "\uffbc\012\uffbc\013\uffbc\014\uffbc\016\uffbc\017\uffbc\020\uffbc" +
    "\021\uffbc\022\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030" +
    "\uffbc\032\uffbc\034\uffbc\035\uffbc\036\uffbc\041\uffbc\042\uffbc" +
    "\057\uffbc\001\002\000\040\011\017\015\065\030\025\037" +
    "\027\045\020\046\036\047\042\050\062\051\057\052\014" +
    "\053\066\054\052\055\060\064\043\070\037\001\002\000" +
    "\006\002\ufffd\057\006\001\002\000\062\002\uffc3\005\uffc3" +
    "\007\uffc3\010\uffc3\012\uffc3\013\uffc3\014\uffc3\016\uffc3\017" +
    "\uffc3\020\uffc3\021\uffc3\022\uffc3\024\uffc3\025\uffc3\026\uffc3" +
    "\027\uffc3\030\uffc3\032\uffc3\034\uffc3\035\uffc3\036\uffc3\041" +
    "\uffc3\042\uffc3\057\uffc3\001\002\000\004\002\ufffc\001\002" +
    "\000\006\002\ufff7\057\ufff7\001\002\000\042\011\017\015" +
    "\065\016\uff74\030\025\037\027\045\020\046\036\047\042" +
    "\050\062\051\057\052\014\053\066\054\052\055\060\064" +
    "\043\070\037\001\002\000\076\002\uffc2\005\uffc2\006\uffc2" +
    "\007\uffc2\010\uffc2\011\067\012\uffc2\013\uffc2\014\uffc2\015" +
    "\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2" +
    "\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032" +
    "\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\041\uffc2\042\uffc2" +
    "\057\uffc2\001\002\000\042\011\017\012\uff74\015\065\030" +
    "\025\037\027\045\020\046\036\047\042\050\062\051\057" +
    "\052\014\053\066\054\052\055\060\064\043\070\037\001" +
    "\002\000\044\005\uff72\007\126\012\uff72\017\125\020\114" +
    "\021\111\022\121\024\123\025\112\026\115\027\122\030" +
    "\106\032\116\034\110\035\113\036\107\042\124\001\002" +
    "\000\062\002\uffa3\005\uffa3\007\uffa3\010\uffa3\012\uffa3\013" +
    "\uffa3\014\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3\022\uffa3" +
    "\024\uffa3\025\uffa3\026\uffa3\027\uffa3\030\uffa3\032\uffa3\034" +
    "\uffa3\035\uffa3\036\uffa3\041\uffa3\042\uffa3\057\uffa3\001\002" +
    "\000\004\012\201\001\002\000\062\002\uffaa\005\uffaa\007" +
    "\uffaa\010\uffaa\012\uffaa\013\uffaa\014\uffaa\016\uffaa\017\uffaa" +
    "\020\uffaa\021\uffaa\022\uffaa\024\uffaa\025\uffaa\026\uffaa\027" +
    "\uffaa\030\uffaa\032\uffaa\034\uffaa\035\uffaa\036\uffaa\041\uffaa" +
    "\042\uffaa\057\uffaa\001\002\000\010\005\177\012\uff75\016" +
    "\uff75\001\002\000\062\002\uff98\005\uff98\007\uff98\010\uff98" +
    "\012\uff98\013\uff98\014\uff98\016\uff98\017\uff98\020\uff98\021" +
    "\uff98\022\uff98\024\uff98\025\uff98\026\uff98\027\uff98\030\uff98" +
    "\032\uff98\034\uff98\035\uff98\036\uff98\041\uff98\042\uff98\057" +
    "\uff98\001\002\000\062\002\uffab\005\uffab\007\uffab\010\uffab" +
    "\012\uffab\013\uffab\014\uffab\016\uffab\017\uffab\020\uffab\021" +
    "\uffab\022\uffab\024\uffab\025\uffab\026\uffab\027\uffab\030\uffab" +
    "\032\uffab\034\uffab\035\uffab\036\uffab\041\uffab\042\uffab\057" +
    "\uffab\001\002\000\072\002\uffad\005\uffad\006\103\007\uffad" +
    "\010\uffad\012\uffad\013\uffad\014\uffad\015\100\016\uffad\017" +
    "\uffad\020\uffad\021\uffad\022\uffad\024\uffad\025\uffad\026\uffad" +
    "\027\uffad\030\uffad\031\101\032\uffad\033\102\034\uffad\035" +
    "\uffad\036\uffad\041\uffad\042\uffad\057\uffad\001\002\000\040" +
    "\011\017\015\065\030\025\037\027\045\020\046\036\047" +
    "\042\050\062\051\057\052\014\053\066\054\052\055\060" +
    "\064\043\070\037\001\002\000\062\002\uff78\005\uff78\007" +
    "\uff78\010\uff78\012\uff78\013\uff78\014\uff78\016\uff78\017\uff78" +
    "\020\uff78\021\uff78\022\uff78\024\uff78\025\uff78\026\uff78\027" +
    "\uff78\030\uff78\032\uff78\034\uff78\035\uff78\036\uff78\041\uff78" +
    "\042\uff78\057\uff78\001\002\000\062\002\uff79\005\uff79\007" +
    "\uff79\010\uff79\012\uff79\013\uff79\014\uff79\016\uff79\017\uff79" +
    "\020\uff79\021\uff79\022\uff79\024\uff79\025\uff79\026\uff79\027" +
    "\uff79\030\uff79\032\uff79\034\uff79\035\uff79\036\uff79\041\uff79" +
    "\042\uff79\057\uff79\001\002\000\004\053\104\001\002\000" +
    "\074\002\uffbf\005\uffbf\006\uffbf\007\uffbf\010\uffbf\012\uffbf" +
    "\013\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021" +
    "\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf" +
    "\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036" +
    "\uffbf\041\uffbf\042\uffbf\057\uffbf\001\002\000\044\007\126" +
    "\010\120\016\117\017\125\020\114\021\111\022\121\024" +
    "\123\025\112\026\115\027\122\030\106\032\116\034\110" +
    "\035\113\036\107\042\124\001\002\000\040\011\017\015" +
    "\065\030\025\037\027\045\020\046\036\047\042\050\062" +
    "\051\057\052\014\053\066\054\052\055\060\064\043\070" +
    "\037\001\002\000\040\011\017\015\065\030\025\037\027" +
    "\045\020\046\036\047\042\050\062\051\057\052\014\053" +
    "\066\054\052\055\060\064\043\070\037\001\002\000\040" +
    "\011\017\015\065\030\025\037\027\045\020\046\036\047" +
    "\042\050\062\051\057\052\014\053\066\054\052\055\060" +
    "\064\043\070\037\001\002\000\040\011\017\015\065\030" +
    "\025\037\027\045\020\046\036\047\042\050\062\051\057" +
    "\052\014\053\066\054\052\055\060\064\043\070\037\001" +
    "\002\000\040\011\017\015\065\030\025\037\027\045\020" +
    "\046\036\047\042\050\062\051\057\052\014\053\066\054" +
    "\052\055\060\064\043\070\037\001\002\000\040\011\017" +
    "\015\065\030\025\037\027\045\020\046\036\047\042\050" +
    "\062\051\057\052\014\053\066\054\052\055\060\064\043" +
    "\070\037\001\002\000\040\011\017\015\065\030\025\037" +
    "\027\045\020\046\036\047\042\050\062\051\057\052\014" +
    "\053\066\054\052\055\060\064\043\070\037\001\002\000" +
    "\040\011\017\015\065\030\025\037\027\045\020\046\036" +
    "\047\042\050\062\051\057\052\014\053\066\054\052\055" +
    "\060\064\043\070\037\001\002\000\040\011\017\015\065" +
    "\030\025\037\027\045\020\046\036\047\042\050\062\051" +
    "\057\052\014\053\066\054\052\055\060\064\043\070\037" +
    "\001\002\000\074\002\uffc1\005\uffc1\006\uffc1\007\uffc1\010" +
    "\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1" +
    "\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026" +
    "\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1" +
    "\035\uffc1\036\uffc1\041\uffc1\042\uffc1\057\uffc1\001\002\000" +
    "\040\011\017\015\065\030\025\037\027\045\020\046\036" +
    "\047\042\050\062\051\057\052\014\053\066\054\052\055" +
    "\060\064\043\070\037\001\002\000\040\011\017\015\065" +
    "\030\025\037\027\045\020\046\036\047\042\050\062\051" +
    "\057\052\014\053\066\054\052\055\060\064\043\070\037" +
    "\001\002\000\040\011\017\015\065\030\025\037\027\045" +
    "\020\046\036\047\042\050\062\051\057\052\014\053\066" +
    "\054\052\055\060\064\043\070\037\001\002\000\040\011" +
    "\017\015\065\030\025\037\027\045\020\046\036\047\042" +
    "\050\062\051\057\052\014\053\066\054\052\055\060\064" +
    "\043\070\037\001\002\000\006\053\150\054\146\001\002" +
    "\000\040\011\017\015\065\030\025\037\027\045\020\046" +
    "\036\047\042\050\062\051\057\052\014\053\066\054\052" +
    "\055\060\064\043\070\037\001\002\000\004\053\127\001" +
    "\002\000\004\011\130\001\002\000\042\011\017\012\uff74" +
    "\015\065\030\025\037\027\045\020\046\036\047\042\050" +
    "\062\051\057\052\014\053\066\054\052\055\060\064\043" +
    "\070\037\001\002\000\004\012\132\001\002\000\064\002" +
    "\uff7c\005\uff7c\007\uff7c\010\uff7c\012\uff7c\013\uff7c\014\uff7c" +
    "\015\133\016\uff7c\017\uff7c\020\uff7c\021\uff7c\022\uff7c\024" +
    "\uff7c\025\uff7c\026\uff7c\027\uff7c\030\uff7c\032\uff7c\034\uff7c" +
    "\035\uff7c\036\uff7c\041\uff7c\042\uff7c\057\uff7c\001\002\000" +
    "\004\053\137\001\002\000\062\002\uff76\005\uff76\007\uff76" +
    "\010\uff76\012\uff76\013\uff76\014\uff76\016\uff76\017\uff76\020" +
    "\uff76\021\uff76\022\uff76\024\uff76\025\uff76\026\uff76\027\uff76" +
    "\030\uff76\032\uff76\034\uff76\035\uff76\036\uff76\041\uff76\042" +
    "\uff76\057\uff76\001\002\000\006\005\142\016\143\001\002" +
    "\000\006\005\uff6e\016\uff6e\001\002\000\004\023\140\001" +
    "\002\000\040\011\017\015\065\030\025\037\027\045\020" +
    "\046\036\047\042\050\062\051\057\052\014\053\066\054" +
    "\052\055\060\064\043\070\037\001\002\000\044\005\uffc6" +
    "\007\126\016\uffc6\017\125\020\114\021\111\022\121\024" +
    "\123\025\112\026\115\027\122\030\106\032\116\034\110" +
    "\035\113\036\107\042\124\001\002\000\004\053\137\001" +
    "\002\000\062\002\uff7d\005\uff7d\007\uff7d\010\uff7d\012\uff7d" +
    "\013\uff7d\014\uff7d\016\uff7d\017\uff7d\020\uff7d\021\uff7d\022" +
    "\uff7d\024\uff7d\025\uff7d\026\uff7d\027\uff7d\030\uff7d\032\uff7d" +
    "\034\uff7d\035\uff7d\036\uff7d\041\uff7d\042\uff7d\057\uff7d\001" +
    "\002\000\006\005\uff6f\016\uff6f\001\002\000\062\002\uff8b" +
    "\005\uff8b\007\126\010\uff8b\012\uff8b\013\uff8b\014\uff8b\016" +
    "\uff8b\017\uff8b\020\uff8b\021\uff8b\022\uff8b\024\uff8b\025\uff8b" +
    "\026\115\027\122\030\106\032\116\034\uff8b\035\uff8b\036" +
    "\uff8b\041\uff8b\042\uff8b\057\uff8b\001\002\000\064\002\uffb7" +
    "\005\uffb7\007\uffb7\010\uffb7\012\uffb7\013\uffb7\014\uffb7\015" +
    "\152\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\024\uffb7" +
    "\025\uffb7\026\uffb7\027\uffb7\030\uffb7\032\uffb7\034\uffb7\035" +
    "\uffb7\036\uffb7\041\uffb7\042\uffb7\057\uffb7\001\002\000\062" +
    "\002\uff86\005\uff86\007\uff86\010\uff86\012\uff86\013\uff86\014" +
    "\uff86\016\uff86\017\uff86\020\uff86\021\uff86\022\uff86\024\uff86" +
    "\025\uff86\026\uff86\027\uff86\030\uff86\032\uff86\034\uff86\035" +
    "\uff86\036\uff86\041\uff86\042\uff86\057\uff86\001\002\000\004" +
    "\011\067\001\002\000\062\002\uff87\005\uff87\007\uff87\010" +
    "\uff87\012\uff87\013\uff87\014\uff87\016\uff87\017\uff87\020\uff87" +
    "\021\uff87\022\uff87\024\uff87\025\uff87\026\uff87\027\uff87\030" +
    "\uff87\032\uff87\034\uff87\035\uff87\036\uff87\041\uff87\042\uff87" +
    "\057\uff87\001\002\000\042\011\017\015\065\016\uff80\030" +
    "\025\037\027\045\020\046\036\047\042\050\062\051\057" +
    "\052\014\053\066\054\052\055\060\064\043\070\037\001" +
    "\002\000\044\005\uff7e\007\126\016\uff7e\017\125\020\114" +
    "\021\111\022\121\024\123\025\112\026\115\027\122\030" +
    "\106\032\116\034\110\035\113\036\107\042\124\001\002" +
    "\000\006\005\157\016\uff81\001\002\000\004\016\156\001" +
    "\002\000\062\002\uffb8\005\uffb8\007\uffb8\010\uffb8\012\uffb8" +
    "\013\uffb8\014\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022" +
    "\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8\032\uffb8" +
    "\034\uffb8\035\uffb8\036\uffb8\041\uffb8\042\uffb8\057\uffb8\001" +
    "\002\000\040\011\017\015\065\030\025\037\027\045\020" +
    "\046\036\047\042\050\062\051\057\052\014\053\066\054" +
    "\052\055\060\064\043\070\037\001\002\000\044\005\uff7f" +
    "\007\126\016\uff7f\017\125\020\114\021\111\022\121\024" +
    "\123\025\112\026\115\027\122\030\106\032\116\034\110" +
    "\035\113\036\107\042\124\001\002\000\062\002\uff8d\005" +
    "\uff8d\007\126\010\uff8d\012\uff8d\013\uff8d\014\uff8d\016\uff8d" +
    "\017\uff8d\020\uff8d\021\uff8d\022\uff8d\024\uff8d\025\uff8d\026" +
    "\115\027\122\030\106\032\116\034\uff8d\035\uff8d\036\uff8d" +
    "\041\uff8d\042\uff8d\057\uff8d\001\002\000\062\002\uff93\005" +
    "\uff93\007\126\010\uff93\012\uff93\013\uff93\014\uff93\016\uff93" +
    "\017\uff93\020\uff93\021\uff93\022\uff93\024\uff93\025\uff93\026" +
    "\uff93\027\uff93\030\uff93\032\uff93\034\uff93\035\uff93\036\uff93" +
    "\041\uff93\042\uff93\057\uff93\001\002\000\062\002\uff89\005" +
    "\uff89\007\126\010\uff89\012\uff89\013\uff89\014\uff89\016\uff89" +
    "\017\uff89\020\uff89\021\uff89\022\uff89\024\uff89\025\uff89\026" +
    "\115\027\122\030\106\032\116\034\uff89\035\uff89\036\uff89" +
    "\041\uff89\042\uff89\057\uff89\001\002\000\042\007\126\016" +
    "\165\017\125\020\114\021\111\022\121\024\123\025\112" +
    "\026\115\027\122\030\106\032\116\034\110\035\113\036" +
    "\107\042\124\001\002\000\074\002\uffc0\005\uffc0\006\uffc0" +
    "\007\uffc0\010\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\016" +
    "\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0" +
    "\025\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033" +
    "\uffc0\034\uffc0\035\uffc0\036\uffc0\041\uffc0\042\uffc0\057\uffc0" +
    "\001\002\000\062\002\uff97\005\uff97\007\126\010\uff97\012" +
    "\uff97\013\uff97\014\uff97\016\uff97\017\uff97\020\uff97\021\uff97" +
    "\022\uff97\024\uff97\025\uff97\026\115\027\122\030\uff97\032" +
    "\uff97\034\uff97\035\uff97\036\uff97\041\uff97\042\uff97\057\uff97" +
    "\001\002\000\062\002\uff94\005\uff94\007\126\010\uff94\012" +
    "\uff94\013\uff94\014\uff94\016\uff94\017\uff94\020\uff94\021\uff94" +
    "\022\uff94\024\uff94\025\uff94\026\uff94\027\uff94\030\uff94\032" +
    "\uff94\034\uff94\035\uff94\036\uff94\041\uff94\042\uff94\057\uff94" +
    "\001\002\000\062\002\uff8a\005\uff8a\007\126\010\uff8a\012" +
    "\uff8a\013\uff8a\014\uff8a\016\uff8a\017\uff8a\020\uff8a\021\uff8a" +
    "\022\uff8a\024\uff8a\025\uff8a\026\115\027\122\030\106\032" +
    "\116\034\uff8a\035\uff8a\036\uff8a\041\uff8a\042\uff8a\057\uff8a" +
    "\001\002\000\062\002\uff91\005\uff91\007\126\010\uff91\012" +
    "\uff91\013\uff91\014\uff91\016\uff91\017\125\020\114\021\111" +
    "\022\121\024\123\025\112\026\115\027\122\030\106\032" +
    "\116\034\uff91\035\uff91\036\uff91\041\uff91\042\124\057\uff91" +
    "\001\002\000\062\002\uff8c\005\uff8c\007\126\010\uff8c\012" +
    "\uff8c\013\uff8c\014\uff8c\016\uff8c\017\uff8c\020\uff8c\021\uff8c" +
    "\022\uff8c\024\uff8c\025\uff8c\026\115\027\122\030\106\032" +
    "\116\034\uff8c\035\uff8c\036\uff8c\041\uff8c\042\uff8c\057\uff8c" +
    "\001\002\000\062\002\uff88\005\uff88\007\126\010\uff88\012" +
    "\uff88\013\uff88\014\uff88\016\uff88\017\uff88\020\uff88\021\uff88" +
    "\022\uff88\024\uff88\025\uff88\026\115\027\122\030\106\032" +
    "\116\034\uff88\035\uff88\036\uff88\041\uff88\042\uff88\057\uff88" +
    "\001\002\000\062\002\uff90\005\uff90\007\126\010\uff90\012" +
    "\uff90\013\uff90\014\uff90\016\uff90\017\125\020\114\021\111" +
    "\022\121\024\123\025\112\026\115\027\122\030\106\032" +
    "\116\034\uff90\035\113\036\uff90\041\uff90\042\124\057\uff90" +
    "\001\002\000\062\002\uff9b\005\uff9b\007\126\010\uff9b\012" +
    "\uff9b\013\uff9b\014\uff9b\016\uff9b\017\125\020\114\021\111" +
    "\022\121\024\123\025\112\026\115\027\122\030\106\032" +
    "\116\034\110\035\113\036\uff9b\041\uff9b\042\124\057\uff9b" +
    "\001\002\000\062\002\uff96\005\uff96\007\126\010\uff96\012" +
    "\uff96\013\uff96\014\uff96\016\uff96\017\uff96\020\uff96\021\uff96" +
    "\022\uff96\024\uff96\025\uff96\026\115\027\122\030\uff96\032" +
    "\uff96\034\uff96\035\uff96\036\uff96\041\uff96\042\uff96\057\uff96" +
    "\001\002\000\040\011\017\015\065\030\025\037\027\045" +
    "\020\046\036\047\042\050\062\051\057\052\014\053\066" +
    "\054\052\055\060\064\043\070\037\001\002\000\046\005" +
    "\uff73\007\126\012\uff73\016\uff73\017\125\020\114\021\111" +
    "\022\121\024\123\025\112\026\115\027\122\030\106\032" +
    "\116\034\110\035\113\036\107\042\124\001\002\000\064" +
    "\002\uff7c\005\uff7c\007\uff7c\010\uff7c\012\uff7c\013\uff7c\014" +
    "\uff7c\015\133\016\uff7c\017\uff7c\020\uff7c\021\uff7c\022\uff7c" +
    "\024\uff7c\025\uff7c\026\uff7c\027\uff7c\030\uff7c\032\uff7c\034" +
    "\uff7c\035\uff7c\036\uff7c\041\uff7c\042\uff7c\057\uff7c\001\002" +
    "\000\062\002\uff77\005\uff77\007\uff77\010\uff77\012\uff77\013" +
    "\uff77\014\uff77\016\uff77\017\uff77\020\uff77\021\uff77\022\uff77" +
    "\024\uff77\025\uff77\026\uff77\027\uff77\030\uff77\032\uff77\034" +
    "\uff77\035\uff77\036\uff77\041\uff77\042\uff77\057\uff77\001\002" +
    "\000\046\005\uff72\007\126\010\206\016\uff72\017\125\020" +
    "\114\021\111\022\121\024\123\025\112\026\115\027\122" +
    "\030\106\032\116\034\110\035\113\036\107\042\124\001" +
    "\002\000\004\016\205\001\002\000\064\002\uffba\005\uffba" +
    "\007\uffba\010\uffba\012\uffba\013\uffba\014\uffba\016\uffba\017" +
    "\uffba\020\uffba\021\uffba\022\uffba\024\uffba\025\uffba\026\uffba" +
    "\027\uffba\030\uffba\032\uffba\034\uffba\035\uffba\036\uffba\040" +
    "\uffba\041\uffba\042\uffba\057\uffba\001\002\000\040\011\017" +
    "\015\065\030\025\037\027\045\020\046\036\047\042\050" +
    "\062\051\057\052\014\053\066\054\052\055\060\064\043" +
    "\070\037\001\002\000\042\007\126\016\210\017\125\020" +
    "\114\021\111\022\121\024\123\025\112\026\115\027\122" +
    "\030\106\032\116\034\110\035\113\036\107\042\124\001" +
    "\002\000\064\002\uffbb\005\uffbb\007\uffbb\010\uffbb\012\uffbb" +
    "\013\uffbb\014\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022" +
    "\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\032\uffbb" +
    "\034\uffbb\035\uffbb\036\uffbb\040\uffbb\041\uffbb\042\uffbb\057" +
    "\uffbb\001\002\000\060\002\ufffe\011\017\015\065\030\025" +
    "\037\027\045\020\046\036\047\042\050\062\051\057\052" +
    "\014\053\066\054\052\055\060\057\214\061\051\062\013" +
    "\063\040\064\043\067\032\070\037\071\016\074\050\001" +
    "\002\000\004\002\ufffb\001\002\000\006\002\ufff9\057\ufff9" +
    "\001\002\000\100\002\000\011\000\014\000\015\000\016" +
    "\000\030\000\037\000\040\000\043\000\045\000\046\000" +
    "\047\000\050\000\051\000\052\000\053\000\054\000\055" +
    "\000\056\000\057\000\060\000\061\000\062\000\063\000" +
    "\064\000\066\000\067\000\070\000\071\000\072\000\074" +
    "\000\001\002\000\062\002\uff8e\005\uff8e\007\126\010\uff8e" +
    "\012\uff8e\013\uff8e\014\uff8e\016\uff8e\017\125\020\114\021" +
    "\111\022\121\024\123\025\112\026\115\027\122\030\106" +
    "\032\116\034\110\035\113\036\107\041\uff8e\042\124\057" +
    "\uff8e\001\002\000\004\015\065\001\002\000\010\002\uffc7" +
    "\014\uffc7\057\uffc7\001\002\000\006\053\ufffd\057\006\001" +
    "\002\000\004\053\223\001\002\000\010\005\226\016\ufffd" +
    "\057\006\001\002\000\004\023\224\001\002\000\040\011" +
    "\017\015\065\030\025\037\027\045\020\046\036\047\042" +
    "\050\062\051\057\052\014\053\066\054\052\055\060\064" +
    "\043\070\037\001\002\000\046\005\uffb5\007\126\016\uffb5" +
    "\017\125\020\114\021\111\022\121\024\123\025\112\026" +
    "\115\027\122\030\106\032\116\034\110\035\113\036\107" +
    "\042\124\057\uffb5\001\002\000\006\053\ufffd\057\006\001" +
    "\002\000\004\016\230\001\002\000\062\002\uffb9\005\uffb9" +
    "\007\uffb9\010\uffb9\012\uffb9\013\uffb9\014\uffb9\016\uffb9\017" +
    "\uffb9\020\uffb9\021\uffb9\022\uffb9\024\uffb9\025\uffb9\026\uffb9" +
    "\027\uffb9\030\uffb9\032\uffb9\034\uffb9\035\uffb9\036\uffb9\041" +
    "\uffb9\042\uffb9\057\uffb9\001\002\000\004\053\232\001\002" +
    "\000\004\023\233\001\002\000\040\011\017\015\065\030" +
    "\025\037\027\045\020\046\036\047\042\050\062\051\057" +
    "\052\014\053\066\054\052\055\060\064\043\070\037\001" +
    "\002\000\046\005\uffb6\007\126\016\uffb6\017\125\020\114" +
    "\021\111\022\121\024\123\025\112\026\115\027\122\030" +
    "\106\032\116\034\110\035\113\036\107\042\124\057\uffb6" +
    "\001\002\000\006\002\ufff1\057\ufff1\001\002\000\014\002" +
    "\uffca\005\uffca\012\uffca\017\306\057\uffca\001\002\000\004" +
    "\053\274\001\002\000\012\002\uffce\005\272\012\uffce\057" +
    "\uffce\001\002\000\012\002\uffcb\005\uffcb\012\uffcb\057\uffcb" +
    "\001\002\000\004\011\264\001\002\000\006\012\uffcd\054" +
    "\236\001\002\000\006\002\uffee\057\uffee\001\002\000\004" +
    "\012\246\001\002\000\004\053\247\001\002\000\004\011" +
    "\250\001\002\000\006\012\uffd3\054\251\001\002\000\020" +
    "\002\uffd0\005\uffd0\012\uffd0\015\uffd0\016\uffd0\026\uffd0\057" +
    "\uffd0\001\002\000\012\005\uffd1\012\uffd1\016\uffd1\026\257" +
    "\001\002\000\004\012\260\001\002\000\010\005\255\012" +
    "\uffd4\016\uffd4\001\002\000\004\054\251\001\002\000\012" +
    "\005\uffd2\012\uffd2\016\uffd2\026\257\001\002\000\020\002" +
    "\uffcf\005\uffcf\012\uffcf\015\uffcf\016\uffcf\026\uffcf\057\uffcf" +
    "\001\002\000\004\041\261\001\002\000\004\054\251\001" +
    "\002\000\012\002\uff7c\015\133\026\257\057\uff7c\001\002" +
    "\000\006\002\uffef\057\uffef\001\002\000\006\012\uffd3\054" +
    "\251\001\002\000\004\012\266\001\002\000\004\041\267" +
    "\001\002\000\004\054\251\001\002\000\012\002\uff7c\015" +
    "\133\026\257\057\uff7c\001\002\000\006\002\ufff0\057\ufff0" +
    "\001\002\000\004\054\236\001\002\000\012\002\uffcc\005" +
    "\uffcc\012\uffcc\057\uffcc\001\002\000\006\011\uffed\015\276" +
    "\001\002\000\004\011\301\001\002\000\006\016\uffd3\054" +
    "\251\001\002\000\004\016\300\001\002\000\004\011\uffec" +
    "\001\002\000\006\012\uffd3\054\251\001\002\000\004\012" +
    "\303\001\002\000\004\041\304\001\002\000\004\051\305" +
    "\001\002\000\006\002\uffeb\057\uffeb\001\002\000\004\054" +
    "\307\001\002\000\012\002\uffc9\005\uffc9\012\uffc9\057\uffc9" +
    "\001\002\000\010\005\345\012\uffe8\041\uffe8\001\002\000" +
    "\004\041\340\001\002\000\012\005\uffe3\012\uffe3\023\336" +
    "\041\uffe3\001\002\000\006\012\uffe7\053\312\001\002\000" +
    "\010\005\uffe5\012\uffe5\041\uffe5\001\002\000\004\012\316" +
    "\001\002\000\004\041\317\001\002\000\042\011\017\013" +
    "\321\015\065\030\025\037\027\045\020\046\036\047\042" +
    "\050\062\051\057\052\014\053\066\054\052\055\060\064" +
    "\043\070\037\001\002\000\062\002\uff9d\005\uff9d\007\126" +
    "\010\uff9d\012\uff9d\013\uff9d\014\uff9d\016\uff9d\017\125\020" +
    "\114\021\111\022\121\024\123\025\112\026\115\027\122" +
    "\030\106\032\116\034\110\035\113\036\107\041\uff9d\042" +
    "\124\057\uff9d\001\002\000\050\011\ufffd\014\ufffd\015\ufffd" +
    "\030\ufffd\037\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd\051" +
    "\ufffd\052\ufffd\053\ufffd\054\ufffd\055\ufffd\057\006\064\ufffd" +
    "\066\ufffd\070\ufffd\071\ufffd\001\002\000\046\011\017\014" +
    "\uffe1\015\065\030\025\037\027\045\020\046\036\047\042" +
    "\050\062\051\057\052\014\053\066\054\052\055\060\064" +
    "\043\066\330\070\037\071\016\001\002\000\004\014\324" +
    "\001\002\000\062\002\uff9f\005\uff9f\007\uff9f\010\uff9f\012" +
    "\uff9f\013\uff9f\014\uff9f\016\uff9f\017\uff9f\020\uff9f\021\uff9f" +
    "\022\uff9f\024\uff9f\025\uff9f\026\uff9f\027\uff9f\030\uff9f\032" +
    "\uff9f\034\uff9f\035\uff9f\036\uff9f\041\uff9f\042\uff9f\057\uff9f" +
    "\001\002\000\006\014\uffae\057\uffae\001\002\000\006\014" +
    "\uffaf\057\uffaf\001\002\000\006\014\uffdf\057\uffdf\001\002" +
    "\000\044\011\017\014\uff65\015\065\030\025\037\027\045" +
    "\020\046\036\047\042\050\062\051\057\052\014\053\066" +
    "\054\052\055\060\057\uff65\064\043\070\037\001\002\000" +
    "\006\014\ufffd\057\006\001\002\000\050\011\017\014\ufffe" +
    "\015\065\030\025\037\027\045\020\046\036\047\042\050" +
    "\062\051\057\052\014\053\066\054\052\055\060\057\214" +
    "\064\043\066\330\070\037\071\016\001\002\000\004\014" +
    "\uffe2\001\002\000\006\014\uffe0\057\uffe0\001\002\000\044" +
    "\007\126\014\uff66\017\125\020\114\021\111\022\121\024" +
    "\123\025\112\026\115\027\122\030\106\032\116\034\110" +
    "\035\113\036\107\042\124\057\uff66\001\002\000\040\011" +
    "\017\015\065\030\025\037\027\045\020\046\036\047\042" +
    "\050\062\051\057\052\014\053\066\054\052\055\060\064" +
    "\043\070\037\001\002\000\046\005\uffe4\007\126\012\uffe4" +
    "\017\125\020\114\021\111\022\121\024\123\025\112\026" +
    "\115\027\122\030\106\032\116\034\110\035\113\036\107" +
    "\041\uffe4\042\124\001\002\000\042\011\017\013\342\015" +
    "\065\030\025\037\027\045\020\046\036\047\042\050\062" +
    "\051\057\052\014\053\066\054\052\055\060\064\043\070" +
    "\037\001\002\000\062\002\uff9c\005\uff9c\007\126\010\uff9c" +
    "\012\uff9c\013\uff9c\014\uff9c\016\uff9c\017\125\020\114\021" +
    "\111\022\121\024\123\025\112\026\115\027\122\030\106" +
    "\032\116\034\110\035\113\036\107\041\uff9c\042\124\057" +
    "\uff9c\001\002\000\050\011\ufffd\014\ufffd\015\ufffd\030\ufffd" +
    "\037\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd\052" +
    "\ufffd\053\ufffd\054\ufffd\055\ufffd\057\006\064\ufffd\066\ufffd" +
    "\070\ufffd\071\ufffd\001\002\000\004\014\344\001\002\000" +
    "\062\002\uff9e\005\uff9e\007\uff9e\010\uff9e\012\uff9e\013\uff9e" +
    "\014\uff9e\016\uff9e\017\uff9e\020\uff9e\021\uff9e\022\uff9e\024" +
    "\uff9e\025\uff9e\026\uff9e\027\uff9e\030\uff9e\032\uff9e\034\uff9e" +
    "\035\uff9e\036\uff9e\041\uff9e\042\uff9e\057\uff9e\001\002\000" +
    "\004\053\312\001\002\000\010\005\uffe6\012\uffe6\041\uffe6" +
    "\001\002\000\004\011\350\001\002\000\006\012\uffe7\053" +
    "\312\001\002\000\004\012\352\001\002\000\004\013\353" +
    "\001\002\000\050\011\ufffd\014\ufffd\015\ufffd\030\ufffd\037" +
    "\ufffd\043\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd" +
    "\052\ufffd\053\ufffd\054\ufffd\055\ufffd\056\ufffd\057\006\064" +
    "\ufffd\070\ufffd\001\002\000\046\011\017\014\uffdd\015\065" +
    "\030\025\037\027\043\366\045\020\046\036\047\042\050" +
    "\062\051\057\052\014\053\372\054\052\055\060\056\363" +
    "\064\043\070\037\001\002\000\004\014\356\001\002\000" +
    "\006\002\uffe9\057\uffe9\001\002\000\006\014\uff6d\057\uff6d" +
    "\001\002\000\004\013\u0123\001\002\000\006\014\ufffd\057" +
    "\006\001\002\000\006\005\u0116\065\u0117\001\002\000\004" +
    "\011\u010d\001\002\000\004\013\uff63\001\002\000\042\007" +
    "\126\013\uff64\017\125\020\114\021\111\022\121\024\123" +
    "\025\112\026\115\027\122\030\106\032\116\034\110\035" +
    "\113\036\107\042\124\001\002\000\004\053\u0108\001\002" +
    "\000\006\013\uff67\035\u0103\001\002\000\006\014\uffdb\057" +
    "\uffdb\001\002\000\006\014\uff6c\057\uff6c\001\002\000\062" +
    "\004\373\005\uffd5\006\uffc2\007\uffc2\011\067\013\uffc2\015" +
    "\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\024\uffc2\025\uffc2" +
    "\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034" +
    "\uffc2\035\uffc2\036\uffc2\042\uffc2\065\uffd5\001\002\000\004" +
    "\043\374\001\002\000\004\053\375\001\002\000\004\011" +
    "\376\001\002\000\042\011\017\012\uff74\015\065\030\025" +
    "\037\027\045\020\046\036\047\042\050\062\051\057\052" +
    "\014\053\066\054\052\055\060\064\043\070\037\001\002" +
    "\000\004\012\u0100\001\002\000\010\013\uff7c\015\133\035" +
    "\uff7c\001\002\000\006\013\uff7b\035\uff7b\001\002\000\004" +
    "\013\u0105\001\002\000\040\011\017\015\065\030\025\037" +
    "\027\045\020\046\036\047\042\050\062\051\057\052\014" +
    "\053\066\054\052\055\060\064\043\070\037\001\002\000" +
    "\042\007\126\013\uff68\017\125\020\114\021\111\022\121" +
    "\024\123\025\112\026\115\027\122\030\106\032\116\034" +
    "\110\035\113\036\107\042\124\001\002\000\050\011\ufffd" +
    "\014\ufffd\015\ufffd\030\ufffd\037\ufffd\045\ufffd\046\ufffd\047" +
    "\ufffd\050\ufffd\051\ufffd\052\ufffd\053\ufffd\054\ufffd\055\ufffd" +
    "\057\006\064\ufffd\066\ufffd\070\ufffd\071\ufffd\001\002\000" +
    "\004\014\u0107\001\002\000\006\014\uff6b\057\uff6b\001\002" +
    "\000\004\011\u0109\001\002\000\042\011\017\012\uff74\015" +
    "\065\030\025\037\027\045\020\046\036\047\042\050\062" +
    "\051\057\052\014\053\066\054\052\055\060\064\043\070" +
    "\037\001\002\000\004\012\u010b\001\002\000\010\013\uff7c" +
    "\015\133\035\uff7c\001\002\000\006\013\uff7a\035\uff7a\001" +
    "\002\000\042\011\017\012\uff74\015\065\030\025\037\027" +
    "\045\020\046\036\047\042\050\062\051\057\052\014\053" +
    "\066\054\052\055\060\064\043\070\037\001\002\000\004" +
    "\012\u010f\001\002\000\006\043\366\053\u0111\001\002\000" +
    "\006\013\uff67\035\u0103\001\002\000\004\004\373\001\002" +
    "\000\004\013\u0113\001\002\000\050\011\ufffd\014\ufffd\015" +
    "\ufffd\030\ufffd\037\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd" +
    "\051\ufffd\052\ufffd\053\ufffd\054\ufffd\055\ufffd\057\006\064" +
    "\ufffd\066\ufffd\070\ufffd\071\ufffd\001\002\000\004\014\u0115" +
    "\001\002\000\006\014\uff6a\057\uff6a\001\002\000\004\053" +
    "\u011f\001\002\000\006\015\065\054\u0118\001\002\000\004" +
    "\040\uffc5\001\002\000\004\040\u011d\001\002\000\004\040" +
    "\u011b\001\002\000\040\011\017\015\065\030\025\037\027" +
    "\045\020\046\036\047\042\050\062\051\057\052\014\053" +
    "\066\054\052\055\060\064\043\070\037\001\002\000\042" +
    "\007\uffa7\013\uff62\017\uffa7\020\uffa7\021\uffa7\022\uffa7\024" +
    "\uffa7\025\uffa7\026\uffa7\027\uffa7\030\uffa7\032\uffa7\034\uffa7" +
    "\035\uffa7\036\uffa7\042\uffa7\001\002\000\040\011\017\015" +
    "\065\030\025\037\027\045\020\046\036\047\042\050\062" +
    "\051\057\052\014\053\066\054\052\055\060\064\043\070" +
    "\037\001\002\000\042\007\uffa7\013\uff61\017\uffa7\020\uffa7" +
    "\021\uffa7\022\uffa7\024\uffa7\025\uffa7\026\uffa7\027\uffa7\030" +
    "\uffa7\032\uffa7\034\uffa7\035\uffa7\036\uffa7\042\uffa7\001\002" +
    "\000\006\005\uffd6\065\uffd6\001\002\000\050\011\017\014" +
    "\ufffe\015\065\030\025\037\027\043\366\045\020\046\036" +
    "\047\042\050\062\051\057\052\014\053\372\054\052\055" +
    "\060\056\363\057\214\064\043\070\037\001\002\000\004" +
    "\014\uffde\001\002\000\006\014\uffdc\057\uffdc\001\002\000" +
    "\050\011\ufffd\014\ufffd\015\ufffd\030\ufffd\037\ufffd\045\ufffd" +
    "\046\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd\053\ufffd\054" +
    "\ufffd\055\ufffd\057\006\064\ufffd\066\ufffd\070\ufffd\071\ufffd" +
    "\001\002\000\004\014\u0125\001\002\000\014\002\uff69\014" +
    "\uff69\057\uff69\072\uff69\073\uff69\001\002\000\004\023\u0127" +
    "\001\002\000\006\015\u012b\054\u0128\001\002\000\004\015" +
    "\u0138\001\002\000\010\040\ufffd\057\006\060\ufffd\001\002" +
    "\000\010\040\uff5e\057\uff5e\060\uff5e\001\002\000\006\016" +
    "\uff56\053\u012d\001\002\000\004\016\u013b\001\002\000\004" +
    "\004\u0132\001\002\000\006\005\uff54\016\uff54\001\002\000" +
    "\006\005\u0130\016\uff57\001\002\000\004\053\u012d\001\002" +
    "\000\006\005\uff55\016\uff55\001\002\000\006\015\u012b\054" +
    "\u0133\001\002\000\012\005\uff5a\015\u0138\016\uff5a\026\uff5a" +
    "\001\002\000\010\005\uff53\016\uff53\026\u0137\001\002\000" +
    "\010\005\uff59\016\uff59\026\uff59\001\002\000\010\005\uff5b" +
    "\016\uff5b\026\uff5b\001\002\000\010\005\uff58\016\uff58\026" +
    "\uff58\001\002\000\006\016\uff56\053\u012d\001\002\000\004" +
    "\016\u013a\001\002\000\016\005\uff5d\016\uff5d\026\uff5d\040" +
    "\uff5d\057\uff5d\060\uff5d\001\002\000\016\005\uff5c\016\uff5c" +
    "\026\uff5c\040\uff5c\057\uff5c\060\uff5c\001\002\000\006\040" +
    "\u013e\060\u013d\001\002\000\006\002\uff60\057\uff60\001\002" +
    "\000\006\015\u012b\054\u0128\001\002\000\010\040\uff5f\057" +
    "\uff5f\060\uff5f\001\002\000\062\002\uff8f\005\uff8f\007\126" +
    "\010\uff8f\012\uff8f\013\uff8f\014\uff8f\016\uff8f\017\125\020" +
    "\114\021\111\022\121\024\123\025\112\026\115\027\122" +
    "\030\106\032\116\034\uff8f\035\uff8f\036\uff8f\041\uff8f\042" +
    "\uff8f\057\uff8f\001\002\000\062\002\uff95\005\uff95\007\126" +
    "\010\uff95\012\uff95\013\uff95\014\uff95\016\uff95\017\uff95\020" +
    "\uff95\021\uff95\022\uff95\024\uff95\025\uff95\026\115\027\122" +
    "\030\uff95\032\uff95\034\uff95\035\uff95\036\uff95\041\uff95\042" +
    "\uff95\057\uff95\001\002\000\042\007\126\012\u0143\017\125" +
    "\020\114\021\111\022\121\024\123\025\112\026\115\027" +
    "\122\030\106\032\116\034\110\035\113\036\107\042\124" +
    "\001\002\000\062\002\uffa0\005\uffa0\007\uffa0\010\uffa0\012" +
    "\uffa0\013\uffa0\014\uffa0\016\uffa0\017\uffa0\020\uffa0\021\uffa0" +
    "\022\uffa0\024\uffa0\025\uffa0\026\uffa0\027\uffa0\030\uffa0\032" +
    "\uffa0\034\uffa0\035\uffa0\036\uffa0\041\uffa0\042\uffa0\057\uffa0" +
    "\001\002\000\060\005\uffd5\006\uffc2\007\uffc2\011\067\013" +
    "\uffc2\015\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\024\uffc2" +
    "\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033" +
    "\uffc2\034\uffc2\035\uffc2\036\uffc2\042\uffc2\065\uffd5\001\002" +
    "\000\012\002\uff83\014\uff83\057\uff83\073\u0154\001\002\000" +
    "\046\011\ufffd\014\ufffd\015\ufffd\030\ufffd\037\ufffd\045\ufffd" +
    "\046\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd\053\ufffd\054" +
    "\ufffd\055\ufffd\057\006\064\ufffd\070\ufffd\072\ufffd\001\002" +
    "\000\006\014\u014f\072\u014e\001\002\000\044\011\017\014" +
    "\uffd9\015\065\030\025\037\027\045\020\046\036\047\042" +
    "\050\062\051\057\052\014\053\u0144\054\052\055\060\064" +
    "\043\070\037\072\uffd9\001\002\000\010\014\uffd7\057\uffd7" +
    "\072\uffd7\001\002\000\010\014\ufffd\057\006\072\ufffd\001" +
    "\002\000\046\011\017\014\ufffe\015\065\030\025\037\027" +
    "\045\020\046\036\047\042\050\062\051\057\052\014\053" +
    "\u0144\054\052\055\060\057\214\064\043\070\037\072\ufffe" +
    "\001\002\000\006\014\uffda\072\uffda\001\002\000\010\014" +
    "\uffd8\057\uffd8\072\uffd8\001\002\000\004\013\u0150\001\002" +
    "\000\010\002\uff84\014\uff84\057\uff84\001\002\000\050\011" +
    "\ufffd\014\ufffd\015\ufffd\030\ufffd\037\ufffd\045\ufffd\046\ufffd" +
    "\047\ufffd\050\ufffd\051\ufffd\052\ufffd\053\ufffd\054\ufffd\055" +
    "\ufffd\057\006\064\ufffd\066\ufffd\070\ufffd\071\ufffd\001\002" +
    "\000\004\014\u0152\001\002\000\004\014\u0153\001\002\000" +
    "\010\002\uff85\014\uff85\057\uff85\001\002\000\004\013\u0155" +
    "\001\002\000\050\011\ufffd\014\ufffd\015\ufffd\030\ufffd\037" +
    "\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd" +
    "\053\ufffd\054\ufffd\055\ufffd\057\006\064\ufffd\066\ufffd\070" +
    "\ufffd\071\ufffd\001\002\000\004\014\u0157\001\002\000\010" +
    "\002\uff82\014\uff82\057\uff82\001\002\000\040\011\017\015" +
    "\065\030\025\037\027\045\020\046\036\047\042\050\062" +
    "\051\057\052\014\053\066\054\052\055\060\064\043\070" +
    "\037\001\002\000\046\002\uffc8\007\126\014\uffc8\017\125" +
    "\020\114\021\111\022\121\024\123\025\112\026\115\027" +
    "\122\030\106\032\116\034\110\035\113\036\107\042\124" +
    "\057\uffc8\001\002\000\004\011\u015b\001\002\000\006\012" +
    "\uffe7\053\312\001\002\000\004\012\u015d\001\002\000\004" +
    "\013\u015e\001\002\000\050\011\ufffd\014\ufffd\015\ufffd\030" +
    "\ufffd\037\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd" +
    "\052\ufffd\053\ufffd\054\ufffd\055\ufffd\057\006\064\ufffd\066" +
    "\ufffd\070\ufffd\071\ufffd\001\002\000\004\014\u0160\001\002" +
    "\000\006\002\uffea\057\uffea\001\002\000\040\011\017\015" +
    "\065\030\025\037\027\045\020\046\036\047\042\050\062" +
    "\051\057\052\014\053\066\054\052\055\060\064\043\070" +
    "\037\001\002\000\062\002\uffbd\005\uffbd\007\126\010\uffbd" +
    "\012\uffbd\013\uffbd\014\uffbd\016\uffbd\017\uffbd\020\uffbd\021" +
    "\uffbd\022\uffbd\024\uffbd\025\uffbd\026\115\027\122\030\uffbd" +
    "\032\uffbd\034\uffbd\035\uffbd\036\uffbd\041\uffbd\042\uffbd\057" +
    "\uffbd\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0161\000\010\003\003\004\006\005\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\066" +
    "\006\062\007\060\010\025\011\010\015\063\016\022\031" +
    "\030\033\054\036\040\040\014\041\055\042\011\043\032" +
    "\044\007\045\044\047\053\050\043\051\033\054\021\066" +
    "\027\067\052\071\046\072\045\075\023\077\034\112\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\050\026\361\033\364\040\076\041\070\042\011\043" +
    "\032\045\044\047\075\050\072\051\074\054\021\062\u0144" +
    "\064\357\066\027\067\052\070\363\071\046\072\045\112" +
    "\020\001\001\000\040\033\u0141\040\076\041\070\042\011" +
    "\043\032\045\044\047\075\050\072\051\074\054\021\066" +
    "\027\067\052\071\046\072\045\112\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\033\u0140\040\076\041\070" +
    "\042\011\043\032\045\044\047\075\050\072\051\074\054" +
    "\021\066\027\067\052\071\046\072\045\112\020\001\001" +
    "\000\002\001\001\000\040\033\u013f\040\076\041\070\042" +
    "\011\043\032\045\044\047\075\050\072\051\074\054\021" +
    "\066\027\067\052\071\046\072\045\112\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\012\310\013\307\014\313\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\022\243\023\237\024\240\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\033\214\040\076\041\070\042\011" +
    "\043\032\045\044\047\075\050\072\051\074\054\021\066" +
    "\027\067\052\071\046\072\045\112\020\001\001\000\006" +
    "\003\210\004\211\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\033\202\040\076\041\070" +
    "\042\011\043\032\045\044\047\075\050\072\051\074\052" +
    "\203\053\073\054\021\066\027\067\052\071\046\072\045" +
    "\112\020\001\001\000\002\001\001\000\044\033\067\040" +
    "\076\041\070\042\011\043\032\045\044\047\075\050\072" +
    "\051\074\052\071\053\073\054\021\066\027\067\052\071" +
    "\046\072\045\112\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\033\104\040\076\041\070\042\011\043\032\045" +
    "\044\047\075\050\072\051\074\054\021\066\027\067\052" +
    "\071\046\072\045\112\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\033\175\040\076\041\070\042\011\043" +
    "\032\045\044\047\075\050\072\051\074\054\021\066\027" +
    "\067\052\071\046\072\045\112\020\001\001\000\040\033" +
    "\174\040\076\041\070\042\011\043\032\045\044\047\075" +
    "\050\072\051\074\054\021\066\027\067\052\071\046\072" +
    "\045\112\020\001\001\000\040\033\173\040\076\041\070" +
    "\042\011\043\032\045\044\047\075\050\072\051\074\054" +
    "\021\066\027\067\052\071\046\072\045\112\020\001\001" +
    "\000\040\033\172\040\076\041\070\042\011\043\032\045" +
    "\044\047\075\050\072\051\074\054\021\066\027\067\052" +
    "\071\046\072\045\112\020\001\001\000\040\033\171\040" +
    "\076\041\070\042\011\043\032\045\044\047\075\050\072" +
    "\051\074\054\021\066\027\067\052\071\046\072\045\112" +
    "\020\001\001\000\040\033\170\040\076\041\070\042\011" +
    "\043\032\045\044\047\075\050\072\051\074\054\021\066" +
    "\027\067\052\071\046\072\045\112\020\001\001\000\040" +
    "\033\167\040\076\041\070\042\011\043\032\045\044\047" +
    "\075\050\072\051\074\054\021\066\027\067\052\071\046" +
    "\072\045\112\020\001\001\000\040\033\166\040\076\041" +
    "\070\042\011\043\032\045\044\047\075\050\072\051\074" +
    "\054\021\066\027\067\052\071\046\072\045\112\020\001" +
    "\001\000\040\033\165\040\076\041\070\042\011\043\032" +
    "\045\044\047\075\050\072\051\074\054\021\066\027\067" +
    "\052\071\046\072\045\112\020\001\001\000\002\001\001" +
    "\000\040\033\163\040\076\041\070\042\011\043\032\045" +
    "\044\047\075\050\072\051\074\054\021\066\027\067\052" +
    "\071\046\072\045\112\020\001\001\000\040\033\162\040" +
    "\076\041\070\042\011\043\032\045\044\047\075\050\072" +
    "\051\074\054\021\066\027\067\052\071\046\072\045\112" +
    "\020\001\001\000\040\033\161\040\076\041\070\042\011" +
    "\043\032\045\044\047\075\050\072\051\074\054\021\066" +
    "\027\067\052\071\046\072\045\112\020\001\001\000\040" +
    "\033\160\040\076\041\070\042\011\043\032\045\044\047" +
    "\075\050\072\051\074\054\021\066\027\067\052\071\046" +
    "\072\045\112\020\001\001\000\006\047\150\107\146\001" +
    "\001\000\040\033\144\040\076\041\070\042\011\043\032" +
    "\045\044\047\075\050\072\051\074\054\021\066\027\067" +
    "\052\071\046\072\045\112\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\033\067\040\076\041\070\042" +
    "\011\043\032\045\044\047\075\050\072\051\074\052\130" +
    "\053\073\054\021\066\027\067\052\071\046\072\045\112" +
    "\020\001\001\000\002\001\001\000\004\076\133\001\001" +
    "\000\006\035\134\037\135\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\033\140\040\076\041\070\042\011\043\032\045\044\047" +
    "\075\050\072\051\074\054\021\066\027\067\052\071\046" +
    "\072\045\112\020\001\001\000\002\001\001\000\004\037" +
    "\143\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\033\152\040\076\041\070" +
    "\042\011\043\032\045\044\047\075\050\072\051\074\054" +
    "\021\066\027\067\052\071\046\072\045\110\154\111\153" +
    "\112\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\033\157\040\076" +
    "\041\070\042\011\043\032\045\044\047\075\050\072\051" +
    "\074\054\021\066\027\067\052\071\046\072\045\112\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\033" +
    "\177\040\076\041\070\042\011\043\032\045\044\047\075" +
    "\050\072\051\074\054\021\066\027\067\052\071\046\072" +
    "\045\112\020\001\001\000\002\001\001\000\004\076\201" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\033\206\040\076\041\070" +
    "\042\011\043\032\045\044\047\075\050\072\051\074\054" +
    "\021\066\027\067\052\071\046\072\045\112\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\062\010\212\011" +
    "\010\015\063\016\022\031\030\033\054\036\040\040\014" +
    "\041\055\042\011\043\032\044\007\045\044\047\053\050" +
    "\043\051\033\054\021\066\027\067\052\071\046\072\045" +
    "\075\023\077\034\112\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\054\216\001\001\000\002\001\001\000\006\003\003\004" +
    "\220\001\001\000\004\073\221\001\001\000\006\003\003" +
    "\004\226\001\001\000\002\001\001\000\040\033\224\040" +
    "\076\041\070\042\011\043\032\045\044\047\075\050\072" +
    "\051\074\054\021\066\027\067\052\071\046\072\045\112" +
    "\020\001\001\000\002\001\001\000\006\003\003\004\230" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\033\233\040\076\041\070" +
    "\042\011\043\032\045\044\047\075\050\072\051\074\054" +
    "\021\066\027\067\052\071\046\072\045\112\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\022\244\023\237\024\240\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\017\252\020\253\021\251\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\255\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\261\001\001" +
    "\000\004\076\262\001\001\000\002\001\001\000\010\017" +
    "\264\020\253\021\251\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\267\001\001\000\004\076\270\001" +
    "\001\000\002\001\001\000\004\024\272\001\001\000\002" +
    "\001\001\000\004\025\274\001\001\000\002\001\001\000" +
    "\010\017\276\020\253\021\251\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\017\301\020\253\021\251\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\314\013\307\014\313\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\033\317\040\076" +
    "\041\070\042\011\043\032\045\044\047\075\050\072\051" +
    "\074\054\021\066\027\067\052\071\046\072\045\112\020" +
    "\001\001\000\002\001\001\000\010\003\003\004\321\027" +
    "\322\001\001\000\054\030\330\031\325\032\326\033\054" +
    "\036\040\040\014\041\055\042\011\043\032\044\007\045" +
    "\044\046\324\047\053\050\043\051\033\054\021\066\027" +
    "\067\052\071\046\072\045\112\020\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\033\334\040\076\041\070\042" +
    "\011\043\032\045\044\047\075\050\072\051\074\054\021" +
    "\066\027\067\052\071\046\072\045\112\020\001\001\000" +
    "\006\003\331\004\332\001\001\000\052\031\325\032\333" +
    "\033\054\036\040\040\014\041\055\042\011\043\032\044" +
    "\007\045\044\046\324\047\053\050\043\051\033\054\021" +
    "\066\027\067\052\071\046\072\045\112\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\033\336\040\076\041\070\042\011\043\032\045\044\047" +
    "\075\050\072\051\074\054\021\066\027\067\052\071\046" +
    "\072\045\112\020\001\001\000\002\001\001\000\040\033" +
    "\340\040\076\041\070\042\011\043\032\045\044\047\075" +
    "\050\072\051\074\054\021\066\027\067\052\071\046\072" +
    "\045\112\020\001\001\000\002\001\001\000\010\003\003" +
    "\004\321\027\342\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\345\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\012\350\013\307\014\313\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\003\004\353" +
    "\055\354\001\001\000\060\026\361\033\364\040\076\041" +
    "\070\042\011\043\032\045\044\047\075\050\072\051\074" +
    "\054\021\056\360\057\367\062\370\063\356\064\357\066" +
    "\027\067\052\070\363\071\046\072\045\074\366\112\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\u011f\004\u0120\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\065\u0101\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\033\067\040\076\041\070\042\011\043\032\045\044\047" +
    "\075\050\072\051\074\052\376\053\073\054\021\066\027" +
    "\067\052\071\046\072\045\112\020\001\001\000\002\001" +
    "\001\000\004\076\u0100\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\033\u0103\040\076\041\070\042\011\043" +
    "\032\045\044\047\075\050\072\051\074\054\021\066\027" +
    "\067\052\071\046\072\045\112\020\001\001\000\002\001" +
    "\001\000\010\003\003\004\321\027\u0105\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\033" +
    "\067\040\076\041\070\042\011\043\032\045\044\047\075" +
    "\050\072\051\074\052\u0109\053\073\054\021\066\027\067" +
    "\052\071\046\072\045\112\020\001\001\000\002\001\001" +
    "\000\004\076\u010b\001\001\000\002\001\001\000\044\033" +
    "\067\040\076\041\070\042\011\043\032\045\044\047\075" +
    "\050\072\051\074\052\u010d\053\073\054\021\066\027\067" +
    "\052\071\046\072\045\112\020\001\001\000\002\001\001" +
    "\000\004\074\u010f\001\001\000\004\065\u0111\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\003\004\321" +
    "\027\u0113\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\041\u0118\054\u0119\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\033" +
    "\054\040\076\041\070\042\011\043\032\045\044\047\075" +
    "\050\072\051\074\054\021\066\u011b\067\052\071\046\072" +
    "\045\112\020\001\001\000\002\001\001\000\040\033\054" +
    "\040\076\041\070\042\011\043\032\045\044\047\075\050" +
    "\072\051\074\054\021\066\u011d\067\052\071\046\072\045" +
    "\112\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\026\361\033\364\040\076\041\070\042\011\043\032" +
    "\045\044\047\075\050\072\051\074\054\021\057\u0121\062" +
    "\370\063\356\064\357\066\027\067\052\070\363\071\046" +
    "\072\045\074\366\112\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\003\004\321\027\u0123\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\100\u0128\101\u0129\001\001\000\002\001\001\000\006" +
    "\003\003\004\u013b\001\001\000\002\001\001\000\010\104" +
    "\u012b\105\u012e\106\u012d\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\106" +
    "\u0130\001\001\000\002\001\001\000\010\101\u0135\102\u0133" +
    "\103\u0134\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\104\u0138\105\u012e\106\u012d\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\101\u013e\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\003\004\u0147\060\u0146\001\001\000\002\001\001\000\052" +
    "\026\361\033\364\040\076\041\070\042\011\043\032\045" +
    "\044\047\075\050\072\051\074\054\021\061\u0149\062\u0148" +
    "\064\357\066\027\067\052\070\363\071\046\072\045\112" +
    "\020\001\001\000\002\001\001\000\006\003\u014a\004\u014b" +
    "\001\001\000\050\026\361\033\364\040\076\041\070\042" +
    "\011\043\032\045\044\047\075\050\072\051\074\054\021" +
    "\062\u014c\064\357\066\027\067\052\070\363\071\046\072" +
    "\045\112\020\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\003\004" +
    "\321\027\u0150\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\003\004" +
    "\321\027\u0155\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\033\u0158\040\076\041\070\042\011\043\032\045" +
    "\044\047\075\050\072\051\074\054\021\066\027\067\052" +
    "\071\046\072\045\112\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\012\u015b\013\307\014\313\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\003\004" +
    "\321\027\u015e\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\033\u0161\040\076\041\070\042\011\043\032\045" +
    "\044\047\075\050\072\051\074\054\021\066\027\067\052" +
    "\071\046\072\045\112\020\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$IniParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$IniParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$IniParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	public Types types;
	public PrintStream out = System.out;
	public PrintStream err = System.err;
	private int userTypeIndex = 1;

	public int nextUserTypeIndex() {
		return userTypeIndex++;
	}

	//public Map<String,Executable> parsedFunctionMap=new HashMap<String,Executable>();
	//public List<Executable> parsedFunctionList=new ArrayList<Executable>();
	//public List<Binding> parsedBindingList=new ArrayList<Binding>();
	//public List<AtBinding> parsedAtBindingList=new ArrayList<AtBinding>();
	//public List<Import> parsedImportList=new ArrayList<Import>();
	//public List<AstNode> parsedAst =  new ArrayList<AstNode>();
	public List<AstNode> topLevels =  new ArrayList<AstNode>();

	public IniEnv env;
	public List<Executable> builtInExecutables;

	private List<Executable> createBuiltInExecutables() {
		return Arrays.asList( //
			new ClearFunction(this), //
			new CopyFunction(this), //
			new ErrorFunction(this), //
			new FirstFunction(this), //
			new KeyFunction(this), //
			new KillAt(this), //
			new PrintFunction(this), //
			new PrintlnFunction(this), //
			new ProduceFunction(this), //
			new ReadKeyboardFunction(this), //
			new RestFunction(this), //
			new SizeFunction(this), //
			new SleepFunction(this), //
			new SwapFunction(this), //
			new TimeFunction(this), //
			new ToIntFunction(this), //
			new ToJsonFunction(this), //
			new ToLongFunction(this), //
			new ToByteFunction(this), //
			new ToCharFunction(this), //
			new ToFloatFunction(this), //
			new ToDoubleFunction(this), //
			new ToStringFunction(this), //
			new WaitFunction(this), //
			// ========================
			// will be removed from default builtins and accessed through bindings
			new StartWebServiceFunction(this), //
			new StopWebServiceFunction(this)
		);
	}
	
	public static IniParser createParserForFile(IniEnv env, IniParser parent, String fileName) throws java.io.FileNotFoundException {
      IniScanner scanner= new IniScanner(new java.io.FileReader(fileName));
      scanner.setFileName(fileName);
      IniParser parser= new IniParser(scanner);
      if(env==null) {
      	env = new IniEnv();
      }
      parser.env = env;
      if(parent != null) {
	      parser.types = parent.types;
	      parser.builtInExecutables = parser.builtInExecutables;
	  } else {
	      parser.types = new Types(parser);
	      parser.builtInExecutables = parser.createBuiltInExecutables();
	  }
      return parser;
	}

	public static IniParser createParserForCode(IniEnv env, IniParser parent, String code) throws Exception {
      IniScanner scanner= new IniScanner(new java.io.StringReader(code));
      scanner.setFileName("<none>");
      IniParser parser= new IniParser(scanner);
      if(env==null) {
      	env = new IniEnv();
      }
      parser.env = env;
      if(parent != null) {
	      parser.types = parent.types;
	      parser.builtInExecutables = parser.builtInExecutables;
	  } else {
	      parser.types = new Types(parser);
	      parser.builtInExecutables = parser.createBuiltInExecutables();
	  }
      return parser;
	}

	public List<SyntaxError> errors = new ArrayList<SyntaxError>();
	
  public void syntax_error(java_cup.runtime.Symbol current) {
    //errors.add(new SyntaxError("syntax error: '"+current.value + "' is not expected", at " + (current.left+1)+"("+(current.right+1)+")" );
    errors.add(new SyntaxError((Token)current.value, "'"+current.value + "' is not expected"));
  }
  
  	public void printErrors(PrintStream out) {
		for (SyntaxError error : errors) {
			out.println(error.toString());
		}
	}

	public boolean hasErrors() {
		return !errors.isEmpty();
	}
  
  
  

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$IniParser$actions {
  private final IniParser parser;

  /** Constructor */
  CUP$IniParser$actions(IniParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$IniParser$do_action(
    int                        CUP$IniParser$act_num,
    java_cup.runtime.lr_parser CUP$IniParser$parser,
    java.util.Stack            CUP$IniParser$stack,
    int                        CUP$IniParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$IniParser$result;

      /* select the action based on the action number */
      switch (CUP$IniParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // field ::= IDENTIFIER COL list_constructor 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = new Field(parser,(Token)i,i.toString(),(Constructor)c);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(68/*field*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // field_list ::= field 
            {
              Object RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List l=new ArrayList();
		l.add(f);
		RESULT=l;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(67/*field_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // field_list ::= field_list COMMA field 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=(List)l;
		list.add(f);
		RESULT=list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(67/*field_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // field_list_opt ::= 
            {
              Object RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(66/*field_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // field_list_opt ::= field_list 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = l; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(66/*field_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // list_constructor ::= list_constructor MULT 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 
		RESULT = new Constructor(parser,(Token)m,(Constructor)c);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(64/*list_constructor*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // list_constructor ::= constructor_or_type 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = c; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(64/*list_constructor*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // constructor_or_type ::= TIDENTIFIER 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = new Constructor(parser,(Token)i,i.toString(),null);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(65/*constructor_or_type*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // constructor_or_type ::= constructor 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = c;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(65/*constructor_or_type*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // constructor ::= LSPAREN field_list_opt RSPAREN 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
		RESULT = new Constructor(parser,(Token)i,null,(List)l);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(63/*constructor*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // constructor ::= TIDENTIFIER LSPAREN field_list_opt RSPAREN 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
		RESULT = new Constructor(parser,(Token)i,i.toString(),(List)l);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(63/*constructor*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // constructor_list ::= constructor 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=new ArrayList();
		list.add(c);
		RESULT=list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(62/*constructor_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // constructor_list ::= constructor_list lf_opt TUBE constructor 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=(List)l;
		list.add(c);
		RESULT=list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(62/*constructor_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // usertype ::= TYPE TIDENTIFIER ASSIGN constructor_list lf_opt END 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		
		UserType type = new UserType(parser,(Token)t,i.toString(),(List)l);
		// parser.parsedTypes.add(type);
		RESULT = type;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(61/*usertype*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // set_logical_expr ::= var_list OF set_var_access TUBE logical_expr 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int ofleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int ofright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object of = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = new SetExpression(parser,(Token)of,(List)l,(Expression)s,(Expression)e);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(54/*set_logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // set_logical_expr ::= var_list OF list_expr TUBE logical_expr 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int ofleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int ofright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object of = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = new SetExpression(parser,(Token)of,(List)l,(Expression)s,(Expression)e);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(54/*set_logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // guard ::= set_logical_expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(50/*guard*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // guard ::= expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(50/*guard*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // ret_statement ::= RETURN 
            {
              Object RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = new ReturnStatement(parser,(Token)r,null); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(36/*ret_statement*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // ret_statement ::= RETURN expr 
            {
              Object RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = new ReturnStatement(parser,(Token)r,(Expression)e); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(36/*ret_statement*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // boolean_expr_opt ::= 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(51/*boolean_expr_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // boolean_expr_opt ::= ANDAND expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(51/*boolean_expr_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // basic_rule ::= guard LCPAREN statement_list_opt RCPAREN 
            {
              Object RESULT = null;
		int gleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
		RESULT = new Rule(parser,((AstNode)g).token(),null,(Expression)g,(Sequence)l, null);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(48/*basic_rule*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // event_rule ::= DOLLAR LPAREN arg_list_opt RPAREN at_expr boolean_expr_opt LCPAREN statement_list_opt RCPAREN 
            {
              Object RESULT = null;
		int elleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).value;
		int atleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object at = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
		RESULT = new Rule(parser,((AstNode)at).token(),(AtPredicate)at,(Expression)g,(Sequence)l, (List)el);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(49/*event_rule*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // event_rule ::= at_expr boolean_expr_opt LCPAREN statement_list_opt RCPAREN 
            {
              Object RESULT = null;
		int atleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object at = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
		RESULT = new Rule(parser,((AstNode)at).token(),(AtPredicate)at,(Expression)g,(Sequence)l, null);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(49/*event_rule*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // rule ::= basic_rule 
            {
              Object RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=r; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(45/*rule*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // rule ::= event_rule 
            {
              Object RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=r; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(45/*rule*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // identifier_assignment_list ::= identifier_assignment 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=new ArrayList();
		list.add(e);
		RESULT=list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(27/*identifier_assignment_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // identifier_assignment_list ::= identifier_assignment_list COMMA identifier_assignment 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=(List)l;
		list.add(e);
		RESULT=list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(27/*identifier_assignment_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // identifier_assignment_list_opt ::= 
            {
              Object RESULT = null;
		 RESULT=new ArrayList(); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(26/*identifier_assignment_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // identifier_assignment_list_opt ::= identifier_assignment_list 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=l; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(26/*identifier_assignment_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // arg_list ::= expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=new ArrayList();
		list.add(e);
		RESULT=list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(41/*arg_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // arg_list ::= arg_list COMMA expr 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=(List)l;
		list.add(e);
		RESULT=list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(41/*arg_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // arg_list_opt ::= 
            {
              Object RESULT = null;
		 RESULT=new ArrayList(); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(40/*arg_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // arg_list_opt ::= arg_list 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=l; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(40/*arg_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // dot_invocation ::= expr INVDOT IDENTIFIER LPAREN arg_list_opt RPAREN annotations_opt 
            {
              Object RESULT = null;
		int targetleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).left;
		int targetright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).right;
		Object target = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List args = (List)l;
		args.add(0, target);
		Invocation inv = new Invocation(parser,(Token)i,i.toString(),args);
		inv.annotations = (List)a;
		RESULT = inv;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(38/*dot_invocation*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // invocation ::= IDENTIFIER LPAREN arg_list_opt RPAREN annotations_opt 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		Invocation inv = new Invocation(parser,(Token)i,i.toString(),(List)l);
		inv.annotations = (List)a;
		RESULT = inv;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(37/*invocation*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // pre_post_op ::= var_access MINUSMINUS 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new UnaryOperator(parser,(Token)op,UnaryOperator.Kind.POST_DEC,(Expression)e); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(39/*pre_post_op*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // pre_post_op ::= var_access PLUSPLUS 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new UnaryOperator(parser,(Token)op,UnaryOperator.Kind.POST_INC,(Expression)e); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(39/*pre_post_op*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // at_expr ::= AT IDENTIFIER LPAREN arg_list_opt RPAREN annotations_opt 
            {
              Object RESULT = null;
		int atleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).right;
		Object at = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 
	RESULT = new AtPredicate(parser,(Token)at,name.toString(),(List)a,(List)rp, null);

              CUP$IniParser$result = new java_cup.runtime.Symbol(58/*at_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // at_expr ::= IDENTIFIER COL AT IDENTIFIER LPAREN arg_list_opt RPAREN annotations_opt 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).value;
		int atleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).right;
		Object at = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 
	RESULT = new AtPredicate(parser,(Token)at,name.toString(),(List)a,(List)rp, id.toString());

              CUP$IniParser$result = new java_cup.runtime.Symbol(58/*at_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // annotations_opt ::= 
            {
              Object RESULT = null;
		
	RESULT = (List)null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(60/*annotations_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // annotations_opt ::= LSPAREN identifier_assignment_list RSPAREN 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
	RESULT = (List)l;

              CUP$IniParser$result = new java_cup.runtime.Symbol(60/*annotations_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // field_match_expr_list ::= expr 
            {
              Object RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List l=new ArrayList();
		l.add(f);
		RESULT=l;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(71/*field_match_expr_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // field_match_expr_list ::= field_match_expr_list COMMA expr 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=(List)l;
		list.add(f);
		RESULT=list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(71/*field_match_expr_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // field_match_expr_list_opt ::= 
            {
              Object RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(70/*field_match_expr_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // field_match_expr_list_opt ::= field_match_expr_list 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = l; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(70/*field_match_expr_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // case_expr ::= CASE basic_rule ELSE LCPAREN statement_list_opt RCPAREN 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
		RESULT = new CaseStatement(parser,(Token)c,(List<Rule>)(List)Arrays.asList(r),(Sequence)s); 
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(34/*case_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // case_expr ::= CASE basic_rule 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = new CaseStatement(parser,(Token)c,(List<Rule>)(List)Arrays.asList(r),null); 
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(34/*case_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // case_expr ::= CASE LCPAREN basic_rule_list_opt RCPAREN 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
		RESULT = new CaseStatement(parser,(Token)c, (List)l,null); 
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(34/*case_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // case_expr ::= CASE LCPAREN basic_rule_list_opt DEFAULT LCPAREN statement_list_opt RCPAREN RCPAREN 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		
		RESULT = new CaseStatement(parser,(Token)c, (List)l,(Sequence)s); 
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(34/*case_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // logical_expr ::= expr MATCHES constructor_match_expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.MATCHES,(Expression)e1,(ConstructorMatchExpression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(52/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // logical_expr ::= expr MATCHES invocation 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.MATCHES,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(52/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // logical_expr ::= expr GTE expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.GTE,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(52/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // logical_expr ::= expr GT expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.GT,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(52/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // logical_expr ::= expr LTE expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.LTE,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(52/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // logical_expr ::= expr LT expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.LT,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(52/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // logical_expr ::= expr NOTEQUALS expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.NOTEQUALS,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(52/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // logical_expr ::= expr EQUALS expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.EQUALS,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(52/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // logical_expr ::= QUESTION expr 
            {
              Object RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new UnaryOperator(parser,(Token)op,UnaryOperator.Kind.OPT,(Expression)e); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(52/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // logical_expr ::= NOT expr 
            {
              Object RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new UnaryOperator(parser,(Token)op,UnaryOperator.Kind.NOT,(Expression)e); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(52/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // logical_expr ::= expr OROR expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.OR,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(52/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // logical_expr ::= expr ANDAND expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.AND,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(52/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // logical_expr ::= boolean_literal 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(52/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // algebraic_expr ::= expr DIV expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.DIV,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(53/*algebraic_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // algebraic_expr ::= expr MULT expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.MULT,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(53/*algebraic_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // algebraic_expr ::= MINUS expr 
            {
              Object RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new UnaryOperator(parser,(Token)op,UnaryOperator.Kind.MINUS,(Expression)e); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(53/*algebraic_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // algebraic_expr ::= expr MINUS expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.MINUS,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(53/*algebraic_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // algebraic_expr ::= expr PLUS expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.PLUS,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(53/*algebraic_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // algebraic_expr ::= pre_post_op 
            {
              Object RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=op; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(53/*algebraic_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // algebraic_expr ::= INT 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new NumberLiteral(parser,(Token)e,Integer.parseInt(e.toString())); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(53/*algebraic_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // algebraic_expr ::= NUM 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new NumberLiteral(parser,(Token)e,Double.parseDouble(e.toString())); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(53/*algebraic_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // list_concat_expr ::= expr AND expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.CONCAT,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(72/*list_concat_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // lambda_expr ::= LAMBDA param_list_opt IMPLIES expr 
            {
              Object RESULT = null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int defleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object def = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		Function f = new Function(parser, (Token)def, null, (List)vars, new Sequence(s));	
		f.oneExpressionLambda = true;
		RESULT = f;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(35/*lambda_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // lambda_expr ::= LAMBDA LPAREN param_list_opt RPAREN IMPLIES expr 
            {
              Object RESULT = null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int defleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object def = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		Function f = new Function(parser, (Token)def, null, (List)vars, new Sequence(s));
		f.oneExpressionLambda = true;
		RESULT = f;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(35/*lambda_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // lambda_expr ::= LAMBDA param_list_opt IMPLIES LCPAREN statement_list_opt RCPAREN 
            {
              Object RESULT = null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int defleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object def = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object statements = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
		RESULT = new Function(parser, (Token)def, null, (List)vars, (Sequence)statements);	
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(35/*lambda_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // lambda_expr ::= LAMBDA LPAREN param_list_opt RPAREN IMPLIES LCPAREN statement_list_opt RCPAREN 
            {
              Object RESULT = null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).value;
		int defleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object def = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object statements = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
		RESULT = new Function(parser, (Token)def, null, (List)vars, (Sequence)statements);	
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(35/*lambda_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expr ::= LPAREN expr RPAREN 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(25/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expr ::= lambda_expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(25/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expr ::= list_concat_expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(25/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expr ::= set_var_access 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(25/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expr ::= constructor_expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(25/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expr ::= list_expr 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=l; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(25/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expr ::= string_expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(25/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expr ::= logical_expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(25/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expr ::= algebraic_expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(25/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expr ::= CHAR 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = new CharLiteral(parser,(Token)c,c.toString().charAt(0)); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(25/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expr ::= dot_invocation 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(25/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expr ::= invocation 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(25/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expr ::= THIS 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = new ThisLiteral(parser,(Token)t); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(25/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expr ::= var_access 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(25/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // statement ::= ret_statement 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(24/*statement*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // statement ::= top_level_statement 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(24/*statement*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // top_level_statement ::= case_expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(23/*top_level_statement*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // top_level_statement ::= dot_invocation 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(23/*top_level_statement*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // top_level_statement ::= invocation 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(23/*top_level_statement*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // top_level_statement ::= assignment_expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(23/*top_level_statement*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // top_level_statement ::= pre_post_op 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(23/*top_level_statement*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // assignment_list ::= IDENTIFIER ASSIGN expr 
            {
              Object RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=new ArrayList();
		list.add(new Assignment(parser,(Token)f,new Variable(parser,(Token)f,f.toString()),(Expression)e));
		RESULT=list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(57/*assignment_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // assignment_list ::= assignment_list COMMA lf_opt IDENTIFIER ASSIGN expr 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=(List)l;
		list.add(new Assignment(parser,(Token)f,new Variable(parser,(Token)f,f.toString()),(Expression)e));
		RESULT=list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(57/*assignment_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // constructor_match_expr ::= TIDENTIFIER 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = new ConstructorMatchExpression(parser,(Token)s,s.toString(),null);	
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(69/*constructor_match_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // constructor_match_expr ::= TIDENTIFIER LSPAREN field_match_expr_list_opt RSPAREN 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
		RESULT = new ConstructorMatchExpression(parser,(Token)s,s.toString(),(List)l);	
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(69/*constructor_match_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // constructor_expr ::= TIDENTIFIER LSPAREN lf_opt assignment_list lf_opt RSPAREN 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		
		RESULT = new SetConstructor(parser,(Token)s,s.toString(),(List)l);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(56/*constructor_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // list_expr ::= LSPAREN arg_list_opt RSPAREN 
            {
              Object RESULT = null;
		int openleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int openright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object open = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int closeleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int closeright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object close = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = new ListExpression(parser,(Token)open,(List)l);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(42/*list_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // list_expr ::= LSPAREN expr DOTDOT expr RSPAREN 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int lbleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object lb = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int ubleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int ubright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object ub = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = new SetDeclaration(parser,(Token)l,(Expression)lb,(Expression)ub);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(42/*list_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // single_string ::= STRING 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new StringLiteral(parser,(Token)s,s.toString()); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(32/*single_string*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // string_expr ::= single_string PLUS expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.PLUS,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(33/*string_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // string_expr ::= single_string 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=s; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(33/*string_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // var_access ::= var_access DOT IDENTIFIER 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = new FieldAccess(parser,(Token)t,(VariableAccess)v,i.toString()); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(30/*var_access*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // var_access ::= var_access LSPAREN expr DOTDOT expr RSPAREN 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int minleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int minright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object min = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int maxleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int maxright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object max = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		 RESULT = new SubArrayAccess(parser,(Token)t,(VariableAccess)v,(Expression)min,(Expression)max); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(30/*var_access*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // var_access ::= var_access LSPAREN expr RSPAREN 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		 RESULT = new ArrayAccess(parser,(Token)t,(VariableAccess)v,(Expression)e); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(30/*var_access*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // var_access ::= IDENTIFIER 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = new Variable(parser,(Token)v,v.toString()); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(30/*var_access*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // boolean_literal ::= FALSE 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BooleanLiteral(parser,(Token)e,false); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(55/*boolean_literal*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // boolean_literal ::= TRUE 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BooleanLiteral(parser,(Token)e,true); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(55/*boolean_literal*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // set_var_access ::= TIDENTIFIER 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = new Variable(parser,(Token)v,v.toString()); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(31/*set_var_access*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // identifier_assignment ::= IDENTIFIER ASSIGN expr 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 
		RESULT = new Assignment(parser,(Token)a,new Variable(parser,(Token)v,v.toString()),(Expression)e);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(29/*identifier_assignment*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // assignment_expr ::= set_var_access ASSIGN list_expr 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 
		RESULT = new Assignment(parser,(Token)a,(VariableAccess)v,(Expression)e);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(28/*assignment_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // assignment_expr ::= var_access ASSIGN expr 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = new Assignment(parser,(Token)a,(VariableAccess)v,(Expression)e);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(28/*assignment_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // type_decl ::= TIDENTIFIER LT TIDENTIFIER 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 
		TypeVariable tv = new TypeVariable(parser,(Token)i,i.toString(), true);
		TypeVariable sv = new TypeVariable(parser,(Token)s,s.toString());
		tv.superType = sv;
		RESULT = tv;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(18/*type_decl*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // type_decl ::= TIDENTIFIER 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = new TypeVariable(parser,(Token)i,i.toString(), true); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(18/*type_decl*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // type_decl_list ::= type_decl 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List l=new ArrayList();
		l.add(t);
		RESULT=l;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(17/*type_decl_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // type_decl_list ::= type_decl_list COMMA type_decl 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=(List)l;
		list.add(t);
		RESULT=list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(17/*type_decl_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // type_decl_list_opt ::= 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(16/*type_decl_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // type_decl_list_opt ::= type_decl_list 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = l; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(16/*type_decl_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // type ::= type MULT 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		 RESULT = new TypeVariable(parser,((TypeVariable)t).token,(TypeVariable)t); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(15/*type*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // type ::= TIDENTIFIER 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = new TypeVariable(parser,(Token)i,i.toString()); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(15/*type*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // type_list ::= type 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List l=new ArrayList();
		l.add(t);
		RESULT=l;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(14/*type_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // type_list ::= type_list COMMA type 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=(List)l;
		list.add(t);
		RESULT=list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(14/*type_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // type_list_opt ::= 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(13/*type_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // type_list_opt ::= type_list 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = l; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(13/*type_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // var_list ::= IDENTIFIER 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List l=new ArrayList();
		l.add(new Variable(parser,(Token)i,i.toString()));
		RESULT=l;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(20/*var_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // var_list ::= var_list COMMA IDENTIFIER 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=(List)l;
		list.add(new Variable(parser,(Token)i,i.toString()));
		RESULT=list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(20/*var_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // basic_rule_list ::= basic_rule 
            {
              Object RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List l=new ArrayList();
		l.add(r);
		RESULT=l;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(47/*basic_rule_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // basic_rule_list ::= basic_rule_list lf basic_rule 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=(List)l;
		list.add(r);
		RESULT = list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(47/*basic_rule_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // basic_rule_list_opt ::= lf_opt 
            {
              Object RESULT = null;
		 RESULT=new ArrayList(); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(46/*basic_rule_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // basic_rule_list_opt ::= lf_opt basic_rule_list lf_opt 
            {
              Object RESULT = null;
		int rlleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int rlright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object rl = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		 RESULT=rl; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(46/*basic_rule_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // rule_list ::= rule 
            {
              Object RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List l=new ArrayList();
		l.add(r);
		RESULT=l;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(44/*rule_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // rule_list ::= rule_list lf rule 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=(List)l;
		list.add(r);
		RESULT = list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(44/*rule_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // rule_list_opt ::= lf_opt 
            {
              Object RESULT = null;
		 RESULT=new ArrayList(); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(43/*rule_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // rule_list_opt ::= lf_opt rule_list lf_opt 
            {
              Object RESULT = null;
		int rlleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int rlright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object rl = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		 RESULT=rl; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(43/*rule_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement_list ::= statement 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		Sequence seq=new Sequence(s);
		RESULT=seq;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(22/*statement_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement_list ::= statement_list lf statement 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		Sequence seq=(Sequence)l;
		seq.last().setNext(s);
		RESULT = seq;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(22/*statement_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement_list_opt ::= lf_opt 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(21/*statement_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement_list_opt ::= lf_opt statement_list lf_opt 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		 RESULT=l; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(21/*statement_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // param ::= IDENTIFIER 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = new Parameter(parser,(Token)i,i.toString());
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(10/*param*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // param ::= IDENTIFIER ASSIGN expr 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = new Parameter(parser,(Token)i,i.toString(),(Expression)e);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(10/*param*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // param_list ::= param 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List l=new ArrayList();
		l.add(p);
		RESULT=l;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(9/*param_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // param_list ::= param_list COMMA param 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=(List)l;
		list.add(p);
		RESULT=list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(9/*param_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // param_list_opt ::= 
            {
              Object RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(8/*param_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // param_list_opt ::= param_list 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = l; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(8/*param_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // function ::= PROCESS IDENTIFIER LPAREN param_list_opt RPAREN LCPAREN rule_list_opt RCPAREN 
            {
              Object RESULT = null;
		int defleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).right;
		Object def = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int rulesleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int rulesright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object rules = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
		Process p = new Process(parser, (Token)def, name.toString(), (List)vars, (List)rules);
		RESULT = p;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(7/*function*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // function ::= FUNCTION IDENTIFIER LPAREN param_list_opt RPAREN LCPAREN statement_list_opt RCPAREN 
            {
              Object RESULT = null;
		int defleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).right;
		Object def = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object statements = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
		Function f = new Function(parser, (Token)def, name.toString(), (List)vars, (Sequence)statements);
		RESULT = f;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(7/*function*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // at_binding ::= DECLARE AT IDENTIFIER at_binding_conf_type LPAREN type_list_opt RPAREN IMPLIES STRING 
            {
              Object RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-8)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-8)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-8)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).value;
		int ctleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left;
		int ctright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).right;
		Object ct = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).value;
		int ftleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int ftright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object ft = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int rtleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object rt = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object className = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		AtBinding b = new AtBinding(parser, (Token)d, name.toString(), (List)ct, (List) rt, className.toString());
		//parser.parsedAtBindingList.add(b);
		RESULT = b;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(59/*at_binding*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // at_binding_conf_type ::= LSPAREN type_list_opt RSPAREN 
            {
              Object RESULT = null;
		int ctleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int ctright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object ct = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
	RESULT = ct;

              CUP$IniParser$result = new java_cup.runtime.Symbol(19/*at_binding_conf_type*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // at_binding_conf_type ::= 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(19/*at_binding_conf_type*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // binding ::= DECLARE type_decl_list_opt 
            {
              Object RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int typedeclsleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int typedeclsright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object typedecls = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		Binding b = new Binding(parser, (Token)d, (String)null, (List)typedecls, (List)null, (TypeVariable)null, (List)null);
		RESULT = b;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(12/*binding*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // binding ::= DECLARE LPAREN type_decl_list_opt RPAREN IDENTIFIER LPAREN type_list_opt RPAREN IMPLIES type annotations_opt 
            {
              Object RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-10)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-10)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-10)).value;
		int typedeclsleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-8)).left;
		int typedeclsright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-8)).right;
		Object typedecls = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-8)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).value;
		int ftleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left;
		int ftright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).right;
		Object ft = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).value;
		int typesleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int typesright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object types = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int rtypeleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int rtyperight = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object rtype = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		Binding b = new Binding(parser, (Token)d, name.toString(), (List)typedecls, (List)types, (TypeVariable)rtype, (List)a);
		RESULT = b;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(12/*binding*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-10)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // binding ::= DECLARE IDENTIFIER LPAREN type_list_opt RPAREN IMPLIES type annotations_opt 
            {
              Object RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).value;
		int ftleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left;
		int ftright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).right;
		Object ft = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).value;
		int typesleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int typesright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object types = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int rtypeleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int rtyperight = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object rtype = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		Binding b = new Binding(parser, (Token)d, name.toString(), (List)null, (List)types, (TypeVariable)rtype, (List)a);
		//parser.parsedBindingList.add(b);
		RESULT = b;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(12/*binding*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // import_decl ::= IMPORT STRING 
            {
              Object RESULT = null;
		int itokenleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int itokenright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object itoken = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int filePathleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int filePathright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object filePath = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		Import i = new Import(parser, (Token)itoken, filePath.toString());
		RESULT = i;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(11/*import_decl*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // program_elt ::= top_level_statement 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(6/*program_elt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // program_elt ::= usertype 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(6/*program_elt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // program_elt ::= function 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(6/*program_elt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // program_elt ::= at_binding 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(6/*program_elt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // program_elt ::= binding 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(6/*program_elt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // program_elt ::= import_decl 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(6/*program_elt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // program_elt_list ::= program_elt 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 parser.topLevels.add((AstNode)e); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(5/*program_elt_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // program_elt_list ::= program_elt_list lf program_elt 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 parser.topLevels.add((AstNode)e); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(5/*program_elt_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // program_elt_list_opt ::= 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(4/*program_elt_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // program_elt_list_opt ::= program_elt_list lf_opt 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(4/*program_elt_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ini_program ::= lf_opt program_elt_list_opt 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(3/*ini_program*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lf_opt ::= 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(2/*lf_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lf_opt ::= lf 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(2/*lf_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lf ::= LF 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(1/*lf*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // lf ::= lf LF 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(1/*lf*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini_program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		RESULT = start_val;
              CUP$IniParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$IniParser$parser.done_parsing();
          return CUP$IniParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

