
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Mon Sep 09 11:47:53 CEST 2019
//----------------------------------------------------

package ini.parser;

import java.util.*;
import java.io.*;
import ini.*;
import ini.ast.*;
import ini.ast.Process;
import ini.eval.function.*;
import ini.eval.at.*;

/** CUP v0.10k generated parser.
  * @version Mon Sep 09 11:47:53 CEST 2019
  */
public class IniParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public IniParser() {super();}

  /** Constructor which sets the default scanner. */
  public IniParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\267\000\002\002\004\000\002\003\004\000\002\003" +
    "\003\000\002\004\003\000\002\004\002\000\002\005\004" +
    "\000\002\006\004\000\002\006\002\000\002\007\005\000" +
    "\002\007\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\015\004\000\002\016\012\000\002\016\015" +
    "\000\002\016\004\000\002\025\002\000\002\025\005\000" +
    "\002\071\013\000\002\011\012\000\002\011\012\000\002" +
    "\012\003\000\002\012\002\000\002\013\005\000\002\013" +
    "\003\000\002\014\005\000\002\014\003\000\002\027\005" +
    "\000\002\027\003\000\002\030\005\000\002\030\003\000" +
    "\002\054\005\000\002\054\003\000\002\055\005\000\002" +
    "\055\003\000\002\026\005\000\002\026\003\000\002\017" +
    "\003\000\002\017\002\000\002\020\005\000\002\020\003" +
    "\000\002\021\003\000\002\021\004\000\002\022\003\000" +
    "\002\022\002\000\002\023\005\000\002\023\003\000\002" +
    "\024\003\000\002\024\005\000\002\035\005\000\002\035" +
    "\005\000\002\035\005\000\002\040\003\000\002\064\003" +
    "\000\002\064\003\000\002\036\003\000\002\036\006\000" +
    "\002\036\010\000\002\036\005\000\002\042\003\000\002" +
    "\042\005\000\002\041\003\000\002\053\005\000\002\066" +
    "\010\000\002\103\006\000\002\103\003\000\002\067\010" +
    "\000\002\067\005\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\033\003\000\002" +
    "\033\005\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\044\012\000\002\044\010\000\002\044" +
    "\010\000\002\044\006\000\002\106\005\000\002\062\003" +
    "\000\002\062\003\000\002\062\003\000\002\062\005\000" +
    "\002\062\005\000\002\062\004\000\002\062\005\000\002" +
    "\062\005\000\002\062\005\000\002\061\003\000\002\061" +
    "\003\000\002\061\005\000\002\061\003\000\002\061\003" +
    "\000\002\061\005\000\002\061\005\000\002\061\004\000" +
    "\002\061\004\000\002\061\005\000\002\061\005\000\002" +
    "\061\005\000\002\061\005\000\002\061\005\000\002\061" +
    "\005\000\002\061\005\000\002\061\005\000\002\061\005" +
    "\000\002\043\012\000\002\043\006\000\002\043\004\000" +
    "\002\043\010\000\002\104\003\000\002\104\002\000\002" +
    "\105\005\000\002\105\003\000\002\072\005\000\002\072" +
    "\002\000\002\070\012\000\002\070\010\000\002\050\004" +
    "\000\002\050\004\000\002\046\007\000\002\047\011\000" +
    "\002\051\003\000\002\051\002\000\002\052\005\000\002" +
    "\052\003\000\002\056\007\000\002\056\013\000\002\056" +
    "\006\000\002\060\004\000\002\060\002\000\002\045\004" +
    "\000\002\045\004\000\002\045\003\000\002\057\003\000" +
    "\002\057\003\000\002\063\007\000\002\063\007\000\002" +
    "\065\007\000\002\073\010\000\002\074\006\000\002\074" +
    "\003\000\002\075\006\000\002\075\005\000\002\077\003" +
    "\000\002\077\003\000\002\076\003\000\002\076\004\000" +
    "\002\100\003\000\002\100\002\000\002\101\005\000\002" +
    "\101\003\000\002\102\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u016d\000\034\002\ufffd\015\ufffd\052\ufffd\053\ufffd\054" +
    "\ufffd\057\006\061\ufffd\062\ufffd\063\ufffd\067\ufffd\070\ufffd" +
    "\071\ufffd\074\ufffd\001\002\000\100\002\ufffe\011\ufffe\014" +
    "\ufffe\015\ufffe\016\ufffe\030\ufffe\037\ufffe\040\ufffe\043\ufffe" +
    "\045\ufffe\046\ufffe\047\ufffe\050\ufffe\051\ufffe\052\ufffe\053" +
    "\ufffe\054\ufffe\055\ufffe\056\ufffe\057\140\060\ufffe\061\ufffe" +
    "\062\ufffe\063\ufffe\064\ufffe\066\ufffe\067\ufffe\070\ufffe\071" +
    "\ufffe\072\ufffe\074\ufffe\001\002\000\004\002\u016f\001\002" +
    "\000\100\002\uffff\011\uffff\014\uffff\015\uffff\016\uffff\030" +
    "\uffff\037\uffff\040\uffff\043\uffff\045\uffff\046\uffff\047\uffff" +
    "\050\uffff\051\uffff\052\uffff\053\uffff\054\uffff\055\uffff\056" +
    "\uffff\057\uffff\060\uffff\061\uffff\062\uffff\063\uffff\064\uffff" +
    "\066\uffff\067\uffff\070\uffff\071\uffff\072\uffff\074\uffff\001" +
    "\002\000\032\002\ufffa\015\040\052\013\053\016\054\032" +
    "\061\010\062\020\063\033\067\030\070\023\071\036\074" +
    "\043\001\002\000\004\051\u016e\001\002\000\004\007\223" +
    "\001\002\000\006\002\ufffd\057\006\001\002\000\004\007" +
    "\uffaa\001\002\000\006\002\uffb5\057\uffb5\001\002\000\006" +
    "\002\ufff4\057\ufff4\001\002\000\076\002\uffc6\005\uffc6\006" +
    "\uffc6\007\uffc6\010\uffc6\011\341\012\uffc6\013\uffc6\014\uffc6" +
    "\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6\023" +
    "\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6" +
    "\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\041\uffc6\042" +
    "\uffc6\057\uffc6\001\002\000\006\002\ufff7\057\ufff7\001\002" +
    "\000\004\053\u0164\001\002\000\004\023\u0162\001\002\000" +
    "\006\002\ufff3\057\ufff3\001\002\000\004\007\uffad\001\002" +
    "\000\006\002\uffb8\057\uffb8\001\002\000\004\007\uffa9\001" +
    "\002\000\006\002\ufff8\057\ufff8\001\002\000\010\002\uffb6" +
    "\007\uffab\057\uffb6\001\002\000\004\054\u0148\001\002\000" +
    "\006\002\ufff5\057\ufff5\001\002\000\006\023\uffc9\040\uffc9" +
    "\001\002\000\004\053\u0141\001\002\000\006\002\ufff6\057" +
    "\ufff6\001\002\000\006\002\uffb9\057\uffb9\001\002\000\046" +
    "\011\317\013\325\015\077\030\073\037\320\043\334\045" +
    "\055\046\066\047\057\050\072\051\070\052\056\053\337" +
    "\054\071\055\333\056\327\064\106\070\063\001\002\000" +
    "\004\002\ufffc\001\002\000\032\011\061\015\077\016\uff68" +
    "\030\073\045\055\046\066\051\070\052\056\053\016\054" +
    "\071\064\106\070\063\001\002\000\010\002\uffb7\007\uffac" +
    "\057\uffb7\001\002\000\006\002\ufff2\057\ufff2\001\002\000" +
    "\016\002\uffd1\011\251\043\246\053\250\054\244\057\uffd1" +
    "\001\002\000\016\006\050\007\uffae\015\046\023\051\031" +
    "\045\033\047\001\002\000\056\002\uff6c\005\uff6c\010\uff6c" +
    "\012\uff6c\013\uff6c\014\uff6c\016\uff6c\017\uff6c\020\uff6c\021" +
    "\uff6c\022\uff6c\024\uff6c\025\uff6c\026\uff6c\027\uff6c\030\uff6c" +
    "\032\uff6c\034\uff6c\035\uff6c\041\uff6c\042\uff6c\057\uff6c\001" +
    "\002\000\030\011\061\015\077\030\073\045\055\046\066" +
    "\051\070\052\056\053\016\054\071\064\106\070\063\001" +
    "\002\000\056\002\uff6d\005\uff6d\010\uff6d\012\uff6d\013\uff6d" +
    "\014\uff6d\016\uff6d\017\uff6d\020\uff6d\021\uff6d\022\uff6d\024" +
    "\uff6d\025\uff6d\026\uff6d\027\uff6d\030\uff6d\032\uff6d\034\uff6d" +
    "\035\uff6d\041\uff6d\042\uff6d\057\uff6d\001\002\000\004\053" +
    "\236\001\002\000\034\011\061\015\077\030\073\045\055" +
    "\046\066\047\057\050\072\051\070\052\056\053\016\054" +
    "\071\064\106\070\063\001\002\000\006\007\223\036\222" +
    "\001\002\000\056\002\uff9e\005\uff9e\010\uff9e\012\uff9e\013" +
    "\uff9e\014\uff9e\016\uff9e\017\uff9e\020\uff9e\021\uff9e\022\uff9e" +
    "\024\uff9e\025\uff9e\026\uff9e\027\uff9e\030\uff9e\032\uff9e\034" +
    "\uff9e\035\uff9e\041\uff9e\042\uff9e\057\uff9e\001\002\000\020" +
    "\002\uffcc\014\uffcc\026\143\027\146\030\145\032\144\057" +
    "\uffcc\001\002\000\056\002\uff93\005\uff93\010\uff93\012\uff93" +
    "\013\uff93\014\uff93\016\uff93\017\uff93\020\uff93\021\uff93\022" +
    "\uff93\024\uff93\025\uff93\026\uff93\027\uff93\030\uff93\032\uff93" +
    "\034\uff93\035\uff93\041\uff93\042\uff93\057\uff93\001\002\000" +
    "\062\002\uffa2\005\uffa2\007\uffaa\010\uffa2\012\uffa2\013\uffa2" +
    "\014\uffa2\016\uffa2\017\uffa2\020\uffa2\021\uffa2\022\uffa2\024" +
    "\uffa2\025\uffa2\026\uffa2\027\uffa2\030\uffa2\032\uffa2\034\uffa2" +
    "\035\uffa2\036\uffaa\041\uffa2\042\uffa2\057\uffa2\001\002\000" +
    "\024\002\uffc8\005\uffc8\012\uffc8\013\uffc8\014\uffc8\016\uffc8" +
    "\034\uffc8\035\uffc8\057\uffc8\001\002\000\056\002\uff9c\005" +
    "\uff9c\010\uff9c\012\uff9c\013\uff9c\014\uff9c\016\uff9c\017\uff9c" +
    "\020\uff9c\021\uff9c\022\uff9c\024\uff9c\025\uff9c\026\uff9c\027" +
    "\uff9c\030\uff9c\032\uff9c\034\uff9c\035\uff9c\041\uff9c\042\uff9c" +
    "\057\uff9c\001\002\000\030\011\061\015\077\030\073\045" +
    "\055\046\066\051\070\052\056\053\016\054\071\064\106" +
    "\070\063\001\002\000\056\002\uff9a\005\uff9a\010\uff9a\012" +
    "\uff9a\013\uff9a\014\uff9a\016\uff9a\017\uff9a\020\uff9a\021\uff9a" +
    "\022\uff9a\024\uff9a\025\uff9a\026\uff9a\027\uff9a\030\uff9a\032" +
    "\uff9a\034\uff9a\035\uff9a\041\uff9a\042\uff9a\057\uff9a\001\002" +
    "\000\062\002\uffa5\005\uffa5\007\uffad\010\uffa5\012\uffa5\013" +
    "\uffa5\014\uffa5\016\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5" +
    "\024\uffa5\025\uffa5\026\uffa5\027\uffa5\030\uffa5\032\uffa5\034" +
    "\uffa5\035\uffa5\036\uffad\041\uffa5\042\uffa5\057\uffa5\001\002" +
    "\000\062\002\uff9f\005\uff9f\007\uffa9\010\uff9f\012\uff9f\013" +
    "\uff9f\014\uff9f\016\uff9f\017\uff9f\020\uff9f\021\uff9f\022\uff9f" +
    "\024\uff9f\025\uff9f\026\uff9f\027\uff9f\030\uff9f\032\uff9f\034" +
    "\uff9f\035\uff9f\036\uffa9\041\uff9f\042\uff9f\057\uff9f\001\002" +
    "\000\056\002\uffa1\005\uffa1\010\uffa1\012\uffa1\013\uffa1\014" +
    "\uffa1\016\uffa1\017\uffa1\020\uffa1\021\uffa1\022\uffa1\024\uffa1" +
    "\025\uffa1\026\uffa1\027\uffa1\030\uffa1\032\uffa1\034\uffa1\035" +
    "\uffa1\041\uffa1\042\uffa1\057\uffa1\001\002\000\056\002\uff94" +
    "\005\uff94\010\uff94\012\uff94\013\uff94\014\uff94\016\uff94\017" +
    "\uff94\020\uff94\021\uff94\022\uff94\024\uff94\025\uff94\026\uff94" +
    "\027\uff94\030\uff94\032\uff94\034\uff94\035\uff94\041\uff94\042" +
    "\uff94\057\uff94\001\002\000\062\002\uffa3\005\uffa3\007\uffab" +
    "\010\uffa3\012\uffa3\013\uffa3\014\uffa3\016\uffa3\017\uffa3\020" +
    "\uffa3\021\uffa3\022\uffa3\024\uffa3\025\uffa3\026\uffa3\027\uffa3" +
    "\030\uffa3\032\uffa3\034\uffa3\035\uffa3\036\uffab\041\uffa3\042" +
    "\uffa3\057\uffa3\001\002\000\056\002\uffc0\005\uffc0\010\uffc0" +
    "\012\uffc0\013\uffc0\014\uffc0\016\uffc0\017\uffc0\020\uffc0\021" +
    "\uffc0\022\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0" +
    "\032\uffc0\034\uffc0\035\uffc0\041\uffc0\042\uffc0\057\uffc0\001" +
    "\002\000\060\002\uffc9\005\uffc9\010\uffc9\012\uffc9\013\uffc9" +
    "\014\uffc9\015\202\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022" +
    "\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9\032\uffc9" +
    "\034\uffc9\035\uffc9\041\uffc9\042\uffc9\057\uffc9\001\002\000" +
    "\024\002\uffc7\005\uffc7\012\uffc7\013\uffc7\014\uffc7\016\uffc7" +
    "\034\uffc7\035\uffc7\057\uffc7\001\002\000\030\011\061\015" +
    "\077\030\073\045\055\046\066\051\070\052\056\053\016" +
    "\054\071\064\106\070\063\001\002\000\056\002\uff92\005" +
    "\uff92\010\uff92\012\uff92\013\uff92\014\uff92\016\uff92\017\uff92" +
    "\020\uff92\021\uff92\022\uff92\024\uff92\025\uff92\026\uff92\027" +
    "\uff92\030\uff92\032\uff92\034\uff92\035\uff92\041\uff92\042\uff92" +
    "\057\uff92\001\002\000\056\002\uffa6\005\uffa6\010\uffa6\012" +
    "\uffa6\013\uffa6\014\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6" +
    "\022\uffa6\024\uffa6\025\uffa6\026\uffa6\027\uffa6\030\uffa6\032" +
    "\uffa6\034\uffa6\035\uffa6\041\uffa6\042\uffa6\057\uffa6\001\002" +
    "\000\062\002\uffa4\005\uffa4\007\uffac\010\uffa4\012\uffa4\013" +
    "\uffa4\014\uffa4\016\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4" +
    "\024\uffa4\025\uffa4\026\uffa4\027\uffa4\030\uffa4\032\uffa4\034" +
    "\uffa4\035\uffa4\036\uffac\041\uffa4\042\uffa4\057\uffa4\001\002" +
    "\000\032\011\061\015\077\016\uff68\030\073\045\055\046" +
    "\066\051\070\052\056\053\016\054\071\064\106\070\063" +
    "\001\002\000\056\002\uff9b\005\uff9b\010\uff9b\012\uff9b\013" +
    "\uff9b\014\uff9b\016\uff9b\017\uff9b\020\uff9b\021\uff9b\022\uff9b" +
    "\024\uff9b\025\uff9b\026\uff9b\027\uff9b\030\uff9b\032\uff9b\034" +
    "\uff9b\035\uff9b\041\uff9b\042\uff9b\057\uff9b\001\002\000\010" +
    "\002\uffcb\014\uffcb\057\uffcb\001\002\000\056\002\uffc2\005" +
    "\uffc2\010\uffc2\012\uffc2\013\uffc2\014\uffc2\016\uffc2\017\uffc2" +
    "\020\uffc2\021\uffc2\022\uffc2\024\uffc2\025\uffc2\026\uffc2\027" +
    "\uffc2\030\uffc2\032\166\034\uffc2\035\uffc2\041\uffc2\042\uffc2" +
    "\057\uffc2\001\002\000\056\002\uff9d\005\uff9d\010\uff9d\012" +
    "\uff9d\013\uff9d\014\uff9d\016\uff9d\017\uff9d\020\uff9d\021\uff9d" +
    "\022\uff9d\024\uff9d\025\uff9d\026\uff9d\027\uff9d\030\uff9d\032" +
    "\uff9d\034\uff9d\035\uff9d\041\uff9d\042\uff9d\057\uff9d\001\002" +
    "\000\056\002\uffa0\005\uffa0\010\uffa0\012\uffa0\013\uffa0\014" +
    "\uffa0\016\uffa0\017\uffa0\020\uffa0\021\uffa0\022\uffa0\024\uffa0" +
    "\025\uffa0\026\uffa0\027\uffa0\030\uffa0\032\uffa0\034\uffa0\035" +
    "\uffa0\041\uffa0\042\uffa0\057\uffa0\001\002\000\074\002\uffa8" +
    "\005\uffa8\006\050\007\uffae\010\uffa8\012\uffa8\013\uffa8\014" +
    "\uffa8\015\046\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8" +
    "\023\164\024\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8\031" +
    "\045\032\uffa8\033\047\034\uffa8\035\uffa8\036\uffae\041\uffa8" +
    "\042\uffa8\057\uffa8\001\002\000\010\011\112\041\uffe7\053" +
    "\111\001\002\000\010\005\162\012\uffe8\041\uffe8\001\002" +
    "\000\004\041\155\001\002\000\012\005\uffe3\012\uffe3\023" +
    "\153\041\uffe3\001\002\000\006\012\uffe7\053\111\001\002" +
    "\000\010\005\uffe5\012\uffe5\041\uffe5\001\002\000\004\012" +
    "\115\001\002\000\004\041\116\001\002\000\032\011\061" +
    "\013\120\015\077\030\073\045\055\046\066\051\070\052" +
    "\056\053\016\054\071\064\106\070\063\001\002\000\056" +
    "\002\uff97\005\uff97\010\uff97\012\uff97\013\uff97\014\uff97\016" +
    "\uff97\017\uff97\020\uff97\021\uff97\022\uff97\024\uff97\025\uff97" +
    "\026\143\027\146\030\145\032\144\034\uff97\035\uff97\041" +
    "\uff97\042\uff97\057\uff97\001\002\000\024\014\ufffd\015\ufffd" +
    "\052\ufffd\053\ufffd\054\ufffd\057\006\066\ufffd\070\ufffd\071" +
    "\ufffd\001\002\000\022\014\uffe1\015\040\052\013\053\016" +
    "\054\032\066\126\070\023\071\036\001\002\000\004\014" +
    "\123\001\002\000\056\002\uff99\005\uff99\010\uff99\012\uff99" +
    "\013\uff99\014\uff99\016\uff99\017\uff99\020\uff99\021\uff99\022" +
    "\uff99\024\uff99\025\uff99\026\uff99\027\uff99\030\uff99\032\uff99" +
    "\034\uff99\035\uff99\041\uff99\042\uff99\057\uff99\001\002\000" +
    "\006\014\uffdf\057\uffdf\001\002\000\006\014\uffb0\057\uffb0" +
    "\001\002\000\040\011\061\014\uff5e\015\077\030\073\045" +
    "\055\046\066\047\057\050\072\051\070\052\056\053\016" +
    "\054\071\057\uff5e\064\106\070\063\001\002\000\006\014" +
    "\uffaf\057\uffaf\001\002\000\006\014\uffb3\057\uffb3\001\002" +
    "\000\010\007\uffab\014\uffb1\057\uffb1\001\002\000\006\014" +
    "\ufffd\057\006\001\002\000\006\014\uffb4\057\uffb4\001\002" +
    "\000\010\007\uffac\014\uffb2\057\uffb2\001\002\000\024\014" +
    "\ufffe\015\040\052\013\053\016\054\032\057\140\066\126" +
    "\070\023\071\036\001\002\000\004\014\uffe2\001\002\000" +
    "\006\014\uffe0\057\uffe0\001\002\000\100\002\000\011\000" +
    "\014\000\015\000\016\000\030\000\037\000\040\000\043" +
    "\000\045\000\046\000\047\000\050\000\051\000\052\000" +
    "\053\000\054\000\055\000\056\000\057\000\060\000\061" +
    "\000\062\000\063\000\064\000\066\000\067\000\070\000" +
    "\071\000\072\000\074\000\001\002\000\016\014\uff60\026" +
    "\143\027\146\030\145\032\144\057\uff60\001\002\000\006" +
    "\014\uff5f\057\uff5f\001\002\000\030\011\061\015\077\030" +
    "\073\045\055\046\066\051\070\052\056\053\016\054\071" +
    "\064\106\070\063\001\002\000\030\011\061\015\077\030" +
    "\073\045\055\046\066\051\070\052\056\053\016\054\071" +
    "\064\106\070\063\001\002\000\030\011\061\015\077\030" +
    "\073\045\055\046\066\051\070\052\056\053\016\054\071" +
    "\064\106\070\063\001\002\000\030\011\061\015\077\030" +
    "\073\045\055\046\066\051\070\052\056\053\016\054\071" +
    "\064\106\070\063\001\002\000\056\002\uff8d\005\uff8d\010" +
    "\uff8d\012\uff8d\013\uff8d\014\uff8d\016\uff8d\017\uff8d\020\uff8d" +
    "\021\uff8d\022\uff8d\024\uff8d\025\uff8d\026\uff8d\027\uff8d\030" +
    "\uff8d\032\uff8d\034\uff8d\035\uff8d\041\uff8d\042\uff8d\057\uff8d" +
    "\001\002\000\056\002\uff90\005\uff90\010\uff90\012\uff90\013" +
    "\uff90\014\uff90\016\uff90\017\uff90\020\uff90\021\uff90\022\uff90" +
    "\024\uff90\025\uff90\026\143\027\146\030\uff90\032\uff90\034" +
    "\uff90\035\uff90\041\uff90\042\uff90\057\uff90\001\002\000\056" +
    "\002\uff91\005\uff91\010\uff91\012\uff91\013\uff91\014\uff91\016" +
    "\uff91\017\uff91\020\uff91\021\uff91\022\uff91\024\uff91\025\uff91" +
    "\026\143\027\146\030\uff91\032\uff91\034\uff91\035\uff91\041" +
    "\uff91\042\uff91\057\uff91\001\002\000\056\002\uff8e\005\uff8e" +
    "\010\uff8e\012\uff8e\013\uff8e\014\uff8e\016\uff8e\017\uff8e\020" +
    "\uff8e\021\uff8e\022\uff8e\024\uff8e\025\uff8e\026\uff8e\027\uff8e" +
    "\030\uff8e\032\uff8e\034\uff8e\035\uff8e\041\uff8e\042\uff8e\057" +
    "\uff8e\001\002\000\030\011\061\015\077\030\073\045\055" +
    "\046\066\051\070\052\056\053\016\054\071\064\106\070" +
    "\063\001\002\000\020\005\uffe4\012\uffe4\026\143\027\146" +
    "\030\145\032\144\041\uffe4\001\002\000\032\011\061\013" +
    "\157\015\077\030\073\045\055\046\066\051\070\052\056" +
    "\053\016\054\071\064\106\070\063\001\002\000\056\002" +
    "\uff96\005\uff96\010\uff96\012\uff96\013\uff96\014\uff96\016\uff96" +
    "\017\uff96\020\uff96\021\uff96\022\uff96\024\uff96\025\uff96\026" +
    "\143\027\146\030\145\032\144\034\uff96\035\uff96\041\uff96" +
    "\042\uff96\057\uff96\001\002\000\024\014\ufffd\015\ufffd\052" +
    "\ufffd\053\ufffd\054\ufffd\057\006\066\ufffd\070\ufffd\071\ufffd" +
    "\001\002\000\004\014\161\001\002\000\056\002\uff98\005" +
    "\uff98\010\uff98\012\uff98\013\uff98\014\uff98\016\uff98\017\uff98" +
    "\020\uff98\021\uff98\022\uff98\024\uff98\025\uff98\026\uff98\027" +
    "\uff98\030\uff98\032\uff98\034\uff98\035\uff98\041\uff98\042\uff98" +
    "\057\uff98\001\002\000\004\053\111\001\002\000\010\005" +
    "\uffe6\012\uffe6\041\uffe6\001\002\000\030\011\061\015\077" +
    "\030\073\045\055\046\066\051\070\052\056\053\016\054" +
    "\071\064\106\070\063\001\002\000\056\002\uffa7\005\uffa7" +
    "\010\uffa7\012\uffa7\013\uffa7\014\uffa7\016\uffa7\017\uffa7\020" +
    "\uffa7\021\uffa7\022\uffa7\024\uffa7\025\uffa7\026\143\027\146" +
    "\030\145\032\144\034\uffa7\035\uffa7\041\uffa7\042\uffa7\057" +
    "\uffa7\001\002\000\030\011\061\015\077\030\073\045\055" +
    "\046\066\051\070\052\056\053\016\054\071\064\106\070" +
    "\063\001\002\000\056\002\uffc1\005\uffc1\010\uffc1\012\uffc1" +
    "\013\uffc1\014\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022" +
    "\uffc1\024\uffc1\025\uffc1\026\143\027\146\030\uffc1\032\uffc1" +
    "\034\uffc1\035\uffc1\041\uffc1\042\uffc1\057\uffc1\001\002\000" +
    "\020\005\uff66\010\176\016\uff66\026\143\027\146\030\145" +
    "\032\144\001\002\000\004\016\175\001\002\000\010\005" +
    "\173\012\uff69\016\uff69\001\002\000\030\011\061\015\077" +
    "\030\073\045\055\046\066\051\070\052\056\053\016\054" +
    "\071\064\106\070\063\001\002\000\020\005\uff67\012\uff67" +
    "\016\uff67\026\143\027\146\030\145\032\144\001\002\000" +
    "\062\002\uffbf\005\uffbf\007\uffbf\010\uffbf\012\uffbf\013\uffbf" +
    "\014\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\024" +
    "\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\032\uffbf\034\uffbf" +
    "\035\uffbf\036\uffbf\041\uffbf\042\uffbf\057\uffbf\001\002\000" +
    "\030\011\061\015\077\030\073\045\055\046\066\051\070" +
    "\052\056\053\016\054\071\064\106\070\063\001\002\000" +
    "\014\016\200\026\143\027\146\030\145\032\144\001\002" +
    "\000\060\002\uff59\005\uff59\010\uff59\012\uff59\013\uff59\014" +
    "\uff59\016\uff59\017\uff59\020\uff59\021\uff59\022\uff59\024\uff59" +
    "\025\uff59\026\uff59\027\uff59\030\uff59\032\uff59\034\uff59\035" +
    "\uff59\040\uff59\041\uff59\042\uff59\057\uff59\001\002\000\056" +
    "\002\uff8f\005\uff8f\010\uff8f\012\uff8f\013\uff8f\014\uff8f\016" +
    "\uff8f\017\uff8f\020\uff8f\021\uff8f\022\uff8f\024\uff8f\025\uff8f" +
    "\026\143\027\146\030\uff8f\032\uff8f\034\uff8f\035\uff8f\041" +
    "\uff8f\042\uff8f\057\uff8f\001\002\000\006\053\ufffd\057\006" +
    "\001\002\000\004\053\205\001\002\000\010\005\210\016" +
    "\ufffd\057\006\001\002\000\004\023\206\001\002\000\030" +
    "\011\061\015\077\030\073\045\055\046\066\051\070\052" +
    "\056\053\016\054\071\064\106\070\063\001\002\000\020" +
    "\005\uffba\016\uffba\026\143\027\146\030\145\032\144\057" +
    "\uffba\001\002\000\006\053\ufffd\057\006\001\002\000\004" +
    "\016\212\001\002\000\056\002\uffbe\005\uffbe\010\uffbe\012" +
    "\uffbe\013\uffbe\014\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe" +
    "\022\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\032" +
    "\uffbe\034\uffbe\035\uffbe\041\uffbe\042\uffbe\057\uffbe\001\002" +
    "\000\004\053\214\001\002\000\004\023\215\001\002\000" +
    "\030\011\061\015\077\030\073\045\055\046\066\051\070" +
    "\052\056\053\016\054\071\064\106\070\063\001\002\000" +
    "\020\005\uffbb\016\uffbb\026\143\027\146\030\145\032\144" +
    "\057\uffbb\001\002\000\012\026\143\027\146\030\145\032" +
    "\144\001\002\000\032\012\221\017\uffa1\020\uffa1\021\uffa1" +
    "\022\uffa1\024\uffa1\025\uffa1\026\uffa1\027\uffa1\030\uffa1\032" +
    "\uffa1\042\uffa1\001\002\000\056\002\uff8c\005\uff8c\010\uff8c" +
    "\012\uff8c\013\uff8c\014\uff8c\016\uff8c\017\uff8c\020\uff8c\021" +
    "\uff8c\022\uff8c\024\uff8c\025\uff8c\026\uff8c\027\uff8c\030\uff8c" +
    "\032\uff8c\034\uff8c\035\uff8c\041\uff8c\042\uff8c\057\uff8c\001" +
    "\002\000\030\011\061\015\077\030\073\045\055\046\066" +
    "\051\070\052\056\053\016\054\071\064\106\070\063\001" +
    "\002\000\004\053\224\001\002\000\004\011\225\001\002" +
    "\000\032\011\061\012\uff68\015\077\030\073\045\055\046" +
    "\066\051\070\052\056\053\016\054\071\064\106\070\063" +
    "\001\002\000\020\005\uff66\012\uff66\016\uff66\026\143\027" +
    "\146\030\145\032\144\001\002\000\004\012\230\001\002" +
    "\000\064\002\uff70\005\uff70\007\uff70\010\uff70\012\uff70\013" +
    "\uff70\014\uff70\015\231\016\uff70\017\uff70\020\uff70\021\uff70" +
    "\022\uff70\024\uff70\025\uff70\026\uff70\027\uff70\030\uff70\032" +
    "\uff70\034\uff70\035\uff70\036\uff70\041\uff70\042\uff70\057\uff70" +
    "\001\002\000\030\011\061\015\077\030\073\045\055\046" +
    "\066\051\070\052\056\053\016\054\071\064\106\070\063" +
    "\001\002\000\062\002\uff6a\005\uff6a\007\uff6a\010\uff6a\012" +
    "\uff6a\013\uff6a\014\uff6a\016\uff6a\017\uff6a\020\uff6a\021\uff6a" +
    "\022\uff6a\024\uff6a\025\uff6a\026\uff6a\027\uff6a\030\uff6a\032" +
    "\uff6a\034\uff6a\035\uff6a\036\uff6a\041\uff6a\042\uff6a\057\uff6a" +
    "\001\002\000\006\005\173\016\234\001\002\000\062\002" +
    "\uff71\005\uff71\007\uff71\010\uff71\012\uff71\013\uff71\014\uff71" +
    "\016\uff71\017\uff71\020\uff71\021\uff71\022\uff71\024\uff71\025" +
    "\uff71\026\uff71\027\uff71\030\uff71\032\uff71\034\uff71\035\uff71" +
    "\036\uff71\041\uff71\042\uff71\057\uff71\001\002\000\056\002" +
    "\uff95\005\uff95\010\uff95\012\uff95\013\uff95\014\uff95\016\uff95" +
    "\017\uff95\020\uff95\021\uff95\022\uff95\024\uff95\025\uff95\026" +
    "\143\027\146\030\145\032\144\034\uff95\035\uff95\041\uff95" +
    "\042\uff95\057\uff95\001\002\000\074\002\uffc3\005\uffc3\006" +
    "\uffc3\007\uffc3\010\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3" +
    "\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024" +
    "\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3" +
    "\033\uffc3\034\uffc3\035\uffc3\036\uffc3\041\uffc3\042\uffc3\057" +
    "\uffc3\001\002\000\016\010\241\016\240\026\143\027\146" +
    "\030\145\032\144\001\002\000\074\002\uffc5\005\uffc5\006" +
    "\uffc5\007\uffc5\010\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5" +
    "\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024" +
    "\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5" +
    "\033\uffc5\034\uffc5\035\uffc5\036\uffc5\041\uffc5\042\uffc5\057" +
    "\uffc5\001\002\000\030\011\061\015\077\030\073\045\055" +
    "\046\066\051\070\052\056\053\016\054\071\064\106\070" +
    "\063\001\002\000\014\016\243\026\143\027\146\030\145" +
    "\032\144\001\002\000\074\002\uffc4\005\uffc4\006\uffc4\007" +
    "\uffc4\010\uffc4\012\uffc4\013\uffc4\014\uffc4\015\uffc4\016\uffc4" +
    "\017\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025" +
    "\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4" +
    "\034\uffc4\035\uffc4\036\uffc4\041\uffc4\042\uffc4\057\uffc4\001" +
    "\002\000\014\002\uffce\005\uffce\012\uffce\017\314\057\uffce" +
    "\001\002\000\012\002\uffd2\005\312\012\uffd2\057\uffd2\001" +
    "\002\000\004\053\300\001\002\000\012\002\uffcf\005\uffcf" +
    "\012\uffcf\057\uffcf\001\002\000\004\011\272\001\002\000" +
    "\006\012\uffd1\054\244\001\002\000\006\002\uffee\057\uffee" +
    "\001\002\000\004\012\254\001\002\000\004\053\255\001" +
    "\002\000\004\011\256\001\002\000\006\012\uffd7\054\257" +
    "\001\002\000\020\002\uffd4\005\uffd4\012\uffd4\015\uffd4\016" +
    "\uffd4\026\uffd4\057\uffd4\001\002\000\012\005\uffd5\012\uffd5" +
    "\016\uffd5\026\265\001\002\000\004\012\266\001\002\000" +
    "\010\005\263\012\uffd8\016\uffd8\001\002\000\004\054\257" +
    "\001\002\000\012\005\uffd6\012\uffd6\016\uffd6\026\265\001" +
    "\002\000\020\002\uffd3\005\uffd3\012\uffd3\015\uffd3\016\uffd3" +
    "\026\uffd3\057\uffd3\001\002\000\004\041\267\001\002\000" +
    "\004\054\257\001\002\000\012\002\uff70\015\231\026\265" +
    "\057\uff70\001\002\000\006\002\uffef\057\uffef\001\002\000" +
    "\006\012\uffd7\054\257\001\002\000\004\012\274\001\002" +
    "\000\004\041\275\001\002\000\004\054\257\001\002\000" +
    "\012\002\uff70\015\231\026\265\057\uff70\001\002\000\006" +
    "\002\ufff0\057\ufff0\001\002\000\006\011\uffed\015\302\001" +
    "\002\000\004\011\305\001\002\000\006\016\uffd7\054\257" +
    "\001\002\000\004\016\304\001\002\000\004\011\uffec\001" +
    "\002\000\006\012\uffd7\054\257\001\002\000\004\012\307" +
    "\001\002\000\004\041\310\001\002\000\004\051\311\001" +
    "\002\000\006\002\uffeb\057\uffeb\001\002\000\004\054\244" +
    "\001\002\000\012\002\uffd0\005\uffd0\012\uffd0\057\uffd0\001" +
    "\002\000\004\054\315\001\002\000\012\002\uffcd\005\uffcd" +
    "\012\uffcd\057\uffcd\001\002\000\062\005\uff8a\006\050\007" +
    "\uffae\012\uff8a\013\uff8a\015\046\016\uff8a\017\uffa8\020\uffa8" +
    "\021\uffa8\022\uffa8\023\u013e\024\uffa8\025\uffa8\026\uffa8\027" +
    "\uffa8\030\uffa8\031\045\032\uffa8\033\047\034\uff8a\035\uff8a" +
    "\036\uffae\042\uffa8\001\002\000\040\011\317\015\077\030" +
    "\073\037\320\045\055\046\066\047\057\050\072\051\070" +
    "\052\056\053\016\054\071\055\333\064\106\070\063\001" +
    "\002\000\040\011\317\015\077\030\073\037\320\045\055" +
    "\046\066\047\057\050\072\051\070\052\056\053\016\054" +
    "\071\055\333\064\106\070\063\001\002\000\010\013\uff5d" +
    "\034\366\035\365\001\002\000\004\013\u0138\001\002\000" +
    "\016\005\uff8b\012\uff8b\013\uff8b\016\uff8b\034\uff8b\035\uff8b" +
    "\001\002\000\044\005\uff88\012\uff88\013\uff88\016\uff88\017" +
    "\uffa6\020\uffa6\021\uffa6\022\uffa6\024\uffa6\025\uffa6\026\uffa6" +
    "\027\uffa6\030\uffa6\032\uffa6\034\uff88\035\uff88\042\uffa6\001" +
    "\002\000\052\011\ufffd\014\ufffd\015\ufffd\030\ufffd\037\ufffd" +
    "\043\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd\052" +
    "\ufffd\053\ufffd\054\ufffd\055\ufffd\056\ufffd\057\006\064\ufffd" +
    "\070\ufffd\072\ufffd\001\002\000\006\005\u0120\065\u0121\001" +
    "\002\000\004\011\u0117\001\002\000\050\005\uff87\007\uffac" +
    "\012\uff87\013\uff87\016\uff87\017\uffa4\020\uffa4\021\uffa4\022" +
    "\uffa4\024\uffa4\025\uffa4\026\uffa4\027\uffa4\030\uffa4\032\uffa4" +
    "\034\uff87\035\uff87\036\uffac\042\uffa4\001\002\000\004\013" +
    "\uff5c\001\002\000\030\017\u0105\020\u0101\021\u0100\022\u0102" +
    "\024\u0103\025\377\026\143\027\146\030\145\032\144\042" +
    "\u0104\001\002\000\040\011\317\015\077\030\073\037\320" +
    "\045\055\046\066\047\057\050\072\051\070\052\056\053" +
    "\016\054\071\055\333\064\106\070\063\001\002\000\004" +
    "\053\371\001\002\000\006\013\uff61\035\357\001\002\000" +
    "\012\002\uff77\014\uff77\057\uff77\073\353\001\002\000\064" +
    "\004\340\005\uffd9\006\uffc6\007\uffc6\011\341\013\uffc6\015" +
    "\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6" +
    "\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033" +
    "\uffc6\034\uffc6\035\uffc6\036\uffc6\042\uffc6\065\uffd9\001\002" +
    "\000\004\043\345\001\002\000\032\011\061\012\uff68\015" +
    "\077\030\073\045\055\046\066\051\070\052\056\053\016" +
    "\054\071\064\106\070\063\001\002\000\004\012\343\001" +
    "\002\000\064\002\uff70\005\uff70\007\uff70\010\uff70\012\uff70" +
    "\013\uff70\014\uff70\015\231\016\uff70\017\uff70\020\uff70\021" +
    "\uff70\022\uff70\024\uff70\025\uff70\026\uff70\027\uff70\030\uff70" +
    "\032\uff70\034\uff70\035\uff70\036\uff70\041\uff70\042\uff70\057" +
    "\uff70\001\002\000\062\002\uff6b\005\uff6b\007\uff6b\010\uff6b" +
    "\012\uff6b\013\uff6b\014\uff6b\016\uff6b\017\uff6b\020\uff6b\021" +
    "\uff6b\022\uff6b\024\uff6b\025\uff6b\026\uff6b\027\uff6b\030\uff6b" +
    "\032\uff6b\034\uff6b\035\uff6b\036\uff6b\041\uff6b\042\uff6b\057" +
    "\uff6b\001\002\000\004\053\346\001\002\000\004\011\347" +
    "\001\002\000\032\011\061\012\uff68\015\077\030\073\045" +
    "\055\046\066\051\070\052\056\053\016\054\071\064\106" +
    "\070\063\001\002\000\004\012\351\001\002\000\010\013" +
    "\uff70\015\231\035\uff70\001\002\000\006\013\uff6f\035\uff6f" +
    "\001\002\000\004\013\354\001\002\000\024\014\ufffd\015" +
    "\ufffd\052\ufffd\053\ufffd\054\ufffd\057\006\066\ufffd\070\ufffd" +
    "\071\ufffd\001\002\000\004\014\356\001\002\000\010\002" +
    "\uff76\014\uff76\057\uff76\001\002\000\040\011\317\015\077" +
    "\030\073\037\320\045\055\046\066\047\057\050\072\051" +
    "\070\052\056\053\016\054\071\055\333\064\106\070\063" +
    "\001\002\000\004\013\361\001\002\000\024\014\ufffd\015" +
    "\ufffd\052\ufffd\053\ufffd\054\ufffd\057\006\066\ufffd\070\ufffd" +
    "\071\ufffd\001\002\000\004\014\363\001\002\000\014\002" +
    "\uff65\014\uff65\057\uff65\072\uff65\073\uff65\001\002\000\010" +
    "\013\uff62\034\366\035\365\001\002\000\040\011\317\015" +
    "\077\030\073\037\320\045\055\046\066\047\057\050\072" +
    "\051\070\052\056\053\016\054\071\055\333\064\106\070" +
    "\063\001\002\000\040\011\317\015\077\030\073\037\320" +
    "\045\055\046\066\047\057\050\072\051\070\052\056\053" +
    "\016\054\071\055\333\064\106\070\063\001\002\000\016" +
    "\005\uff85\012\uff85\013\uff85\016\uff85\034\uff85\035\365\001" +
    "\002\000\016\005\uff86\012\uff86\013\uff86\016\uff86\034\uff86" +
    "\035\uff86\001\002\000\004\011\372\001\002\000\032\011" +
    "\061\012\uff68\015\077\030\073\045\055\046\066\051\070" +
    "\052\056\053\016\054\071\064\106\070\063\001\002\000" +
    "\004\012\374\001\002\000\010\013\uff70\015\231\035\uff70" +
    "\001\002\000\006\013\uff6e\035\uff6e\001\002\000\016\005" +
    "\uff83\012\uff83\013\uff83\016\uff83\034\366\035\365\001\002" +
    "\000\030\011\061\015\077\030\073\045\055\046\066\051" +
    "\070\052\056\053\016\054\071\064\106\070\063\001\002" +
    "\000\030\011\061\015\077\030\073\045\055\046\066\051" +
    "\070\052\056\053\016\054\071\064\106\070\063\001\002" +
    "\000\030\011\061\015\077\030\073\045\055\046\066\051" +
    "\070\052\056\053\016\054\071\064\106\070\063\001\002" +
    "\000\030\011\061\015\077\030\073\045\055\046\066\051" +
    "\070\052\056\053\016\054\071\064\106\070\063\001\002" +
    "\000\030\011\061\015\077\030\073\045\055\046\066\051" +
    "\070\052\056\053\016\054\071\064\106\070\063\001\002" +
    "\000\006\053\u0109\054\u0107\001\002\000\030\011\061\015" +
    "\077\030\073\045\055\046\066\051\070\052\056\053\016" +
    "\054\071\064\106\070\063\001\002\000\026\005\uff80\012" +
    "\uff80\013\uff80\016\uff80\026\143\027\146\030\145\032\144" +
    "\034\uff80\035\uff80\001\002\000\020\005\uffbc\012\uffbc\013" +
    "\uffbc\015\u010b\016\uffbc\034\uffbc\035\uffbc\001\002\000\016" +
    "\005\uff7b\012\uff7b\013\uff7b\016\uff7b\034\uff7b\035\uff7b\001" +
    "\002\000\004\011\341\001\002\000\016\005\uff7c\012\uff7c" +
    "\013\uff7c\016\uff7c\034\uff7c\035\uff7c\001\002\000\042\011" +
    "\317\015\077\016\uff74\030\073\037\320\045\055\046\066" +
    "\047\057\050\072\051\070\052\056\053\016\054\071\055" +
    "\333\064\106\070\063\001\002\000\006\005\u0110\016\uff75" +
    "\001\002\000\012\005\uff72\016\uff72\034\366\035\365\001" +
    "\002\000\004\016\u010f\001\002\000\016\005\uffbd\012\uffbd" +
    "\013\uffbd\016\uffbd\034\uffbd\035\uffbd\001\002\000\040\011" +
    "\317\015\077\030\073\037\320\045\055\046\066\047\057" +
    "\050\072\051\070\052\056\053\016\054\071\055\333\064" +
    "\106\070\063\001\002\000\012\005\uff73\016\uff73\034\366" +
    "\035\365\001\002\000\026\005\uff82\012\uff82\013\uff82\016" +
    "\uff82\026\143\027\146\030\145\032\144\034\uff82\035\uff82" +
    "\001\002\000\026\005\uff7e\012\uff7e\013\uff7e\016\uff7e\026" +
    "\143\027\146\030\145\032\144\034\uff7e\035\uff7e\001\002" +
    "\000\026\005\uff7f\012\uff7f\013\uff7f\016\uff7f\026\143\027" +
    "\146\030\145\032\144\034\uff7f\035\uff7f\001\002\000\026" +
    "\005\uff7d\012\uff7d\013\uff7d\016\uff7d\026\143\027\146\030" +
    "\145\032\144\034\uff7d\035\uff7d\001\002\000\026\005\uff81" +
    "\012\uff81\013\uff81\016\uff81\026\143\027\146\030\145\032" +
    "\144\034\uff81\035\uff81\001\002\000\032\011\061\012\uff68" +
    "\015\077\030\073\045\055\046\066\051\070\052\056\053" +
    "\016\054\071\064\106\070\063\001\002\000\004\012\u0119" +
    "\001\002\000\006\043\334\053\u011b\001\002\000\006\013" +
    "\uff61\035\357\001\002\000\004\004\340\001\002\000\004" +
    "\013\u011d\001\002\000\024\014\ufffd\015\ufffd\052\ufffd\053" +
    "\ufffd\054\ufffd\057\006\066\ufffd\070\ufffd\071\ufffd\001\002" +
    "\000\004\014\u011f\001\002\000\014\002\uff64\014\uff64\057" +
    "\uff64\072\uff64\073\uff64\001\002\000\004\053\u012a\001\002" +
    "\000\006\015\u0123\054\032\001\002\000\004\040\u0128\001" +
    "\002\000\030\011\061\015\077\030\073\045\055\046\066" +
    "\051\070\052\056\053\016\054\071\064\106\070\063\001" +
    "\002\000\004\040\u0125\001\002\000\040\011\317\015\077" +
    "\030\073\037\320\045\055\046\066\047\057\050\072\051" +
    "\070\052\056\053\016\054\071\055\333\064\106\070\063" +
    "\001\002\000\010\013\uff5b\034\366\035\365\001\002\000" +
    "\014\010\176\026\143\027\146\030\145\032\144\001\002" +
    "\000\040\011\317\015\077\030\073\037\320\045\055\046" +
    "\066\047\057\050\072\051\070\052\056\053\016\054\071" +
    "\055\333\064\106\070\063\001\002\000\010\013\uff5a\034" +
    "\366\035\365\001\002\000\006\005\uffda\065\uffda\001\002" +
    "\000\050\011\317\014\uffdd\015\077\030\073\037\320\043" +
    "\334\045\055\046\066\047\057\050\072\051\070\052\056" +
    "\053\337\054\071\055\333\056\327\064\106\070\063\072" +
    "\uffdd\001\002\000\006\014\u012e\072\u012d\001\002\000\004" +
    "\013\u012f\001\002\000\010\002\uff78\014\uff78\057\uff78\001" +
    "\002\000\024\014\ufffd\015\ufffd\052\ufffd\053\ufffd\054\ufffd" +
    "\057\006\066\ufffd\070\ufffd\071\ufffd\001\002\000\004\014" +
    "\u0131\001\002\000\004\014\u0132\001\002\000\010\002\uff79" +
    "\014\uff79\057\uff79\001\002\000\010\014\ufffd\057\006\072" +
    "\ufffd\001\002\000\010\014\uffdb\057\uffdb\072\uffdb\001\002" +
    "\000\052\011\317\014\ufffe\015\077\030\073\037\320\043" +
    "\334\045\055\046\066\047\057\050\072\051\070\052\056" +
    "\053\337\054\071\055\333\056\327\057\140\064\106\070" +
    "\063\072\ufffe\001\002\000\006\014\uffde\072\uffde\001\002" +
    "\000\010\014\uffdc\057\uffdc\072\uffdc\001\002\000\024\014" +
    "\ufffd\015\ufffd\052\ufffd\053\ufffd\054\ufffd\057\006\066\ufffd" +
    "\070\ufffd\071\ufffd\001\002\000\004\014\u013a\001\002\000" +
    "\014\002\uff63\014\uff63\057\uff63\072\uff63\073\uff63\001\002" +
    "\000\016\005\uff84\012\uff84\013\uff84\016\uff84\034\uff84\035" +
    "\uff84\001\002\000\010\012\u013d\034\366\035\365\001\002" +
    "\000\016\005\uff7a\012\uff7a\013\uff7a\016\uff7a\034\uff7a\035" +
    "\uff7a\001\002\000\040\011\317\015\077\030\073\037\320" +
    "\045\055\046\066\047\057\050\072\051\070\052\056\053" +
    "\016\054\071\055\333\064\106\070\063\001\002\000\030" +
    "\017\u0105\020\u0101\021\u0100\022\u0102\024\u0103\025\377\026" +
    "\143\027\146\030\145\032\144\042\u0104\001\002\000\016" +
    "\005\uff89\012\uff89\013\uff89\016\uff89\034\366\035\365\001" +
    "\002\000\004\011\u0142\001\002\000\006\012\uffe7\053\111" +
    "\001\002\000\004\012\u0144\001\002\000\004\013\u0145\001" +
    "\002\000\050\011\ufffd\014\ufffd\015\ufffd\030\ufffd\037\ufffd" +
    "\043\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd\052" +
    "\ufffd\053\ufffd\054\ufffd\055\ufffd\056\ufffd\057\006\064\ufffd" +
    "\070\ufffd\001\002\000\004\014\u0147\001\002\000\006\002" +
    "\uffe9\057\uffe9\001\002\000\004\023\u0149\001\002\000\006" +
    "\015\u014d\054\u014a\001\002\000\004\015\u015a\001\002\000" +
    "\010\040\ufffd\057\006\060\ufffd\001\002\000\010\040\uff56" +
    "\057\uff56\060\uff56\001\002\000\006\016\uff4e\053\u014f\001" +
    "\002\000\004\016\u015d\001\002\000\004\004\u0154\001\002" +
    "\000\006\005\uff4c\016\uff4c\001\002\000\006\005\u0152\016" +
    "\uff4f\001\002\000\004\053\u014f\001\002\000\006\005\uff4d" +
    "\016\uff4d\001\002\000\006\015\u014d\054\u0155\001\002\000" +
    "\012\005\uff52\015\u015a\016\uff52\026\uff52\001\002\000\010" +
    "\005\uff4b\016\uff4b\026\u0159\001\002\000\010\005\uff51\016" +
    "\uff51\026\uff51\001\002\000\010\005\uff53\016\uff53\026\uff53" +
    "\001\002\000\010\005\uff50\016\uff50\026\uff50\001\002\000" +
    "\006\016\uff4e\053\u014f\001\002\000\004\016\u015c\001\002" +
    "\000\016\005\uff55\016\uff55\026\uff55\040\uff55\057\uff55\060" +
    "\uff55\001\002\000\016\005\uff54\016\uff54\026\uff54\040\uff54" +
    "\057\uff54\060\uff54\001\002\000\006\040\u015f\060\u0160\001" +
    "\002\000\006\015\u014d\054\u014a\001\002\000\006\002\uff58" +
    "\057\uff58\001\002\000\010\040\uff57\057\uff57\060\uff57\001" +
    "\002\000\004\015\u0123\001\002\000\010\002\uffca\014\uffca" +
    "\057\uffca\001\002\000\004\011\u0165\001\002\000\006\012" +
    "\uffe7\053\111\001\002\000\004\012\u0167\001\002\000\004" +
    "\013\u0168\001\002\000\024\014\ufffd\015\ufffd\052\ufffd\053" +
    "\ufffd\054\ufffd\057\006\066\ufffd\070\ufffd\071\ufffd\001\002" +
    "\000\004\014\u016a\001\002\000\006\002\uffea\057\uffea\001" +
    "\002\000\034\002\ufffe\015\040\052\013\053\016\054\032" +
    "\057\140\061\010\062\020\063\033\067\030\070\023\071" +
    "\036\074\043\001\002\000\004\002\ufffb\001\002\000\006" +
    "\002\ufff9\057\ufff9\001\002\000\006\002\ufff1\057\ufff1\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u016d\000\010\003\003\004\006\005\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\006\036\007\011\010\025\011\014\015\016\016\033\031" +
    "\041\034\010\035\023\036\043\040\020\043\013\046\040" +
    "\047\026\050\034\053\024\071\030\073\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\u016a\004\u016b" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\060\026\325\033\331\034\051\036\315\037\323\040" +
    "\057\041\101\042\103\044\061\046\327\047\066\050\073" +
    "\053\063\056\335\057\321\061\320\062\064\063\330\064" +
    "\322\065\102\066\052\070\334\106\077\001\001\000\002" +
    "\001\001\000\046\033\225\034\051\036\104\037\074\040" +
    "\057\041\101\042\103\044\061\046\075\047\066\050\073" +
    "\051\170\052\171\053\063\062\064\065\102\066\052\106" +
    "\077\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\022\251\023\244\024\246\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\033\236\034\051\036\104\037\074" +
    "\040\057\041\101\042\103\044\061\046\075\047\066\050" +
    "\073\053\063\062\064\065\102\066\052\106\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\033\053\034" +
    "\051\036\104\037\074\040\057\041\101\042\103\044\061" +
    "\046\075\047\066\050\073\053\063\062\064\064\100\065" +
    "\102\066\052\106\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\033\216" +
    "\034\051\036\104\037\074\040\057\041\101\042\103\044" +
    "\061\046\075\047\066\050\073\053\063\062\217\065\102" +
    "\066\052\106\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\033\200\034\051\036\104\037\074" +
    "\040\057\041\101\042\103\044\061\046\075\047\066\050" +
    "\073\053\063\062\064\065\102\066\052\106\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\033\167\034\051\036\104\037\074\040\057\041\101" +
    "\042\103\044\061\046\075\047\066\050\073\051\170\052" +
    "\171\053\063\062\064\065\102\066\052\106\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\107\013\106\014\112\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\113\013\106" +
    "\014\112\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\033\116\034\051\036\104\037\074" +
    "\040\057\041\101\042\103\044\061\046\075\047\066\050" +
    "\073\053\063\062\064\065\102\066\052\106\077\001\001" +
    "\000\002\001\001\000\010\003\003\004\120\027\121\001" +
    "\001\000\032\030\131\032\123\034\010\035\127\036\043" +
    "\040\020\043\124\045\126\046\133\047\130\050\132\053" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\033\140\034\051\036" +
    "\104\037\074\040\057\041\101\042\103\044\061\046\075" +
    "\047\066\050\073\053\063\062\064\064\141\065\102\066" +
    "\052\106\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\134\004\135\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\032\136\034\010" +
    "\035\127\036\043\040\020\043\124\045\126\046\133\047" +
    "\130\050\132\053\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\033\151\034\051\036\104\037\074\040\057" +
    "\041\101\042\103\044\061\046\075\047\066\050\073\053" +
    "\063\062\064\065\102\066\052\106\077\001\001\000\042" +
    "\033\150\034\051\036\104\037\074\040\057\041\101\042" +
    "\103\044\061\046\075\047\066\050\073\053\063\062\064" +
    "\065\102\066\052\106\077\001\001\000\042\033\147\034" +
    "\051\036\104\037\074\040\057\041\101\042\103\044\061" +
    "\046\075\047\066\050\073\053\063\062\064\065\102\066" +
    "\052\106\077\001\001\000\042\033\146\034\051\036\104" +
    "\037\074\040\057\041\101\042\103\044\061\046\075\047" +
    "\066\050\073\053\063\062\064\065\102\066\052\106\077" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\033\153\034\051\036\104" +
    "\037\074\040\057\041\101\042\103\044\061\046\075\047" +
    "\066\050\073\053\063\062\064\065\102\066\052\106\077" +
    "\001\001\000\002\001\001\000\042\033\155\034\051\036" +
    "\104\037\074\040\057\041\101\042\103\044\061\046\075" +
    "\047\066\050\073\053\063\062\064\065\102\066\052\106" +
    "\077\001\001\000\002\001\001\000\010\003\003\004\120" +
    "\027\157\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\162\001\001\000\002\001\001\000\042\033\164" +
    "\034\051\036\104\037\074\040\057\041\101\042\103\044" +
    "\061\046\075\047\066\050\073\053\063\062\064\065\102" +
    "\066\052\106\077\001\001\000\002\001\001\000\042\033" +
    "\166\034\051\036\104\037\074\040\057\041\101\042\103" +
    "\044\061\046\075\047\066\050\073\053\063\062\064\065" +
    "\102\066\052\106\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\033" +
    "\173\034\051\036\104\037\074\040\057\041\101\042\103" +
    "\044\061\046\075\047\066\050\073\053\063\062\064\065" +
    "\102\066\052\106\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\033\176\034\051\036\104\037\074\040" +
    "\057\041\101\042\103\044\061\046\075\047\066\050\073" +
    "\053\063\062\064\065\102\066\052\106\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\003\004\202\001\001\000\004\067\203\001\001\000" +
    "\006\003\003\004\210\001\001\000\002\001\001\000\042" +
    "\033\206\034\051\036\104\037\074\040\057\041\101\042" +
    "\103\044\061\046\075\047\066\050\073\053\063\062\064" +
    "\065\102\066\052\106\077\001\001\000\002\001\001\000" +
    "\006\003\003\004\212\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\033" +
    "\215\034\051\036\104\037\074\040\057\041\101\042\103" +
    "\044\061\046\075\047\066\050\073\053\063\062\064\065" +
    "\102\066\052\106\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\033" +
    "\234\034\051\036\104\037\074\040\057\041\101\042\103" +
    "\044\061\046\075\047\066\050\073\053\063\062\064\065" +
    "\102\066\052\106\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\033\225\034\051\036\104\037\074\040" +
    "\057\041\101\042\103\044\061\046\075\047\066\050\073" +
    "\051\226\052\171\053\063\062\064\065\102\066\052\106" +
    "\077\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\072\231\001\001\000\044\033\225\034\051\036\104\037" +
    "\074\040\057\041\101\042\103\044\061\046\075\047\066" +
    "\050\073\052\232\053\063\062\064\065\102\066\052\106" +
    "\077\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\033\241\034\051\036\104" +
    "\037\074\040\057\041\101\042\103\044\061\046\075\047" +
    "\066\050\073\053\063\062\064\065\102\066\052\106\077" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\022\252\023\244\024\246\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\017\260\020\261\021\257\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\263\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\267" +
    "\001\001\000\004\072\270\001\001\000\002\001\001\000" +
    "\010\017\272\020\261\021\257\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\275\001\001\000\004\072" +
    "\276\001\001\000\002\001\001\000\004\025\300\001\001" +
    "\000\002\001\001\000\010\017\302\020\261\021\257\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\017\305" +
    "\020\261\021\257\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\312" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\033\331\034\051\036\315" +
    "\037\323\040\057\041\101\042\103\044\061\046\327\047" +
    "\066\050\073\053\063\061\u013b\062\217\064\322\065\102" +
    "\066\052\106\077\001\001\000\046\033\331\034\051\036" +
    "\315\037\323\040\057\041\101\042\103\044\061\046\327" +
    "\047\066\050\073\053\063\061\u013a\062\064\064\322\065" +
    "\102\066\052\106\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\003\004\u012a\054\u012b\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\033\331\034\051\036\315\037\323\040\057" +
    "\041\101\042\103\044\061\046\327\047\066\050\073\053" +
    "\063\061\375\062\064\064\322\065\102\066\052\106\077" +
    "\001\001\000\002\001\001\000\004\060\357\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\033\225\034\051\036\104\037\074\040\057\041\101\042" +
    "\103\044\061\046\075\047\066\050\073\051\341\052\171" +
    "\053\063\062\064\065\102\066\052\106\077\001\001\000" +
    "\002\001\001\000\004\072\343\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\033\225\034" +
    "\051\036\104\037\074\040\057\041\101\042\103\044\061" +
    "\046\075\047\066\050\073\051\347\052\171\053\063\062" +
    "\064\065\102\066\052\106\077\001\001\000\002\001\001" +
    "\000\004\072\351\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\003\003\004\120\027\354\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\033\331\034\051\036" +
    "\315\037\323\040\057\041\101\042\103\044\061\046\327" +
    "\047\066\050\073\053\063\061\363\062\064\064\322\065" +
    "\102\066\052\106\077\001\001\000\002\001\001\000\010" +
    "\003\003\004\120\027\361\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\033\331\034\051" +
    "\036\315\037\323\040\057\041\101\042\103\044\061\046" +
    "\327\047\066\050\073\053\063\061\367\062\064\064\322" +
    "\065\102\066\052\106\077\001\001\000\046\033\331\034" +
    "\051\036\315\037\323\040\057\041\101\042\103\044\061" +
    "\046\327\047\066\050\073\053\063\061\366\062\064\064" +
    "\322\065\102\066\052\106\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\033\225\034" +
    "\051\036\104\037\074\040\057\041\101\042\103\044\061" +
    "\046\075\047\066\050\073\051\372\052\171\053\063\062" +
    "\064\065\102\066\052\106\077\001\001\000\002\001\001" +
    "\000\004\072\374\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\033\u0115\034\051\036\104\037\074\040\057" +
    "\041\101\042\103\044\061\046\075\047\066\050\073\053" +
    "\063\062\064\065\102\066\052\106\077\001\001\000\042" +
    "\033\u0114\034\051\036\104\037\074\040\057\041\101\042" +
    "\103\044\061\046\075\047\066\050\073\053\063\062\064" +
    "\065\102\066\052\106\077\001\001\000\042\033\u0113\034" +
    "\051\036\104\037\074\040\057\041\101\042\103\044\061" +
    "\046\075\047\066\050\073\053\063\062\064\065\102\066" +
    "\052\106\077\001\001\000\042\033\u0112\034\051\036\104" +
    "\037\074\040\057\041\101\042\103\044\061\046\075\047" +
    "\066\050\073\053\063\062\064\065\102\066\052\106\077" +
    "\001\001\000\042\033\u0111\034\051\036\104\037\074\040" +
    "\057\041\101\042\103\044\061\046\075\047\066\050\073" +
    "\053\063\062\064\065\102\066\052\106\077\001\001\000" +
    "\006\046\u0109\103\u0107\001\001\000\042\033\u0105\034\051" +
    "\036\104\037\074\040\057\041\101\042\103\044\061\046" +
    "\075\047\066\050\073\053\063\062\064\065\102\066\052" +
    "\106\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\033\331\034\051\036\315\037\323\040\057\041\101\042" +
    "\103\044\061\046\327\047\066\050\073\053\063\061\u010c" +
    "\062\064\064\322\065\102\066\052\104\u010d\105\u010b\106" +
    "\077\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\033\331\034\051\036" +
    "\315\037\323\040\057\041\101\042\103\044\061\046\327" +
    "\047\066\050\073\053\063\061\u0110\062\064\064\322\065" +
    "\102\066\052\106\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\033\225\034\051\036\104" +
    "\037\074\040\057\041\101\042\103\044\061\046\075\047" +
    "\066\050\073\051\u0117\052\171\053\063\062\064\065\102" +
    "\066\052\106\077\001\001\000\002\001\001\000\004\070" +
    "\u0119\001\001\000\004\060\u011b\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\003\003\004\120\027\u011d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\040\u0121\065\u0123\001\001\000\002\001\001\000" +
    "\042\033\u0126\034\051\036\104\037\074\040\057\041\101" +
    "\042\103\044\061\046\075\047\066\050\073\053\063\062" +
    "\064\065\102\066\052\106\077\001\001\000\002\001\001" +
    "\000\046\033\331\034\051\036\315\037\323\040\057\041" +
    "\101\042\103\044\061\046\327\047\066\050\073\053\063" +
    "\061\u0125\062\064\064\322\065\102\066\052\106\077\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\033\331" +
    "\034\051\036\315\037\323\040\057\041\101\042\103\044" +
    "\061\046\327\047\066\050\073\053\063\061\u0128\062\064" +
    "\064\322\065\102\066\052\106\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\062\026\325\033\331\034\051" +
    "\036\315\037\323\040\057\041\101\042\103\044\061\046" +
    "\327\047\066\050\073\053\063\055\u0132\056\u0133\057\321" +
    "\061\320\062\064\063\330\064\322\065\102\066\052\070" +
    "\334\106\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\003\003\004\120\027\u012f\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\u0134\004\u0135\001\001\000\002\001\001\000" +
    "\060\026\325\033\331\034\051\036\315\037\323\040\057" +
    "\041\101\042\103\044\061\046\327\047\066\050\073\053" +
    "\063\056\u0136\057\321\061\320\062\064\063\330\064\322" +
    "\065\102\066\052\070\334\106\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\003\003\004\120\027\u0138" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\033\u013e" +
    "\034\051\036\315\037\323\040\057\041\101\042\103\044" +
    "\061\046\327\047\066\050\073\053\063\061\u013f\062\064" +
    "\064\322\065\102\066\052\106\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\u0142" +
    "\013\106\014\112\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\003\003\004\u012a\054\u0145\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\074" +
    "\u014a\075\u014b\001\001\000\002\001\001\000\006\003\003" +
    "\004\u015d\001\001\000\002\001\001\000\010\100\u014d\101" +
    "\u0150\102\u014f\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\102\u0152\001" +
    "\001\000\002\001\001\000\010\075\u0157\076\u0155\077\u0156" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\100\u015a" +
    "\101\u0150\102\u014f\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\075\u0160" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\065" +
    "\u0162\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\u0165\013\106\014\112\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\003\004\120\027\u0168\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\010\u016c\011" +
    "\014\015\016\016\033\031\041\034\010\035\023\036\043" +
    "\040\020\043\013\046\040\047\026\050\034\053\024\071" +
    "\030\073\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$IniParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$IniParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$IniParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	public Types types;
	public PrintStream out = System.out;
	public PrintStream err = System.err;
	private int userTypeIndex = 1;

	public int nextUserTypeIndex() {
		return userTypeIndex++;
	}

	//public Map<String,Executable> parsedFunctionMap=new HashMap<String,Executable>();
	//public List<Executable> parsedFunctionList=new ArrayList<Executable>();
	//public List<Binding> parsedBindingList=new ArrayList<Binding>();
	//public List<AtBinding> parsedAtBindingList=new ArrayList<AtBinding>();
	//public List<Import> parsedImportList=new ArrayList<Import>();
	//public List<AstNode> parsedAst =  new ArrayList<AstNode>();
	public List<AstNode> topLevels =  new ArrayList<AstNode>();

	public IniEnv env;
	public List<Executable> builtInExecutables;

	private List<Executable> createBuiltInExecutables() {
		return Arrays.asList( //
			new ClearFunction(this), //
			new CopyFunction(this), //
			new ErrorFunction(this), //
			new FirstFunction(this), //
			new KeyFunction(this), //
			new KillAt(this), //
			new PrintFunction(this), //
			new PrintlnFunction(this), //
			new ProduceFunction(this), //
			new ReadKeyboardFunction(this), //
			new RestFunction(this), //
			new SizeFunction(this), //
			new SleepFunction(this), //
			new SwapFunction(this), //
			new TimeFunction(this), //
			new ToIntFunction(this), //
			new ToJsonFunction(this), //
			new ToLongFunction(this), //
			new ToByteFunction(this), //
			new ToCharFunction(this), //
			new ToFloatFunction(this), //
			new ToDoubleFunction(this), //
			new ToStringFunction(this), //
			new WaitFunction(this), //
			// ========================
			// will be removed from default builtins and accessed through bindings
			new StartWebServiceFunction(this), //
			new StopWebServiceFunction(this)
		);
	}
	
	public static IniParser createParserForFile(IniEnv env, IniParser parent, String fileName) throws java.io.FileNotFoundException {
      IniScanner scanner= new IniScanner(new java.io.FileReader(fileName));
      scanner.setFileName(fileName);
      IniParser parser= new IniParser(scanner);
      if(env==null) {
      	env = new IniEnv();
      }
      parser.env = env;
      if(parent != null) {
	      parser.types = parent.types;
	      parser.builtInExecutables = parser.builtInExecutables;
	  } else {
	      parser.types = new Types(parser);
	      parser.builtInExecutables = parser.createBuiltInExecutables();
	  }
      return parser;
	}

	public static IniParser createParserForCode(IniEnv env, IniParser parent, String code) throws Exception {
      IniScanner scanner= new IniScanner(new java.io.StringReader(code));
      scanner.setFileName("<none>");
      IniParser parser= new IniParser(scanner);
      if(env==null) {
      	env = new IniEnv();
      }
      parser.env = env;
      if(parent != null) {
	      parser.types = parent.types;
	      parser.builtInExecutables = parser.builtInExecutables;
	  } else {
	      parser.types = new Types(parser);
	      parser.builtInExecutables = parser.createBuiltInExecutables();
	  }
      return parser;
	}

	public List<SyntaxError> errors = new ArrayList<SyntaxError>();
	
  public void syntax_error(java_cup.runtime.Symbol current) {
    //errors.add(new SyntaxError("syntax error: '"+current.value + "' is not expected", at " + (current.left+1)+"("+(current.right+1)+")" );
    errors.add(new SyntaxError((Token)current.value, "'"+current.value + "' is not expected"));
  }
  
  	public void printErrors(PrintStream out) {
		for (SyntaxError error : errors) {
			out.println(error.toString());
		}
	}

	public boolean hasErrors() {
		return !errors.isEmpty();
	}
  
  
  

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$IniParser$actions {
  private final IniParser parser;

  /** Constructor */
  CUP$IniParser$actions(IniParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$IniParser$do_action(
    int                        CUP$IniParser$act_num,
    java_cup.runtime.lr_parser CUP$IniParser$parser,
    java.util.Stack            CUP$IniParser$stack,
    int                        CUP$IniParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$IniParser$result;

      /* select the action based on the action number */
      switch (CUP$IniParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // field ::= IDENTIFIER COL list_constructor 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = new Field(parser,(Token)i,i.toString(),(Constructor)c);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(64/*field*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // field_list ::= field 
            {
              Object RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List l=new ArrayList();
		l.add(f);
		RESULT=l;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(63/*field_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // field_list ::= field_list COMMA field 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=(List)l;
		list.add(f);
		RESULT=list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(63/*field_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // field_list_opt ::= 
            {
              Object RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(62/*field_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // field_list_opt ::= field_list 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = l; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(62/*field_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // list_constructor ::= list_constructor MULT 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 
		RESULT = new Constructor(parser,(Token)m,(Constructor)c);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(60/*list_constructor*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // list_constructor ::= constructor_or_type 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = c; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(60/*list_constructor*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // constructor_or_type ::= TIDENTIFIER 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = new Constructor(parser,(Token)i,i.toString(),null);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(61/*constructor_or_type*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // constructor_or_type ::= constructor 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = c;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(61/*constructor_or_type*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // constructor ::= LSPAREN field_list_opt RSPAREN 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
		RESULT = new Constructor(parser,(Token)i,null,(List)l);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(59/*constructor*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // constructor ::= TIDENTIFIER LSPAREN field_list_opt RSPAREN 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
		RESULT = new Constructor(parser,(Token)i,i.toString(),(List)l);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(59/*constructor*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // constructor_list ::= constructor 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=new ArrayList();
		list.add(c);
		RESULT=list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(58/*constructor_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // constructor_list ::= constructor_list lf_opt TUBE constructor 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=(List)l;
		list.add(c);
		RESULT=list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(58/*constructor_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // usertype ::= TYPE TIDENTIFIER ASSIGN constructor_list lf_opt END 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		
		UserType type = new UserType(parser,(Token)t,i.toString(),(List)l);
		// parser.parsedTypes.add(type);
		RESULT = type;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(57/*usertype*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // set_decl ::= LSPAREN expr DOTDOT expr RSPAREN 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int lbleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object lb = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int ubleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int ubright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object ub = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
	RESULT = new SetDeclaration(parser,(Token)l,(Expression)lb,(Expression)ub);

              CUP$IniParser$result = new java_cup.runtime.Symbol(51/*set_decl*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // set_logical_expr ::= var_list OF set_var_access TUBE logical_expr 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int ofleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int ofright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object of = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = new SetExpression(parser,(Token)of,(List)l,(Expression)s,(Expression)e);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(49/*set_logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // set_logical_expr ::= var_list OF set_decl TUBE logical_expr 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int ofleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int ofright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object of = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = new SetExpression(parser,(Token)of,(List)l,(Expression)s,(Expression)e);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(49/*set_logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // guard ::= set_logical_expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(45/*guard*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // guard ::= logical_expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(45/*guard*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // ret_statement ::= RETURN 
            {
              Object RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = new ReturnStatement(parser,(Token)r,null); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(35/*ret_statement*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // ret_statement ::= RETURN boolean_literal 
            {
              Object RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = new ReturnStatement(parser,(Token)r,(Expression)e); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(35/*ret_statement*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // ret_statement ::= RETURN expr 
            {
              Object RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = new ReturnStatement(parser,(Token)r,(Expression)e); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(35/*ret_statement*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // logical_expr_opt ::= 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(46/*logical_expr_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // logical_expr_opt ::= ANDAND logical_expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(46/*logical_expr_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // rule ::= guard LCPAREN statement_list_opt RCPAREN 
            {
              Object RESULT = null;
		int gleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
		RESULT = new Rule(parser,((AstNode)g).token(),null,(Expression)g,(Sequence)l, null);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(44/*rule*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // rule ::= DOLLAR LPAREN arg_list_opt RPAREN at_expr logical_expr_opt LCPAREN statement_list_opt RCPAREN 
            {
              Object RESULT = null;
		int elleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).value;
		int atleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object at = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
		RESULT = new Rule(parser,((AstNode)at).token(),(AtPredicate)at,(Expression)g,(Sequence)l, (List)el);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(44/*rule*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // rule ::= at_expr logical_expr_opt LCPAREN statement_list_opt RCPAREN 
            {
              Object RESULT = null;
		int atleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object at = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
		RESULT = new Rule(parser,((AstNode)at).token(),(AtPredicate)at,(Expression)g,(Sequence)l, null);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(44/*rule*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // arg_list ::= expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=new ArrayList();
		list.add(e);
		RESULT=list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(40/*arg_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // arg_list ::= arg_list COMMA expr 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=(List)l;
		list.add(e);
		RESULT=list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(40/*arg_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // arg_list_opt ::= 
            {
              Object RESULT = null;
		 RESULT=new ArrayList(); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(39/*arg_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // arg_list_opt ::= arg_list 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=l; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(39/*arg_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // dot_invocation ::= no_paren_expr INVDOT IDENTIFIER LPAREN arg_list_opt RPAREN annotations_opt 
            {
              Object RESULT = null;
		int targetleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).left;
		int targetright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).right;
		Object target = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List args = (List)l;
		args.add(0, target);
		Invocation inv = new Invocation(parser,(Token)i,i.toString(),args);
		inv.annotations = (List)a;
		RESULT = inv;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(37/*dot_invocation*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // invocation ::= IDENTIFIER LPAREN arg_list_opt RPAREN annotations_opt 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		Invocation inv = new Invocation(parser,(Token)i,i.toString(),(List)l);
		inv.annotations = (List)a;
		RESULT = inv;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(36/*invocation*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // pre_post_op ::= var_access MINUSMINUS 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new UnaryOperator(parser,(Token)op,UnaryOperator.Kind.POST_DEC,(Expression)e); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(38/*pre_post_op*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // pre_post_op ::= var_access PLUSPLUS 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new UnaryOperator(parser,(Token)op,UnaryOperator.Kind.POST_INC,(Expression)e); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(38/*pre_post_op*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // at_expr ::= AT IDENTIFIER LPAREN arg_list_opt RPAREN annotations_opt 
            {
              Object RESULT = null;
		int atleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).right;
		Object at = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 
	RESULT = new AtPredicate(parser,(Token)at,name.toString(),(List)a,(List)rp, null);

              CUP$IniParser$result = new java_cup.runtime.Symbol(54/*at_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // at_expr ::= IDENTIFIER COL AT IDENTIFIER LPAREN arg_list_opt RPAREN annotations_opt 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).value;
		int atleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).right;
		Object at = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 
	RESULT = new AtPredicate(parser,(Token)at,name.toString(),(List)a,(List)rp, id.toString());

              CUP$IniParser$result = new java_cup.runtime.Symbol(54/*at_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // annotations_opt ::= 
            {
              Object RESULT = null;
		
	RESULT = (List)null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(56/*annotations_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // annotations_opt ::= LSPAREN arg_list RSPAREN 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
	RESULT = (List)l;

              CUP$IniParser$result = new java_cup.runtime.Symbol(56/*annotations_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // field_match_expr_list ::= logical_expr 
            {
              Object RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List l=new ArrayList();
		l.add(f);
		RESULT=l;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(67/*field_match_expr_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // field_match_expr_list ::= field_match_expr_list COMMA logical_expr 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=(List)l;
		list.add(f);
		RESULT=list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(67/*field_match_expr_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // field_match_expr_list_opt ::= 
            {
              Object RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(66/*field_match_expr_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // field_match_expr_list_opt ::= field_match_expr_list 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = l; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(66/*field_match_expr_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // case_expr ::= CASE rule ELSE LCPAREN statement_list_opt RCPAREN 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
		RESULT = new CaseStatement(parser,(Token)c,(List<Rule>)(List)Arrays.asList(r),(Sequence)s); 
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(33/*case_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // case_expr ::= CASE rule 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = new CaseStatement(parser,(Token)c,(List<Rule>)(List)Arrays.asList(r),null); 
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(33/*case_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // case_expr ::= CASE LCPAREN rule_list_opt RCPAREN 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
		RESULT = new CaseStatement(parser,(Token)c, (List)l,null); 
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(33/*case_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // case_expr ::= CASE LCPAREN rule_list_opt DEFAULT LCPAREN statement_list_opt RCPAREN RCPAREN 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		
		RESULT = new CaseStatement(parser,(Token)c, (List)l,(Sequence)s); 
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(33/*case_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // logical_expr ::= LPAREN logical_expr RPAREN 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(47/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // logical_expr ::= expr MATCHES constructor_match_expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.MATCHES,(Expression)e1,(ConstructorMatchExpression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(47/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // logical_expr ::= expr MATCHES invocation 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.MATCHES,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(47/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // logical_expr ::= expr GTE expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.GTE,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(47/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // logical_expr ::= expr GT expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.GT,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(47/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // logical_expr ::= expr LTE expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.LTE,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(47/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // logical_expr ::= expr LT expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.LT,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(47/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // logical_expr ::= expr NOTEQUALS expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.NOTEQUALS,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(47/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // logical_expr ::= expr EQUALS expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.EQUALS,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(47/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // logical_expr ::= QUESTION logical_expr 
            {
              Object RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new UnaryOperator(parser,(Token)op,UnaryOperator.Kind.OPT,(Expression)e); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(47/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // logical_expr ::= NOT logical_expr 
            {
              Object RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new UnaryOperator(parser,(Token)op,UnaryOperator.Kind.NOT,(Expression)e); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(47/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // logical_expr ::= logical_expr OROR logical_expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.OR,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(47/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // logical_expr ::= logical_expr ANDAND logical_expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.AND,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(47/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // logical_expr ::= invocation 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(47/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // logical_expr ::= sync_var_access 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(47/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // logical_expr ::= var_access ASSIGN logical_expr 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = new Assignment(parser,(Token)a,(VariableAccess)v,(Expression)e);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(47/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // logical_expr ::= var_access 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(47/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // logical_expr ::= boolean_literal 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(47/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // algebraic_expr ::= LPAREN algebraic_expr RPAREN 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(48/*algebraic_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // algebraic_expr ::= expr DIV expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.DIV,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(48/*algebraic_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // algebraic_expr ::= expr MULT expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.MULT,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(48/*algebraic_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // algebraic_expr ::= MINUS expr 
            {
              Object RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new UnaryOperator(parser,(Token)op,UnaryOperator.Kind.MINUS,(Expression)e); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(48/*algebraic_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // algebraic_expr ::= expr MINUS expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.MINUS,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(48/*algebraic_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // algebraic_expr ::= expr PLUS expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.PLUS,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(48/*algebraic_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // algebraic_expr ::= pre_post_op 
            {
              Object RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=op; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(48/*algebraic_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // algebraic_expr ::= INT 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new NumberLiteral(parser,(Token)e,Integer.parseInt(e.toString())); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(48/*algebraic_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // algebraic_expr ::= NUM 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new NumberLiteral(parser,(Token)e,Double.parseDouble(e.toString())); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(48/*algebraic_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // list_concat_expr ::= no_paren_expr AND expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.CONCAT,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(68/*list_concat_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // lambda_expr ::= LAMBDA param_list_opt IMPLIES expr 
            {
              Object RESULT = null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int defleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object def = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
	Function f = new Function(parser, (Token)def, null, (List)vars, new Sequence(s));	
	f.oneExpressionLambda = true;
	RESULT = f;

              CUP$IniParser$result = new java_cup.runtime.Symbol(34/*lambda_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // lambda_expr ::= LAMBDA LPAREN param_list_opt RPAREN IMPLIES expr 
            {
              Object RESULT = null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int defleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object def = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
	Function f = new Function(parser, (Token)def, null, (List)vars, new Sequence(s));
	f.oneExpressionLambda = true;
	RESULT = f;

              CUP$IniParser$result = new java_cup.runtime.Symbol(34/*lambda_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // lambda_expr ::= LAMBDA param_list_opt IMPLIES LCPAREN statement_list_opt RCPAREN 
            {
              Object RESULT = null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int defleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object def = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object statements = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
	RESULT = new Function(parser, (Token)def, null, (List)vars, (Sequence)statements);	

              CUP$IniParser$result = new java_cup.runtime.Symbol(34/*lambda_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // lambda_expr ::= LAMBDA LPAREN param_list_opt RPAREN IMPLIES LCPAREN statement_list_opt RCPAREN 
            {
              Object RESULT = null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).value;
		int defleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object def = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object statements = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
	RESULT = new Function(parser, (Token)def, null, (List)vars, (Sequence)statements);	

              CUP$IniParser$result = new java_cup.runtime.Symbol(34/*lambda_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expr ::= lambda_expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(25/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expr ::= list_concat_expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(25/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expr ::= set_var_access 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(25/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expr ::= set_decl 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(25/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expr ::= constructor_expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(25/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expr ::= list_expr 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=l; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(25/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expr ::= string_expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(25/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expr ::= algebraic_expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(25/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expr ::= CHAR 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = new CharLiteral(parser,(Token)c,c.toString().charAt(0)); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(25/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expr ::= dot_invocation 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(25/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expr ::= invocation 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(25/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expr ::= THIS 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = new ThisLiteral(parser,(Token)t); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(25/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expr ::= sync_var_access 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(25/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expr ::= var_access ASSIGN expr 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = new Assignment(parser,(Token)a,(VariableAccess)v,(Expression)e);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(25/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expr ::= var_access 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(25/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // no_paren_expr ::= list_expr 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=l; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(26/*no_paren_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // no_paren_expr ::= CHAR 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = new CharLiteral(parser,(Token)c,c.toString().charAt(0)); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(26/*no_paren_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // no_paren_expr ::= dot_invocation 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(26/*no_paren_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // no_paren_expr ::= invocation 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(26/*no_paren_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // no_paren_expr ::= THIS 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = new ThisLiteral(parser,(Token)t); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(26/*no_paren_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // no_paren_expr ::= var_access 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(26/*no_paren_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // statement ::= ret_statement 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(24/*statement*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // statement ::= case_expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(24/*statement*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // statement ::= dot_invocation 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(24/*statement*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // statement ::= invocation 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(24/*statement*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // statement ::= assignment_expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(24/*statement*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // statement ::= pre_post_op 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(24/*statement*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // top_level_statement ::= case_expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(23/*top_level_statement*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // top_level_statement ::= dot_invocation 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(23/*top_level_statement*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // top_level_statement ::= invocation 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(23/*top_level_statement*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // top_level_statement ::= assignment_expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(23/*top_level_statement*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // top_level_statement ::= pre_post_op 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(23/*top_level_statement*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // assignment_list ::= IDENTIFIER ASSIGN expr 
            {
              Object RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=new ArrayList();
		list.add(new Assignment(parser,(Token)f,new Variable(parser,(Token)f,f.toString()),(Expression)e));
		RESULT=list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(53/*assignment_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // assignment_list ::= assignment_list COMMA lf_opt IDENTIFIER ASSIGN expr 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=(List)l;
		list.add(new Assignment(parser,(Token)f,new Variable(parser,(Token)f,f.toString()),(Expression)e));
		RESULT=list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(53/*assignment_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // constructor_match_expr ::= TIDENTIFIER 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = new ConstructorMatchExpression(parser,(Token)s,s.toString(),null);	
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(65/*constructor_match_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // constructor_match_expr ::= TIDENTIFIER LSPAREN field_match_expr_list_opt RSPAREN 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
		RESULT = new ConstructorMatchExpression(parser,(Token)s,s.toString(),(List)l);	
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(65/*constructor_match_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // constructor_expr ::= TIDENTIFIER LSPAREN lf_opt assignment_list lf_opt RSPAREN 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		
		RESULT = new SetConstructor(parser,(Token)s,s.toString(),(List)l);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(52/*constructor_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // list_expr ::= LSPAREN arg_list_opt RSPAREN 
            {
              Object RESULT = null;
		int openleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int openright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object open = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int closeleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int closeright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object close = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = new ListExpression(parser,(Token)open,(List)l);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(41/*list_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // single_string ::= STRING 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new StringLiteral(parser,(Token)s,s.toString()); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(31/*single_string*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // string_expr ::= single_string PLUS expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.PLUS,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(32/*string_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // string_expr ::= single_string 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=s; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(32/*string_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // var_access ::= var_access DOT IDENTIFIER 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = new FieldAccess(parser,(Token)t,(VariableAccess)v,i.toString()); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(28/*var_access*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // var_access ::= var_access LSPAREN expr DOTDOT expr RSPAREN 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int minleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int minright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object min = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int maxleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int maxright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object max = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		 RESULT = new SubArrayAccess(parser,(Token)t,(VariableAccess)v,(Expression)min,(Expression)max); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(28/*var_access*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // var_access ::= var_access LSPAREN expr RSPAREN 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		 RESULT = new ArrayAccess(parser,(Token)t,(VariableAccess)v,(Expression)e); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(28/*var_access*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // var_access ::= IDENTIFIER 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = new Variable(parser,(Token)v,v.toString()); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(28/*var_access*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // boolean_literal ::= FALSE 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BooleanLiteral(parser,(Token)e,false); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(50/*boolean_literal*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // boolean_literal ::= TRUE 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BooleanLiteral(parser,(Token)e,true); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(50/*boolean_literal*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // set_var_access ::= TIDENTIFIER 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = new Variable(parser,(Token)v,v.toString()); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(30/*set_var_access*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // assignment_expr ::= set_var_access ASSIGN set_decl 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 
		RESULT = new Assignment(parser,(Token)a,(VariableAccess)v,(Expression)e);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(27/*assignment_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // assignment_expr ::= var_access ASSIGN boolean_literal 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 
		RESULT = new Assignment(parser,(Token)a,(VariableAccess)v,(Expression)e);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(27/*assignment_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // assignment_expr ::= var_access ASSIGN expr 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = new Assignment(parser,(Token)a,(VariableAccess)v,(Expression)e);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(27/*assignment_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // type_decl ::= TIDENTIFIER LT TIDENTIFIER 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 
		TypeVariable tv = new TypeVariable(parser,(Token)i,i.toString(), true);
		TypeVariable sv = new TypeVariable(parser,(Token)s,s.toString());
		tv.superType = sv;
		RESULT = tv;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(18/*type_decl*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // type_decl ::= TIDENTIFIER 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = new TypeVariable(parser,(Token)i,i.toString(), true); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(18/*type_decl*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // type_decl_list ::= type_decl 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List l=new ArrayList();
		l.add(t);
		RESULT=l;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(17/*type_decl_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // type_decl_list ::= type_decl_list COMMA type_decl 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=(List)l;
		list.add(t);
		RESULT=list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(17/*type_decl_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // type_decl_list_opt ::= 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(16/*type_decl_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // type_decl_list_opt ::= type_decl_list 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = l; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(16/*type_decl_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // type ::= type MULT 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		 RESULT = new TypeVariable(parser,((TypeVariable)t).token,(TypeVariable)t); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(15/*type*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // type ::= TIDENTIFIER 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = new TypeVariable(parser,(Token)i,i.toString()); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(15/*type*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // type_list ::= type 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List l=new ArrayList();
		l.add(t);
		RESULT=l;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(14/*type_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // type_list ::= type_list COMMA type 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=(List)l;
		list.add(t);
		RESULT=list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(14/*type_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // type_list_opt ::= 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(13/*type_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // type_list_opt ::= type_list 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = l; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(13/*type_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // var_list ::= IDENTIFIER 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List l=new ArrayList();
		l.add(new Variable(parser,(Token)i,i.toString()));
		RESULT=l;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(20/*var_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // var_list ::= var_list COMMA IDENTIFIER 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=(List)l;
		list.add(new Variable(parser,(Token)i,i.toString()));
		RESULT=list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(20/*var_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // rule_list ::= rule 
            {
              Object RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List l=new ArrayList();
		l.add(r);
		RESULT=l;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(43/*rule_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // rule_list ::= rule_list lf rule 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=(List)l;
		list.add(r);
		RESULT = list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(43/*rule_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // rule_list_opt ::= lf_opt 
            {
              Object RESULT = null;
		 RESULT=new ArrayList(); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(42/*rule_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // rule_list_opt ::= lf_opt rule_list lf_opt 
            {
              Object RESULT = null;
		int rlleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int rlright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object rl = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		 RESULT=rl; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(42/*rule_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement_list ::= statement 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		Sequence seq=new Sequence(s);
		RESULT=seq;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(22/*statement_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement_list ::= statement_list lf statement 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		Sequence seq=(Sequence)l;
		seq.last().setNext(s);
		RESULT = seq;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(22/*statement_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement_list_opt ::= lf_opt 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(21/*statement_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement_list_opt ::= lf_opt statement_list lf_opt 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		 RESULT=l; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(21/*statement_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // param ::= IDENTIFIER 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = new Parameter(parser,(Token)i,i.toString());
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(10/*param*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // param ::= IDENTIFIER ASSIGN expr 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = new Parameter(parser,(Token)i,i.toString(),(Expression)e);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(10/*param*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // param_list ::= param 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List l=new ArrayList();
		l.add(p);
		RESULT=l;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(9/*param_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // param_list ::= param_list COMMA param 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=(List)l;
		list.add(p);
		RESULT=list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(9/*param_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // param_list_opt ::= 
            {
              Object RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(8/*param_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // param_list_opt ::= param_list 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = l; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(8/*param_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // function ::= PROCESS IDENTIFIER LPAREN param_list_opt RPAREN LCPAREN rule_list_opt RCPAREN 
            {
              Object RESULT = null;
		int defleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).right;
		Object def = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int rulesleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int rulesright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object rules = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
		//System.out.println("created process "+name);
		Process p = new Process(parser, (Token)def, name.toString(), (List)vars, (List)rules);
		//parser.parsedFunctionMap.put(p.name,p);
		//parser.parsedFunctionList.add(p);
		//p.prettyPrint(System.out);
		RESULT = p;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(7/*function*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // function ::= FUNCTION IDENTIFIER LPAREN param_list_opt RPAREN LCPAREN statement_list_opt RCPAREN 
            {
              Object RESULT = null;
		int defleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).right;
		Object def = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object statements = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
		//System.out.println("created function "+name);
		Function f = new Function(parser, (Token)def, name.toString(), (List)vars, (Sequence)statements);
		//parser.parsedFunctionMap.put(f.name,f);
		//parser.parsedFunctionList.add(f);
		//f.prettyPrint(System.out);
		RESULT = f;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(7/*function*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // at_binding ::= DECLARE AT IDENTIFIER at_binding_conf_type LPAREN type_list_opt RPAREN IMPLIES STRING 
            {
              Object RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-8)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-8)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-8)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).value;
		int ctleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left;
		int ctright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).right;
		Object ct = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).value;
		int ftleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int ftright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object ft = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int rtleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object rt = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object className = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		AtBinding b = new AtBinding(parser, (Token)d, name.toString(), (List)ct, (List) rt, className.toString());
		//parser.parsedAtBindingList.add(b);
		RESULT = b;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(55/*at_binding*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // at_binding_conf_type ::= LSPAREN type_list_opt RSPAREN 
            {
              Object RESULT = null;
		int ctleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int ctright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object ct = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
	RESULT = ct;

              CUP$IniParser$result = new java_cup.runtime.Symbol(19/*at_binding_conf_type*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // at_binding_conf_type ::= 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(19/*at_binding_conf_type*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // binding ::= DECLARE type_decl_list_opt 
            {
              Object RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int typedeclsleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int typedeclsright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object typedecls = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		Binding b = new Binding(parser, (Token)d, (String)null, (List)typedecls, (List)null, (TypeVariable)null, (List)null);
		RESULT = b;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(12/*binding*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // binding ::= DECLARE LPAREN type_decl_list_opt RPAREN IDENTIFIER LPAREN type_list_opt RPAREN IMPLIES type annotations_opt 
            {
              Object RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-10)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-10)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-10)).value;
		int typedeclsleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-8)).left;
		int typedeclsright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-8)).right;
		Object typedecls = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-8)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).value;
		int ftleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left;
		int ftright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).right;
		Object ft = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).value;
		int typesleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int typesright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object types = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int rtypeleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int rtyperight = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object rtype = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		Binding b = new Binding(parser, (Token)d, name.toString(), (List)typedecls, (List)types, (TypeVariable)rtype, (List)a);
		RESULT = b;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(12/*binding*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-10)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // binding ::= DECLARE IDENTIFIER LPAREN type_list_opt RPAREN IMPLIES type annotations_opt 
            {
              Object RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).value;
		int ftleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left;
		int ftright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).right;
		Object ft = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).value;
		int typesleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int typesright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object types = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int rtypeleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int rtyperight = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object rtype = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		Binding b = new Binding(parser, (Token)d, name.toString(), (List)null, (List)types, (TypeVariable)rtype, (List)a);
		//parser.parsedBindingList.add(b);
		RESULT = b;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(12/*binding*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // import_decl ::= IMPORT STRING 
            {
              Object RESULT = null;
		int itokenleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int itokenright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object itoken = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int filePathleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int filePathright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object filePath = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		Import i = new Import(parser, (Token)itoken, filePath.toString());
		try {
			IniParser localParser = IniParser.createParserForFile(parser.env, parser, filePath.toString());
			localParser.parse();
			i.importParser = localParser;
			//parser.parsedFunctionMap.putAll(localParser.parsedFunctionMap);
			//parser.parsedBindingList.addAll(localParser.parsedBindingList);
			//parser.parsedFunctionList.addAll(localParser.parsedFunctionList);
		} catch (java.io.FileNotFoundException e) {
			throw new RuntimeException("Cannot import file '" + i.filePath + "'" 
				+ (i.token != null ? " at " + i.token.getLocation() : ""));
		}
		//parser.parsedImportList.add(i);
		RESULT = i;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(11/*import_decl*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // program_elt ::= top_level_statement 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(6/*program_elt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // program_elt ::= usertype 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(6/*program_elt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // program_elt ::= function 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(6/*program_elt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // program_elt ::= at_binding 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(6/*program_elt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // program_elt ::= binding 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(6/*program_elt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // program_elt ::= import_decl 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(6/*program_elt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // program_elt_list ::= program_elt 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 parser.topLevels.add((AstNode)e); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(5/*program_elt_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // program_elt_list ::= program_elt_list lf program_elt 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 parser.topLevels.add((AstNode)e); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(5/*program_elt_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // program_elt_list_opt ::= 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(4/*program_elt_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // program_elt_list_opt ::= program_elt_list lf_opt 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(4/*program_elt_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ini_program ::= lf_opt program_elt_list_opt 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(3/*ini_program*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lf_opt ::= 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(2/*lf_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lf_opt ::= lf 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(2/*lf_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lf ::= LF 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(1/*lf*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // lf ::= lf LF 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(1/*lf*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini_program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		RESULT = start_val;
              CUP$IniParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$IniParser$parser.done_parsing();
          return CUP$IniParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

