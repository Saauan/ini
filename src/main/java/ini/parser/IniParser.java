
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Mon Sep 23 08:07:31 CEST 2019
//----------------------------------------------------

package ini.parser;

import java.util.*;
import java.io.*;
import ini.*;
import ini.ast.*;
import ini.ast.Process;
import ini.eval.function.*;
import ini.eval.at.*;

/** CUP v0.10k generated parser.
  * @version Mon Sep 23 08:07:31 CEST 2019
  */
public class IniParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public IniParser() {super();}

  /** Constructor which sets the default scanner. */
  public IniParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\267\000\002\002\004\000\002\003\004\000\002\003" +
    "\003\000\002\004\003\000\002\004\002\000\002\005\004" +
    "\000\002\006\004\000\002\006\002\000\002\007\005\000" +
    "\002\007\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\015\004" +
    "\000\002\016\012\000\002\016\015\000\002\016\004\000" +
    "\002\026\011\000\002\026\013\000\002\030\006\000\002" +
    "\027\003\000\002\027\003\000\002\027\002\000\002\025" +
    "\002\000\002\025\005\000\002\100\013\000\002\011\012" +
    "\000\002\011\012\000\002\012\003\000\002\012\002\000" +
    "\002\013\005\000\002\013\003\000\002\014\005\000\002" +
    "\014\003\000\002\032\005\000\002\032\003\000\002\033" +
    "\005\000\002\033\003\000\002\060\005\000\002\060\003" +
    "\000\002\061\005\000\002\061\003\000\002\063\005\000" +
    "\002\063\003\000\002\064\005\000\002\064\003\000\002" +
    "\031\005\000\002\031\003\000\002\017\003\000\002\017" +
    "\002\000\002\020\005\000\002\020\003\000\002\021\003" +
    "\000\002\021\006\000\002\021\004\000\002\022\003\000" +
    "\002\022\002\000\002\023\005\000\002\023\003\000\002" +
    "\024\003\000\002\024\005\000\002\041\005\000\002\042" +
    "\005\000\002\044\003\000\002\074\003\000\002\074\003" +
    "\000\002\043\003\000\002\043\006\000\002\043\010\000" +
    "\002\043\005\000\002\046\003\000\002\046\005\000\002" +
    "\045\003\000\002\057\007\000\002\057\005\000\002\075" +
    "\010\000\002\112\006\000\002\112\003\000\002\076\010" +
    "\000\002\076\005\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\035\003\000\002\035\003\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\003\000\002\036\003\000\002" +
    "\036\003\000\002\036\005\000\002\050\012\000\002\050" +
    "\010\000\002\050\010\000\002\050\006\000\002\115\005" +
    "\000\002\072\003\000\002\072\003\000\002\072\003\000" +
    "\002\072\005\000\002\072\005\000\002\072\004\000\002" +
    "\072\005\000\002\072\005\000\002\071\003\000\002\071" +
    "\005\000\002\071\005\000\002\071\004\000\002\071\004" +
    "\000\002\071\005\000\002\071\005\000\002\071\005\000" +
    "\002\071\005\000\002\071\005\000\002\071\005\000\002" +
    "\071\005\000\002\071\005\000\002\047\012\000\002\047" +
    "\006\000\002\047\004\000\002\047\010\000\002\113\003" +
    "\000\002\113\002\000\002\114\005\000\002\114\003\000" +
    "\002\101\005\000\002\101\002\000\002\077\012\000\002" +
    "\077\010\000\002\054\004\000\002\054\004\000\002\052" +
    "\007\000\002\053\011\000\002\055\003\000\002\055\002" +
    "\000\002\056\005\000\002\056\003\000\002\037\003\000" +
    "\002\037\002\000\002\040\005\000\002\040\003\000\002" +
    "\062\003\000\002\062\003\000\002\066\007\000\002\066" +
    "\013\000\002\065\006\000\002\070\004\000\002\070\002" +
    "\000\002\051\004\000\002\051\003\000\002\067\003\000" +
    "\002\067\003\000\002\073\007\000\002\073\007\000\002" +
    "\073\007\000\002\102\010\000\002\103\006\000\002\103" +
    "\003\000\002\104\006\000\002\104\005\000\002\106\003" +
    "\000\002\106\003\000\002\105\003\000\002\105\004\000" +
    "\002\107\003\000\002\107\002\000\002\110\005\000\002" +
    "\110\003\000\002\111\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0179\000\064\002\ufffd\011\ufffd\015\ufffd\030\ufffd\037" +
    "\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd" +
    "\053\ufffd\054\ufffd\055\ufffd\057\006\061\ufffd\062\ufffd\063" +
    "\ufffd\064\ufffd\067\ufffd\070\ufffd\071\ufffd\074\ufffd\075\ufffd" +
    "\076\ufffd\001\002\000\104\002\ufffe\011\ufffe\014\ufffe\015" +
    "\ufffe\016\ufffe\030\ufffe\037\ufffe\040\ufffe\043\ufffe\045\ufffe" +
    "\046\ufffe\047\ufffe\050\ufffe\051\ufffe\052\ufffe\053\ufffe\054" +
    "\ufffe\055\ufffe\056\ufffe\057\216\060\ufffe\061\ufffe\062\ufffe" +
    "\063\ufffe\064\ufffe\066\ufffe\067\ufffe\070\ufffe\071\ufffe\072" +
    "\ufffe\074\ufffe\075\ufffe\076\ufffe\001\002\000\004\002\u017b" +
    "\001\002\000\104\002\uffff\011\uffff\014\uffff\015\uffff\016" +
    "\uffff\030\uffff\037\uffff\040\uffff\043\uffff\045\uffff\046\uffff" +
    "\047\uffff\050\uffff\051\uffff\052\uffff\053\uffff\054\uffff\055" +
    "\uffff\056\uffff\057\uffff\060\uffff\061\uffff\062\uffff\063\uffff" +
    "\064\uffff\066\uffff\067\uffff\070\uffff\071\uffff\072\uffff\074" +
    "\uffff\075\uffff\076\uffff\001\002\000\062\002\ufffa\011\017" +
    "\015\070\030\026\037\031\045\021\046\040\047\044\050" +
    "\065\051\062\052\014\053\071\054\056\055\063\061\055" +
    "\062\013\063\042\064\045\067\034\070\041\071\016\074" +
    "\053\075\020\076\051\001\002\000\010\002\uffa8\014\uffa8" +
    "\057\uffa8\001\002\000\006\002\ufff4\057\ufff4\001\002\000" +
    "\062\002\uffb6\005\uffb6\007\uffb6\010\uffb6\012\uffb6\013\uffb6" +
    "\014\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\024" +
    "\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6\032\u0179\034\uffb6" +
    "\035\uffb6\036\uffb6\041\uffb6\042\uffb6\057\uffb6\001\002\000" +
    "\004\053\u0172\001\002\000\062\002\uffa1\005\uffa1\007\uffa1" +
    "\010\uffa1\012\uffa1\013\uffa1\014\uffa1\016\uffa1\017\uffa1\020" +
    "\uffa1\021\uffa1\022\uffa1\024\uffa1\025\uffa1\026\uffa1\027\uffa1" +
    "\030\uffa1\032\uffa1\034\uffa1\035\uffa1\036\uffa1\041\uffa1\042" +
    "\uffa1\057\uffa1\001\002\000\052\006\105\007\uffa5\015\103" +
    "\017\uffa5\020\uffa5\021\uffa5\022\uffa5\023\u0170\024\uffa5\025" +
    "\uffa5\026\uffa5\027\uffa5\030\uffa5\031\102\032\uffa5\033\104" +
    "\034\uffa5\035\uffa5\036\uffa5\042\uffa5\001\002\000\042\011" +
    "\017\013\u015e\015\070\030\026\037\031\045\021\046\040" +
    "\047\044\050\065\051\062\052\014\053\u015c\054\056\055" +
    "\063\064\045\070\041\001\002\000\040\011\017\015\070" +
    "\030\026\037\031\045\021\046\040\047\044\050\065\051" +
    "\062\052\014\053\071\054\056\055\063\064\045\070\041" +
    "\001\002\000\010\030\u014e\032\u014d\053\uffe6\001\002\000" +
    "\062\002\uff92\005\uff92\007\uff92\010\uff92\012\uff92\013\uff92" +
    "\014\uff92\016\uff92\017\uff92\020\uff92\021\uff92\022\uff92\024" +
    "\uff92\025\uff92\026\uff92\027\uff92\030\uff92\032\uff92\034\uff92" +
    "\035\uff92\036\uff92\041\uff92\042\uff92\057\uff92\001\002\000" +
    "\062\002\uff9b\005\uff9b\007\uff9b\010\uff9b\012\uff9b\013\uff9b" +
    "\014\uff9b\016\uff9b\017\uff9b\020\uff9b\021\uff9b\022\uff9b\024" +
    "\uff9b\025\uff9b\026\uff9b\027\uff9b\030\uff9b\032\uff9b\034\uff9b" +
    "\035\uff9b\036\uff9b\041\uff9b\042\uff9b\057\uff9b\001\002\000" +
    "\062\002\uff9d\005\uff9d\007\uff9d\010\uff9d\012\uff9d\013\uff9d" +
    "\014\uff9d\016\uff9d\017\uff9d\020\uff9d\021\uff9d\022\uff9d\024" +
    "\uff9d\025\uff9d\026\uff9d\027\uff9d\030\uff9d\032\uff9d\034\uff9d" +
    "\035\uff9d\036\uff9d\041\uff9d\042\uff9d\057\uff9d\001\002\000" +
    "\006\002\ufff6\057\ufff6\001\002\000\006\002\ufff5\057\ufff5" +
    "\001\002\000\040\011\017\015\070\030\026\037\031\045" +
    "\021\046\040\047\044\050\065\051\062\052\014\053\071" +
    "\054\056\055\063\064\045\070\041\001\002\000\006\002" +
    "\ufff2\057\ufff2\001\002\000\006\002\ufff8\057\ufff8\001\002" +
    "\000\040\011\017\015\070\030\026\037\031\045\021\046" +
    "\040\047\044\050\065\051\062\052\014\053\071\054\056" +
    "\055\063\064\045\070\041\001\002\000\062\002\uff9f\005" +
    "\uff9f\007\uff9f\010\uff9f\012\uff9f\013\uff9f\014\uff9f\016\uff9f" +
    "\017\uff9f\020\uff9f\021\uff9f\022\uff9f\024\uff9f\025\uff9f\026" +
    "\uff9f\027\uff9f\030\uff9f\032\uff9f\034\uff9f\035\uff9f\036\uff9f" +
    "\041\uff9f\042\uff9f\057\uff9f\001\002\000\006\002\ufff0\057" +
    "\ufff0\001\002\000\004\054\u0130\001\002\000\046\002\uffac" +
    "\007\uff91\014\uffac\017\uff91\020\uff91\021\uff91\022\uff91\024" +
    "\uff91\025\uff91\026\uff91\027\uff91\030\uff91\032\uff91\034\uff91" +
    "\035\uff91\036\uff91\042\uff91\057\uffac\001\002\000\062\002" +
    "\uff9e\005\uff9e\007\uff9e\010\uff9e\012\uff9e\013\uff9e\014\uff9e" +
    "\016\uff9e\017\uff9e\020\uff9e\021\uff9e\022\uff9e\024\uff9e\025" +
    "\uff9e\026\uff9e\027\uff9e\030\uff9e\032\uff9e\034\uff9e\035\uff9e" +
    "\036\uff9e\041\uff9e\042\uff9e\057\uff9e\001\002\000\006\002" +
    "\ufff3\057\ufff3\001\002\000\062\002\uff93\005\uff93\007\uff93" +
    "\010\uff93\012\uff93\013\uff93\014\uff93\016\uff93\017\uff93\020" +
    "\uff93\021\uff93\022\uff93\024\uff93\025\uff93\026\uff93\027\uff93" +
    "\030\uff93\032\uff93\034\uff93\035\uff93\036\uff93\041\uff93\042" +
    "\uff93\057\uff93\001\002\000\062\002\uffa4\005\uffa4\007\uffa4" +
    "\010\uffa4\012\uffa4\013\uffa4\014\uffa4\016\uffa4\017\uffa4\020" +
    "\uffa4\021\uffa4\022\uffa4\024\uffa4\025\uffa4\026\uffa4\027\uffa4" +
    "\030\uffa4\032\uffa4\034\uffa4\035\uffa4\036\uffa4\041\uffa4\042" +
    "\uffa4\057\uffa4\001\002\000\004\053\355\001\002\000\010" +
    "\002\uffab\014\uffab\057\uffab\001\002\000\062\002\uffbc\005" +
    "\uffbc\007\uffbc\010\uffbc\012\uffbc\013\uffbc\014\uffbc\016\uffbc" +
    "\017\uffbc\020\uffbc\021\uffbc\022\uffbc\024\uffbc\025\uffbc\026" +
    "\uffbc\027\uffbc\030\uffbc\032\uffbc\034\uffbc\035\uffbc\036\uffbc" +
    "\041\uffbc\042\uffbc\057\uffbc\001\002\000\010\011\321\041" +
    "\uffdf\053\320\001\002\000\046\002\uffa9\007\uffa2\014\uffa9" +
    "\017\uffa2\020\uffa2\021\uffa2\022\uffa2\024\uffa2\025\uffa2\026" +
    "\uffa2\027\uffa2\030\uffa2\032\uffa2\034\uffa2\035\uffa2\036\uffa2" +
    "\042\uffa2\057\uffa9\001\002\000\062\002\uff9a\005\uff9a\007" +
    "\uff9a\010\uff9a\012\uff9a\013\uff9a\014\uff9a\016\uff9a\017\uff9a" +
    "\020\uff9a\021\uff9a\022\uff9a\024\uff9a\025\uff9a\026\uff9a\027" +
    "\uff9a\030\uff9a\032\uff9a\034\uff9a\035\uff9a\036\uff9a\041\uff9a" +
    "\042\uff9a\057\uff9a\001\002\000\006\002\ufff1\057\ufff1\001" +
    "\002\000\004\053\313\001\002\000\062\002\uff9c\005\uff9c" +
    "\007\uff9c\010\uff9c\012\uff9c\013\uff9c\014\uff9c\016\uff9c\017" +
    "\uff9c\020\uff9c\021\uff9c\022\uff9c\024\uff9c\025\uff9c\026\uff9c" +
    "\027\uff9c\030\uff9c\032\uff9c\034\uff9c\035\uff9c\036\uff9c\041" +
    "\uff9c\042\uff9c\057\uff9c\001\002\000\016\002\uffc4\011\243" +
    "\043\237\053\242\054\236\057\uffc4\001\002\000\062\002" +
    "\uff8b\005\uff8b\007\uff8b\010\uff8b\012\uff8b\013\uff8b\014\uff8b" +
    "\016\uff8b\017\uff8b\020\uff8b\021\uff8b\022\uff8b\024\uff8b\025" +
    "\uff8b\026\uff8b\027\uff8b\030\uff8b\032\uff8b\034\uff8b\035\uff8b" +
    "\036\uff8b\041\uff8b\042\uff8b\057\uff8b\001\002\000\004\051" +
    "\235\001\002\000\004\015\220\001\002\000\062\002\uffa0" +
    "\005\uffa0\007\uffa0\010\uffa0\012\uffa0\013\uffa0\014\uffa0\016" +
    "\uffa0\017\uffa0\020\uffa0\021\uffa0\022\uffa0\024\uffa0\025\uffa0" +
    "\026\uffa0\027\uffa0\030\uffa0\032\uffa0\034\uffa0\035\uffa0\036" +
    "\uffa0\041\uffa0\042\uffa0\057\uffa0\001\002\000\046\002\uffaa" +
    "\007\uffa3\014\uffaa\017\uffa3\020\uffa3\021\uffa3\022\uffa3\024" +
    "\uffa3\025\uffa3\026\uffa3\027\uffa3\030\uffa3\032\uffa3\034\uffa3" +
    "\035\uffa3\036\uffa3\042\uffa3\057\uffaa\001\002\000\040\007" +
    "\127\017\130\020\115\021\113\022\124\024\125\025\114" +
    "\026\116\027\123\030\110\032\120\034\112\035\117\036" +
    "\111\042\126\001\002\000\062\002\uffb4\005\uffb4\007\uffb4" +
    "\010\uffb4\012\uffb4\013\uffb4\014\uffb4\016\uffb4\017\uffb4\020" +
    "\uffb4\021\uffb4\022\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4" +
    "\030\uffb4\032\uffb4\034\uffb4\035\uffb4\036\uffb4\041\uffb4\042" +
    "\uffb4\057\uffb4\001\002\000\040\011\017\015\070\030\026" +
    "\037\031\045\021\046\040\047\044\050\065\051\062\052" +
    "\014\053\071\054\056\055\063\064\045\070\041\001\002" +
    "\000\006\002\ufffd\057\006\001\002\000\062\002\uffbb\005" +
    "\uffbb\007\uffbb\010\uffbb\012\uffbb\013\uffbb\014\uffbb\016\uffbb" +
    "\017\uffbb\020\uffbb\021\uffbb\022\uffbb\024\uffbb\025\uffbb\026" +
    "\uffbb\027\uffbb\030\uffbb\032\uffbb\034\uffbb\035\uffbb\036\uffbb" +
    "\041\uffbb\042\uffbb\057\uffbb\001\002\000\004\002\ufffc\001" +
    "\002\000\006\002\ufff7\057\ufff7\001\002\000\042\011\017" +
    "\015\070\016\uff6d\030\026\037\031\045\021\046\040\047" +
    "\044\050\065\051\062\052\014\053\071\054\056\055\063" +
    "\064\045\070\041\001\002\000\076\002\uffba\005\uffba\006" +
    "\uffba\007\uffba\010\uffba\011\072\012\uffba\013\uffba\014\uffba" +
    "\015\uffba\016\uffba\017\uffba\020\uffba\021\uffba\022\uffba\023" +
    "\uffba\024\uffba\025\uffba\026\uffba\027\uffba\030\uffba\031\uffba" +
    "\032\uffba\033\uffba\034\uffba\035\uffba\036\uffba\041\uffba\042" +
    "\uffba\057\uffba\001\002\000\042\011\017\012\uff6d\015\070" +
    "\030\026\037\031\045\021\046\040\047\044\050\065\051" +
    "\062\052\014\053\071\054\056\055\063\064\045\070\041" +
    "\001\002\000\044\005\uff6b\007\127\012\uff6b\017\130\020" +
    "\115\021\113\022\124\024\125\025\114\026\116\027\123" +
    "\030\110\032\120\034\112\035\117\036\111\042\126\001" +
    "\002\000\004\012\203\001\002\000\062\002\uffa2\005\uffa2" +
    "\007\uffa2\010\uffa2\012\uffa2\013\uffa2\014\uffa2\016\uffa2\017" +
    "\uffa2\020\uffa2\021\uffa2\022\uffa2\024\uffa2\025\uffa2\026\uffa2" +
    "\027\uffa2\030\uffa2\032\uffa2\034\uffa2\035\uffa2\036\uffa2\041" +
    "\uffa2\042\uffa2\057\uffa2\001\002\000\010\005\201\012\uff6e" +
    "\016\uff6e\001\002\000\062\002\uff91\005\uff91\007\uff91\010" +
    "\uff91\012\uff91\013\uff91\014\uff91\016\uff91\017\uff91\020\uff91" +
    "\021\uff91\022\uff91\024\uff91\025\uff91\026\uff91\027\uff91\030" +
    "\uff91\032\uff91\034\uff91\035\uff91\036\uff91\041\uff91\042\uff91" +
    "\057\uff91\001\002\000\062\002\uffa3\005\uffa3\007\uffa3\010" +
    "\uffa3\012\uffa3\013\uffa3\014\uffa3\016\uffa3\017\uffa3\020\uffa3" +
    "\021\uffa3\022\uffa3\024\uffa3\025\uffa3\026\uffa3\027\uffa3\030" +
    "\uffa3\032\uffa3\034\uffa3\035\uffa3\036\uffa3\041\uffa3\042\uffa3" +
    "\057\uffa3\001\002\000\072\002\uffa5\005\uffa5\006\105\007" +
    "\uffa5\010\uffa5\012\uffa5\013\uffa5\014\uffa5\015\103\016\uffa5" +
    "\017\uffa5\020\uffa5\021\uffa5\022\uffa5\024\uffa5\025\uffa5\026" +
    "\uffa5\027\uffa5\030\uffa5\031\102\032\uffa5\033\104\034\uffa5" +
    "\035\uffa5\036\uffa5\041\uffa5\042\uffa5\057\uffa5\001\002\000" +
    "\062\002\uff71\005\uff71\007\uff71\010\uff71\012\uff71\013\uff71" +
    "\014\uff71\016\uff71\017\uff71\020\uff71\021\uff71\022\uff71\024" +
    "\uff71\025\uff71\026\uff71\027\uff71\030\uff71\032\uff71\034\uff71" +
    "\035\uff71\036\uff71\041\uff71\042\uff71\057\uff71\001\002\000" +
    "\040\011\017\015\070\030\026\037\031\045\021\046\040" +
    "\047\044\050\065\051\062\052\014\053\071\054\056\055" +
    "\063\064\045\070\041\001\002\000\062\002\uff72\005\uff72" +
    "\007\uff72\010\uff72\012\uff72\013\uff72\014\uff72\016\uff72\017" +
    "\uff72\020\uff72\021\uff72\022\uff72\024\uff72\025\uff72\026\uff72" +
    "\027\uff72\030\uff72\032\uff72\034\uff72\035\uff72\036\uff72\041" +
    "\uff72\042\uff72\057\uff72\001\002\000\004\053\106\001\002" +
    "\000\076\002\uffb7\005\uffb7\006\uffb7\007\uffb7\010\uffb7\012" +
    "\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7" +
    "\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027" +
    "\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7" +
    "\036\uffb7\040\uffb7\041\uffb7\042\uffb7\057\uffb7\001\002\000" +
    "\044\007\127\010\121\016\122\017\130\020\115\021\113" +
    "\022\124\024\125\025\114\026\116\027\123\030\110\032" +
    "\120\034\112\035\117\036\111\042\126\001\002\000\040" +
    "\011\017\015\070\030\026\037\031\045\021\046\040\047" +
    "\044\050\065\051\062\052\014\053\071\054\056\055\063" +
    "\064\045\070\041\001\002\000\040\011\017\015\070\030" +
    "\026\037\031\045\021\046\040\047\044\050\065\051\062" +
    "\052\014\053\071\054\056\055\063\064\045\070\041\001" +
    "\002\000\040\011\017\015\070\030\026\037\031\045\021" +
    "\046\040\047\044\050\065\051\062\052\014\053\071\054" +
    "\056\055\063\064\045\070\041\001\002\000\040\011\017" +
    "\015\070\030\026\037\031\045\021\046\040\047\044\050" +
    "\065\051\062\052\014\053\071\054\056\055\063\064\045" +
    "\070\041\001\002\000\040\011\017\015\070\030\026\037" +
    "\031\045\021\046\040\047\044\050\065\051\062\052\014" +
    "\053\071\054\056\055\063\064\045\070\041\001\002\000" +
    "\040\011\017\015\070\030\026\037\031\045\021\046\040" +
    "\047\044\050\065\051\062\052\014\053\071\054\056\055" +
    "\063\064\045\070\041\001\002\000\040\011\017\015\070" +
    "\030\026\037\031\045\021\046\040\047\044\050\065\051" +
    "\062\052\014\053\071\054\056\055\063\064\045\070\041" +
    "\001\002\000\040\011\017\015\070\030\026\037\031\045" +
    "\021\046\040\047\044\050\065\051\062\052\014\053\071" +
    "\054\056\055\063\064\045\070\041\001\002\000\040\011" +
    "\017\015\070\030\026\037\031\045\021\046\040\047\044" +
    "\050\065\051\062\052\014\053\071\054\056\055\063\064" +
    "\045\070\041\001\002\000\040\011\017\015\070\030\026" +
    "\037\031\045\021\046\040\047\044\050\065\051\062\052" +
    "\014\053\071\054\056\055\063\064\045\070\041\001\002" +
    "\000\076\002\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9\012" +
    "\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9" +
    "\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027" +
    "\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9" +
    "\036\uffb9\040\uffb9\041\uffb9\042\uffb9\057\uffb9\001\002\000" +
    "\040\011\017\015\070\030\026\037\031\045\021\046\040" +
    "\047\044\050\065\051\062\052\014\053\071\054\056\055" +
    "\063\064\045\070\041\001\002\000\040\011\017\015\070" +
    "\030\026\037\031\045\021\046\040\047\044\050\065\051" +
    "\062\052\014\053\071\054\056\055\063\064\045\070\041" +
    "\001\002\000\040\011\017\015\070\030\026\037\031\045" +
    "\021\046\040\047\044\050\065\051\062\052\014\053\071" +
    "\054\056\055\063\064\045\070\041\001\002\000\006\053" +
    "\152\054\150\001\002\000\004\053\132\001\002\000\040" +
    "\011\017\015\070\030\026\037\031\045\021\046\040\047" +
    "\044\050\065\051\062\052\014\053\071\054\056\055\063" +
    "\064\045\070\041\001\002\000\062\002\uff84\005\uff84\007" +
    "\127\010\uff84\012\uff84\013\uff84\014\uff84\016\uff84\017\uff84" +
    "\020\uff84\021\uff84\022\uff84\024\uff84\025\uff84\026\116\027" +
    "\123\030\110\032\120\034\uff84\035\uff84\036\uff84\041\uff84" +
    "\042\uff84\057\uff84\001\002\000\004\011\133\001\002\000" +
    "\042\011\017\012\uff6d\015\070\030\026\037\031\045\021" +
    "\046\040\047\044\050\065\051\062\052\014\053\071\054" +
    "\056\055\063\064\045\070\041\001\002\000\004\012\135" +
    "\001\002\000\064\002\uff75\005\uff75\007\uff75\010\uff75\012" +
    "\uff75\013\uff75\014\uff75\015\136\016\uff75\017\uff75\020\uff75" +
    "\021\uff75\022\uff75\024\uff75\025\uff75\026\uff75\027\uff75\030" +
    "\uff75\032\uff75\034\uff75\035\uff75\036\uff75\041\uff75\042\uff75" +
    "\057\uff75\001\002\000\004\053\142\001\002\000\062\002" +
    "\uff6f\005\uff6f\007\uff6f\010\uff6f\012\uff6f\013\uff6f\014\uff6f" +
    "\016\uff6f\017\uff6f\020\uff6f\021\uff6f\022\uff6f\024\uff6f\025" +
    "\uff6f\026\uff6f\027\uff6f\030\uff6f\032\uff6f\034\uff6f\035\uff6f" +
    "\036\uff6f\041\uff6f\042\uff6f\057\uff6f\001\002\000\006\005" +
    "\uff67\016\uff67\001\002\000\006\005\145\016\146\001\002" +
    "\000\004\023\143\001\002\000\040\011\017\015\070\030" +
    "\026\037\031\045\021\046\040\047\044\050\065\051\062" +
    "\052\014\053\071\054\056\055\063\064\045\070\041\001" +
    "\002\000\044\005\uffbe\007\127\016\uffbe\017\130\020\115" +
    "\021\113\022\124\024\125\025\114\026\116\027\123\030" +
    "\110\032\120\034\112\035\117\036\111\042\126\001\002" +
    "\000\004\053\142\001\002\000\062\002\uff76\005\uff76\007" +
    "\uff76\010\uff76\012\uff76\013\uff76\014\uff76\016\uff76\017\uff76" +
    "\020\uff76\021\uff76\022\uff76\024\uff76\025\uff76\026\uff76\027" +
    "\uff76\030\uff76\032\uff76\034\uff76\035\uff76\036\uff76\041\uff76" +
    "\042\uff76\057\uff76\001\002\000\006\005\uff68\016\uff68\001" +
    "\002\000\064\002\uffaf\005\uffaf\007\uffaf\010\uffaf\012\uffaf" +
    "\013\uffaf\014\uffaf\015\154\016\uffaf\017\uffaf\020\uffaf\021" +
    "\uffaf\022\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf" +
    "\032\uffaf\034\uffaf\035\uffaf\036\uffaf\041\uffaf\042\uffaf\057" +
    "\uffaf\001\002\000\062\002\uff7f\005\uff7f\007\uff7f\010\uff7f" +
    "\012\uff7f\013\uff7f\014\uff7f\016\uff7f\017\uff7f\020\uff7f\021" +
    "\uff7f\022\uff7f\024\uff7f\025\uff7f\026\uff7f\027\uff7f\030\uff7f" +
    "\032\uff7f\034\uff7f\035\uff7f\036\uff7f\041\uff7f\042\uff7f\057" +
    "\uff7f\001\002\000\004\011\072\001\002\000\062\002\uff80" +
    "\005\uff80\007\uff80\010\uff80\012\uff80\013\uff80\014\uff80\016" +
    "\uff80\017\uff80\020\uff80\021\uff80\022\uff80\024\uff80\025\uff80" +
    "\026\uff80\027\uff80\030\uff80\032\uff80\034\uff80\035\uff80\036" +
    "\uff80\041\uff80\042\uff80\057\uff80\001\002\000\042\011\017" +
    "\015\070\016\uff79\030\026\037\031\045\021\046\040\047" +
    "\044\050\065\051\062\052\014\053\071\054\056\055\063" +
    "\064\045\070\041\001\002\000\044\005\uff77\007\127\016" +
    "\uff77\017\130\020\115\021\113\022\124\024\125\025\114" +
    "\026\116\027\123\030\110\032\120\034\112\035\117\036" +
    "\111\042\126\001\002\000\006\005\161\016\uff7a\001\002" +
    "\000\004\016\160\001\002\000\062\002\uffb0\005\uffb0\007" +
    "\uffb0\010\uffb0\012\uffb0\013\uffb0\014\uffb0\016\uffb0\017\uffb0" +
    "\020\uffb0\021\uffb0\022\uffb0\024\uffb0\025\uffb0\026\uffb0\027" +
    "\uffb0\030\uffb0\032\uffb0\034\uffb0\035\uffb0\036\uffb0\041\uffb0" +
    "\042\uffb0\057\uffb0\001\002\000\040\011\017\015\070\030" +
    "\026\037\031\045\021\046\040\047\044\050\065\051\062" +
    "\052\014\053\071\054\056\055\063\064\045\070\041\001" +
    "\002\000\044\005\uff78\007\127\016\uff78\017\130\020\115" +
    "\021\113\022\124\024\125\025\114\026\116\027\123\030" +
    "\110\032\120\034\112\035\117\036\111\042\126\001\002" +
    "\000\062\002\uff86\005\uff86\007\127\010\uff86\012\uff86\013" +
    "\uff86\014\uff86\016\uff86\017\uff86\020\uff86\021\uff86\022\uff86" +
    "\024\uff86\025\uff86\026\116\027\123\030\110\032\120\034" +
    "\uff86\035\uff86\036\uff86\041\uff86\042\uff86\057\uff86\001\002" +
    "\000\062\002\uff82\005\uff82\007\127\010\uff82\012\uff82\013" +
    "\uff82\014\uff82\016\uff82\017\uff82\020\uff82\021\uff82\022\uff82" +
    "\024\uff82\025\uff82\026\116\027\123\030\110\032\120\034" +
    "\uff82\035\uff82\036\uff82\041\uff82\042\uff82\057\uff82\001\002" +
    "\000\062\002\uff8c\005\uff8c\007\127\010\uff8c\012\uff8c\013" +
    "\uff8c\014\uff8c\016\uff8c\017\uff8c\020\uff8c\021\uff8c\022\uff8c" +
    "\024\uff8c\025\uff8c\026\uff8c\027\uff8c\030\uff8c\032\uff8c\034" +
    "\uff8c\035\uff8c\036\uff8c\041\uff8c\042\uff8c\057\uff8c\001\002" +
    "\000\042\007\127\016\167\017\130\020\115\021\113\022" +
    "\124\024\125\025\114\026\116\027\123\030\110\032\120" +
    "\034\112\035\117\036\111\042\126\001\002\000\076\002" +
    "\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8\012\uffb8\013\uffb8" +
    "\014\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022" +
    "\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8" +
    "\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8\040" +
    "\uffb8\041\uffb8\042\uffb8\057\uffb8\001\002\000\062\002\uff90" +
    "\005\uff90\007\127\010\uff90\012\uff90\013\uff90\014\uff90\016" +
    "\uff90\017\uff90\020\uff90\021\uff90\022\uff90\024\uff90\025\uff90" +
    "\026\116\027\123\030\uff90\032\uff90\034\uff90\035\uff90\036" +
    "\uff90\041\uff90\042\uff90\057\uff90\001\002\000\062\002\uff8a" +
    "\005\uff8a\007\127\010\uff8a\012\uff8a\013\uff8a\014\uff8a\016" +
    "\uff8a\017\130\020\115\021\113\022\124\024\125\025\114" +
    "\026\116\027\123\030\110\032\120\034\uff8a\035\uff8a\036" +
    "\uff8a\041\uff8a\042\126\057\uff8a\001\002\000\062\002\uff8d" +
    "\005\uff8d\007\127\010\uff8d\012\uff8d\013\uff8d\014\uff8d\016" +
    "\uff8d\017\uff8d\020\uff8d\021\uff8d\022\uff8d\024\uff8d\025\uff8d" +
    "\026\uff8d\027\uff8d\030\uff8d\032\uff8d\034\uff8d\035\uff8d\036" +
    "\uff8d\041\uff8d\042\uff8d\057\uff8d\001\002\000\062\002\uff83" +
    "\005\uff83\007\127\010\uff83\012\uff83\013\uff83\014\uff83\016" +
    "\uff83\017\uff83\020\uff83\021\uff83\022\uff83\024\uff83\025\uff83" +
    "\026\116\027\123\030\110\032\120\034\uff83\035\uff83\036" +
    "\uff83\041\uff83\042\uff83\057\uff83\001\002\000\062\002\uff85" +
    "\005\uff85\007\127\010\uff85\012\uff85\013\uff85\014\uff85\016" +
    "\uff85\017\uff85\020\uff85\021\uff85\022\uff85\024\uff85\025\uff85" +
    "\026\116\027\123\030\110\032\120\034\uff85\035\uff85\036" +
    "\uff85\041\uff85\042\uff85\057\uff85\001\002\000\062\002\uff81" +
    "\005\uff81\007\127\010\uff81\012\uff81\013\uff81\014\uff81\016" +
    "\uff81\017\uff81\020\uff81\021\uff81\022\uff81\024\uff81\025\uff81" +
    "\026\116\027\123\030\110\032\120\034\uff81\035\uff81\036" +
    "\uff81\041\uff81\042\uff81\057\uff81\001\002\000\062\002\uff89" +
    "\005\uff89\007\127\010\uff89\012\uff89\013\uff89\014\uff89\016" +
    "\uff89\017\130\020\115\021\113\022\124\024\125\025\114" +
    "\026\116\027\123\030\110\032\120\034\uff89\035\117\036" +
    "\uff89\041\uff89\042\126\057\uff89\001\002\000\062\002\uff94" +
    "\005\uff94\007\127\010\uff94\012\uff94\013\uff94\014\uff94\016" +
    "\uff94\017\130\020\115\021\113\022\124\024\125\025\114" +
    "\026\116\027\123\030\110\032\120\034\112\035\117\036" +
    "\uff94\041\uff94\042\126\057\uff94\001\002\000\062\002\uff8f" +
    "\005\uff8f\007\127\010\uff8f\012\uff8f\013\uff8f\014\uff8f\016" +
    "\uff8f\017\uff8f\020\uff8f\021\uff8f\022\uff8f\024\uff8f\025\uff8f" +
    "\026\116\027\123\030\uff8f\032\uff8f\034\uff8f\035\uff8f\036" +
    "\uff8f\041\uff8f\042\uff8f\057\uff8f\001\002\000\040\011\017" +
    "\015\070\030\026\037\031\045\021\046\040\047\044\050" +
    "\065\051\062\052\014\053\071\054\056\055\063\064\045" +
    "\070\041\001\002\000\046\005\uff6c\007\127\012\uff6c\016" +
    "\uff6c\017\130\020\115\021\113\022\124\024\125\025\114" +
    "\026\116\027\123\030\110\032\120\034\112\035\117\036" +
    "\111\042\126\001\002\000\064\002\uff75\005\uff75\007\uff75" +
    "\010\uff75\012\uff75\013\uff75\014\uff75\015\136\016\uff75\017" +
    "\uff75\020\uff75\021\uff75\022\uff75\024\uff75\025\uff75\026\uff75" +
    "\027\uff75\030\uff75\032\uff75\034\uff75\035\uff75\036\uff75\041" +
    "\uff75\042\uff75\057\uff75\001\002\000\062\002\uff70\005\uff70" +
    "\007\uff70\010\uff70\012\uff70\013\uff70\014\uff70\016\uff70\017" +
    "\uff70\020\uff70\021\uff70\022\uff70\024\uff70\025\uff70\026\uff70" +
    "\027\uff70\030\uff70\032\uff70\034\uff70\035\uff70\036\uff70\041" +
    "\uff70\042\uff70\057\uff70\001\002\000\046\005\uff6b\007\127" +
    "\010\210\016\uff6b\017\130\020\115\021\113\022\124\024" +
    "\125\025\114\026\116\027\123\030\110\032\120\034\112" +
    "\035\117\036\111\042\126\001\002\000\004\016\207\001" +
    "\002\000\064\002\uffb2\005\uffb2\007\uffb2\010\uffb2\012\uffb2" +
    "\013\uffb2\014\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022" +
    "\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2\032\uffb2" +
    "\034\uffb2\035\uffb2\036\uffb2\040\uffb2\041\uffb2\042\uffb2\057" +
    "\uffb2\001\002\000\040\011\017\015\070\030\026\037\031" +
    "\045\021\046\040\047\044\050\065\051\062\052\014\053" +
    "\071\054\056\055\063\064\045\070\041\001\002\000\042" +
    "\007\127\016\212\017\130\020\115\021\113\022\124\024" +
    "\125\025\114\026\116\027\123\030\110\032\120\034\112" +
    "\035\117\036\111\042\126\001\002\000\064\002\uffb3\005" +
    "\uffb3\007\uffb3\010\uffb3\012\uffb3\013\uffb3\014\uffb3\016\uffb3" +
    "\017\uffb3\020\uffb3\021\uffb3\022\uffb3\024\uffb3\025\uffb3\026" +
    "\uffb3\027\uffb3\030\uffb3\032\uffb3\034\uffb3\035\uffb3\036\uffb3" +
    "\040\uffb3\041\uffb3\042\uffb3\057\uffb3\001\002\000\064\002" +
    "\ufffe\011\017\015\070\030\026\037\031\045\021\046\040" +
    "\047\044\050\065\051\062\052\014\053\071\054\056\055" +
    "\063\057\216\061\055\062\013\063\042\064\045\067\034" +
    "\070\041\071\016\074\053\075\020\076\051\001\002\000" +
    "\004\002\ufffb\001\002\000\006\002\ufff9\057\ufff9\001\002" +
    "\000\104\002\000\011\000\014\000\015\000\016\000\030" +
    "\000\037\000\040\000\043\000\045\000\046\000\047\000" +
    "\050\000\051\000\052\000\053\000\054\000\055\000\056" +
    "\000\057\000\060\000\061\000\062\000\063\000\064\000" +
    "\066\000\067\000\070\000\071\000\072\000\074\000\075" +
    "\000\076\000\001\002\000\062\002\uff87\005\uff87\007\127" +
    "\010\uff87\012\uff87\013\uff87\014\uff87\016\uff87\017\130\020" +
    "\115\021\113\022\124\024\125\025\114\026\116\027\123" +
    "\030\110\032\120\034\112\035\117\036\111\041\uff87\042" +
    "\126\057\uff87\001\002\000\006\053\ufffd\057\006\001\002" +
    "\000\004\053\223\001\002\000\010\005\226\016\ufffd\057" +
    "\006\001\002\000\004\023\224\001\002\000\040\011\017" +
    "\015\070\030\026\037\031\045\021\046\040\047\044\050" +
    "\065\051\062\052\014\053\071\054\056\055\063\064\045" +
    "\070\041\001\002\000\046\005\uffad\007\127\016\uffad\017" +
    "\130\020\115\021\113\022\124\024\125\025\114\026\116" +
    "\027\123\030\110\032\120\034\112\035\117\036\111\042" +
    "\126\057\uffad\001\002\000\006\053\ufffd\057\006\001\002" +
    "\000\004\016\230\001\002\000\062\002\uffb1\005\uffb1\007" +
    "\uffb1\010\uffb1\012\uffb1\013\uffb1\014\uffb1\016\uffb1\017\uffb1" +
    "\020\uffb1\021\uffb1\022\uffb1\024\uffb1\025\uffb1\026\uffb1\027" +
    "\uffb1\030\uffb1\032\uffb1\034\uffb1\035\uffb1\036\uffb1\041\uffb1" +
    "\042\uffb1\057\uffb1\001\002\000\004\053\232\001\002\000" +
    "\004\023\233\001\002\000\040\011\017\015\070\030\026" +
    "\037\031\045\021\046\040\047\044\050\065\051\062\052" +
    "\014\053\071\054\056\055\063\064\045\070\041\001\002" +
    "\000\046\005\uffae\007\127\016\uffae\017\130\020\115\021" +
    "\113\022\124\024\125\025\114\026\116\027\123\030\110" +
    "\032\120\034\112\035\117\036\111\042\126\057\uffae\001" +
    "\002\000\006\002\uffef\057\uffef\001\002\000\014\002\uffc1" +
    "\005\uffc1\012\uffc1\017\311\057\uffc1\001\002\000\004\053" +
    "\277\001\002\000\012\002\uffc5\005\275\012\uffc5\057\uffc5" +
    "\001\002\000\012\002\uffc2\005\uffc2\012\uffc2\057\uffc2\001" +
    "\002\000\004\011\267\001\002\000\006\012\uffc4\054\236" +
    "\001\002\000\006\002\uffec\057\uffec\001\002\000\004\012" +
    "\246\001\002\000\004\053\247\001\002\000\004\011\250" +
    "\001\002\000\006\012\uffcb\054\251\001\002\000\022\002" +
    "\uffc8\005\uffc8\011\264\012\uffc8\015\uffc8\016\uffc8\026\uffc8" +
    "\057\uffc8\001\002\000\012\005\uffc9\012\uffc9\016\uffc9\026" +
    "\257\001\002\000\004\012\260\001\002\000\010\005\255" +
    "\012\uffcc\016\uffcc\001\002\000\004\054\251\001\002\000" +
    "\012\005\uffca\012\uffca\016\uffca\026\257\001\002\000\020" +
    "\002\uffc6\005\uffc6\012\uffc6\015\uffc6\016\uffc6\026\uffc6\057" +
    "\uffc6\001\002\000\004\041\261\001\002\000\004\054\251" +
    "\001\002\000\012\002\uff75\015\136\026\257\057\uff75\001" +
    "\002\000\006\002\uffed\057\uffed\001\002\000\004\054\251" +
    "\001\002\000\006\005\255\012\266\001\002\000\020\002" +
    "\uffc7\005\uffc7\012\uffc7\015\uffc7\016\uffc7\026\uffc7\057\uffc7" +
    "\001\002\000\006\012\uffcb\054\251\001\002\000\004\012" +
    "\271\001\002\000\004\041\272\001\002\000\004\054\251" +
    "\001\002\000\012\002\uff75\015\136\026\257\057\uff75\001" +
    "\002\000\006\002\uffee\057\uffee\001\002\000\004\054\236" +
    "\001\002\000\012\002\uffc3\005\uffc3\012\uffc3\057\uffc3\001" +
    "\002\000\006\011\uffe5\015\301\001\002\000\004\011\304" +
    "\001\002\000\006\016\uffcb\054\251\001\002\000\004\016" +
    "\303\001\002\000\004\011\uffe4\001\002\000\006\012\uffcb" +
    "\054\251\001\002\000\004\012\306\001\002\000\004\041" +
    "\307\001\002\000\004\051\310\001\002\000\006\002\uffe3" +
    "\057\uffe3\001\002\000\004\054\312\001\002\000\012\002" +
    "\uffc0\005\uffc0\012\uffc0\057\uffc0\001\002\000\004\051\314" +
    "\001\002\000\010\002\uff75\015\136\057\uff75\001\002\000" +
    "\006\002\uffe9\057\uffe9\001\002\000\010\005\353\012\uffe0" +
    "\041\uffe0\001\002\000\004\041\346\001\002\000\012\005" +
    "\uffdb\012\uffdb\023\344\041\uffdb\001\002\000\006\012\uffdf" +
    "\053\320\001\002\000\010\005\uffdd\012\uffdd\041\uffdd\001" +
    "\002\000\004\012\324\001\002\000\004\041\325\001\002" +
    "\000\042\011\017\013\327\015\070\030\026\037\031\045" +
    "\021\046\040\047\044\050\065\051\062\052\014\053\071" +
    "\054\056\055\063\064\045\070\041\001\002\000\062\002" +
    "\uff96\005\uff96\007\127\010\uff96\012\uff96\013\uff96\014\uff96" +
    "\016\uff96\017\130\020\115\021\113\022\124\024\125\025" +
    "\114\026\116\027\123\030\110\032\120\034\112\035\117" +
    "\036\111\041\uff96\042\126\057\uff96\001\002\000\050\011" +
    "\ufffd\014\ufffd\015\ufffd\030\ufffd\037\ufffd\045\ufffd\046\ufffd" +
    "\047\ufffd\050\ufffd\051\ufffd\052\ufffd\053\ufffd\054\ufffd\055" +
    "\ufffd\057\006\064\ufffd\066\ufffd\070\ufffd\071\ufffd\001\002" +
    "\000\046\011\017\014\uffd9\015\070\030\026\037\031\045" +
    "\021\046\040\047\044\050\065\051\062\052\014\053\071" +
    "\054\056\055\063\064\045\066\336\070\041\071\016\001" +
    "\002\000\004\014\332\001\002\000\062\002\uff98\005\uff98" +
    "\007\uff98\010\uff98\012\uff98\013\uff98\014\uff98\016\uff98\017" +
    "\uff98\020\uff98\021\uff98\022\uff98\024\uff98\025\uff98\026\uff98" +
    "\027\uff98\030\uff98\032\uff98\034\uff98\035\uff98\036\uff98\041" +
    "\uff98\042\uff98\057\uff98\001\002\000\006\014\uffa6\057\uffa6" +
    "\001\002\000\006\014\uffa7\057\uffa7\001\002\000\006\014" +
    "\uffd7\057\uffd7\001\002\000\044\011\017\014\uff5e\015\070" +
    "\030\026\037\031\045\021\046\040\047\044\050\065\051" +
    "\062\052\014\053\071\054\056\055\063\057\uff5e\064\045" +
    "\070\041\001\002\000\006\014\ufffd\057\006\001\002\000" +
    "\050\011\017\014\ufffe\015\070\030\026\037\031\045\021" +
    "\046\040\047\044\050\065\051\062\052\014\053\071\054" +
    "\056\055\063\057\216\064\045\066\336\070\041\071\016" +
    "\001\002\000\004\014\uffda\001\002\000\006\014\uffd8\057" +
    "\uffd8\001\002\000\044\007\127\014\uff5f\017\130\020\115" +
    "\021\113\022\124\024\125\025\114\026\116\027\123\030" +
    "\110\032\120\034\112\035\117\036\111\042\126\057\uff5f" +
    "\001\002\000\040\011\017\015\070\030\026\037\031\045" +
    "\021\046\040\047\044\050\065\051\062\052\014\053\071" +
    "\054\056\055\063\064\045\070\041\001\002\000\046\005" +
    "\uffdc\007\127\012\uffdc\017\130\020\115\021\113\022\124" +
    "\024\125\025\114\026\116\027\123\030\110\032\120\034" +
    "\112\035\117\036\111\041\uffdc\042\126\001\002\000\042" +
    "\011\017\013\350\015\070\030\026\037\031\045\021\046" +
    "\040\047\044\050\065\051\062\052\014\053\071\054\056" +
    "\055\063\064\045\070\041\001\002\000\062\002\uff95\005" +
    "\uff95\007\127\010\uff95\012\uff95\013\uff95\014\uff95\016\uff95" +
    "\017\130\020\115\021\113\022\124\024\125\025\114\026" +
    "\116\027\123\030\110\032\120\034\112\035\117\036\111" +
    "\041\uff95\042\126\057\uff95\001\002\000\050\011\ufffd\014" +
    "\ufffd\015\ufffd\030\ufffd\037\ufffd\045\ufffd\046\ufffd\047\ufffd" +
    "\050\ufffd\051\ufffd\052\ufffd\053\ufffd\054\ufffd\055\ufffd\057" +
    "\006\064\ufffd\066\ufffd\070\ufffd\071\ufffd\001\002\000\004" +
    "\014\352\001\002\000\062\002\uff97\005\uff97\007\uff97\010" +
    "\uff97\012\uff97\013\uff97\014\uff97\016\uff97\017\uff97\020\uff97" +
    "\021\uff97\022\uff97\024\uff97\025\uff97\026\uff97\027\uff97\030" +
    "\uff97\032\uff97\034\uff97\035\uff97\036\uff97\041\uff97\042\uff97" +
    "\057\uff97\001\002\000\004\053\320\001\002\000\010\005" +
    "\uffde\012\uffde\041\uffde\001\002\000\004\011\356\001\002" +
    "\000\006\012\uffdf\053\320\001\002\000\004\012\360\001" +
    "\002\000\004\013\361\001\002\000\050\011\ufffd\014\ufffd" +
    "\015\ufffd\030\ufffd\037\ufffd\043\ufffd\045\ufffd\046\ufffd\047" +
    "\ufffd\050\ufffd\051\ufffd\052\ufffd\053\ufffd\054\ufffd\055\ufffd" +
    "\056\ufffd\057\006\064\ufffd\070\ufffd\001\002\000\046\011" +
    "\017\014\uffd5\015\070\030\026\037\031\043\374\045\021" +
    "\046\040\047\044\050\065\051\062\052\014\053\u0100\054" +
    "\056\055\063\056\371\064\045\070\041\001\002\000\004" +
    "\014\364\001\002\000\006\002\uffe1\057\uffe1\001\002\000" +
    "\006\014\uff66\057\uff66\001\002\000\004\013\u012d\001\002" +
    "\000\006\014\ufffd\057\006\001\002\000\006\005\u011c\065" +
    "\u011d\001\002\000\004\011\u0113\001\002\000\004\013\uff5c" +
    "\001\002\000\042\007\127\013\uff5d\017\130\020\115\021" +
    "\113\022\124\024\125\025\114\026\116\027\123\030\110" +
    "\032\120\034\112\035\117\036\111\042\126\001\002\000" +
    "\004\053\u010e\001\002\000\006\013\uff60\035\u0109\001\002" +
    "\000\006\014\uffd3\057\uffd3\001\002\000\006\014\uff65\057" +
    "\uff65\001\002\000\062\004\u0101\005\uffcd\006\uffba\007\uffba" +
    "\011\072\013\uffba\015\uffba\017\uffba\020\uffba\021\uffba\022" +
    "\uffba\024\uffba\025\uffba\026\uffba\027\uffba\030\uffba\031\uffba" +
    "\032\uffba\033\uffba\034\uffba\035\uffba\036\uffba\042\uffba\065" +
    "\uffcd\001\002\000\004\043\u0102\001\002\000\004\053\u0103" +
    "\001\002\000\004\011\u0104\001\002\000\042\011\017\012" +
    "\uff6d\015\070\030\026\037\031\045\021\046\040\047\044" +
    "\050\065\051\062\052\014\053\071\054\056\055\063\064" +
    "\045\070\041\001\002\000\004\012\u0106\001\002\000\010" +
    "\013\uff75\015\136\035\uff75\001\002\000\006\013\uff74\035" +
    "\uff74\001\002\000\004\013\u010b\001\002\000\040\011\017" +
    "\015\070\030\026\037\031\045\021\046\040\047\044\050" +
    "\065\051\062\052\014\053\071\054\056\055\063\064\045" +
    "\070\041\001\002\000\042\007\127\013\uff61\017\130\020" +
    "\115\021\113\022\124\024\125\025\114\026\116\027\123" +
    "\030\110\032\120\034\112\035\117\036\111\042\126\001" +
    "\002\000\050\011\ufffd\014\ufffd\015\ufffd\030\ufffd\037\ufffd" +
    "\045\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd\053" +
    "\ufffd\054\ufffd\055\ufffd\057\006\064\ufffd\066\ufffd\070\ufffd" +
    "\071\ufffd\001\002\000\004\014\u010d\001\002\000\006\014" +
    "\uff64\057\uff64\001\002\000\004\011\u010f\001\002\000\042" +
    "\011\017\012\uff6d\015\070\030\026\037\031\045\021\046" +
    "\040\047\044\050\065\051\062\052\014\053\071\054\056" +
    "\055\063\064\045\070\041\001\002\000\004\012\u0111\001" +
    "\002\000\010\013\uff75\015\136\035\uff75\001\002\000\006" +
    "\013\uff73\035\uff73\001\002\000\042\011\017\012\uff6d\015" +
    "\070\030\026\037\031\045\021\046\040\047\044\050\065" +
    "\051\062\052\014\053\071\054\056\055\063\064\045\070" +
    "\041\001\002\000\004\012\u0115\001\002\000\006\043\374" +
    "\053\u0117\001\002\000\006\013\uff60\035\u0109\001\002\000" +
    "\004\004\u0101\001\002\000\004\013\u0119\001\002\000\050" +
    "\011\ufffd\014\ufffd\015\ufffd\030\ufffd\037\ufffd\045\ufffd\046" +
    "\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd\053\ufffd\054\ufffd" +
    "\055\ufffd\057\006\064\ufffd\066\ufffd\070\ufffd\071\ufffd\001" +
    "\002\000\004\014\u011b\001\002\000\006\014\uff63\057\uff63" +
    "\001\002\000\004\053\u0129\001\002\000\010\015\070\053" +
    "\u0122\054\u011e\001\002\000\004\040\uffbd\001\002\000\010" +
    "\006\105\015\103\040\u0127\001\002\000\004\040\u0125\001" +
    "\002\000\004\040\u0123\001\002\000\010\006\uffba\015\uffba" +
    "\040\uffba\001\002\000\040\011\017\015\070\030\026\037" +
    "\031\045\021\046\040\047\044\050\065\051\062\052\014" +
    "\053\071\054\056\055\063\064\045\070\041\001\002\000" +
    "\042\007\uff9f\013\uff5b\017\uff9f\020\uff9f\021\uff9f\022\uff9f" +
    "\024\uff9f\025\uff9f\026\uff9f\027\uff9f\030\uff9f\032\uff9f\034" +
    "\uff9f\035\uff9f\036\uff9f\042\uff9f\001\002\000\040\011\017" +
    "\015\070\030\026\037\031\045\021\046\040\047\044\050" +
    "\065\051\062\052\014\053\071\054\056\055\063\064\045" +
    "\070\041\001\002\000\042\007\uff9f\013\uff5a\017\uff9f\020" +
    "\uff9f\021\uff9f\022\uff9f\024\uff9f\025\uff9f\026\uff9f\027\uff9f" +
    "\030\uff9f\032\uff9f\034\uff9f\035\uff9f\036\uff9f\042\uff9f\001" +
    "\002\000\040\011\017\015\070\030\026\037\031\045\021" +
    "\046\040\047\044\050\065\051\062\052\014\053\071\054" +
    "\056\055\063\064\045\070\041\001\002\000\042\007\uff9f" +
    "\013\uff59\017\uff9f\020\uff9f\021\uff9f\022\uff9f\024\uff9f\025" +
    "\uff9f\026\uff9f\027\uff9f\030\uff9f\032\uff9f\034\uff9f\035\uff9f" +
    "\036\uff9f\042\uff9f\001\002\000\006\005\uffce\065\uffce\001" +
    "\002\000\050\011\017\014\ufffe\015\070\030\026\037\031" +
    "\043\374\045\021\046\040\047\044\050\065\051\062\052" +
    "\014\053\u0100\054\056\055\063\056\371\057\216\064\045" +
    "\070\041\001\002\000\004\014\uffd6\001\002\000\006\014" +
    "\uffd4\057\uffd4\001\002\000\050\011\ufffd\014\ufffd\015\ufffd" +
    "\030\ufffd\037\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd\051" +
    "\ufffd\052\ufffd\053\ufffd\054\ufffd\055\ufffd\057\006\064\ufffd" +
    "\066\ufffd\070\ufffd\071\ufffd\001\002\000\004\014\u012f\001" +
    "\002\000\014\002\uff62\014\uff62\057\uff62\072\uff62\073\uff62" +
    "\001\002\000\004\023\u0131\001\002\000\006\015\u0135\054" +
    "\u0132\001\002\000\004\015\u0142\001\002\000\010\040\ufffd" +
    "\057\006\060\ufffd\001\002\000\010\040\uff56\057\uff56\060" +
    "\uff56\001\002\000\006\016\uff4e\053\u0137\001\002\000\004" +
    "\016\u0145\001\002\000\004\004\u013c\001\002\000\006\005" +
    "\uff4c\016\uff4c\001\002\000\006\005\u013a\016\uff4f\001\002" +
    "\000\004\053\u0137\001\002\000\006\005\uff4d\016\uff4d\001" +
    "\002\000\006\015\u0135\054\u013d\001\002\000\012\005\uff52" +
    "\015\u0142\016\uff52\026\uff52\001\002\000\010\005\uff4b\016" +
    "\uff4b\026\u0141\001\002\000\010\005\uff51\016\uff51\026\uff51" +
    "\001\002\000\010\005\uff53\016\uff53\026\uff53\001\002\000" +
    "\010\005\uff50\016\uff50\026\uff50\001\002\000\006\016\uff4e" +
    "\053\u0137\001\002\000\004\016\u0144\001\002\000\016\005" +
    "\uff55\016\uff55\026\uff55\040\uff55\057\uff55\060\uff55\001\002" +
    "\000\016\005\uff54\016\uff54\026\uff54\040\uff54\057\uff54\060" +
    "\uff54\001\002\000\006\040\u0147\060\u0148\001\002\000\006" +
    "\015\u0135\054\u0132\001\002\000\006\002\uff58\057\uff58\001" +
    "\002\000\010\040\uff57\057\uff57\060\uff57\001\002\000\062" +
    "\002\uff88\005\uff88\007\127\010\uff88\012\uff88\013\uff88\014" +
    "\uff88\016\uff88\017\130\020\115\021\113\022\124\024\125" +
    "\025\114\026\116\027\123\030\110\032\120\034\uff88\035" +
    "\uff88\036\uff88\041\uff88\042\uff88\057\uff88\001\002\000\062" +
    "\002\uff8e\005\uff8e\007\127\010\uff8e\012\uff8e\013\uff8e\014" +
    "\uff8e\016\uff8e\017\uff8e\020\uff8e\021\uff8e\022\uff8e\024\uff8e" +
    "\025\uff8e\026\116\027\123\030\uff8e\032\uff8e\034\uff8e\035" +
    "\uff8e\036\uff8e\041\uff8e\042\uff8e\057\uff8e\001\002\000\004" +
    "\053\u014f\001\002\000\004\053\uffe8\001\002\000\004\053" +
    "\uffe7\001\002\000\006\011\u0151\015\u0150\001\002\000\004" +
    "\016\u0155\001\002\000\004\054\251\001\002\000\006\012" +
    "\u0153\026\257\001\002\000\010\002\uff75\015\136\057\uff75" +
    "\001\002\000\006\002\uffeb\057\uffeb\001\002\000\004\011" +
    "\u0156\001\002\000\004\054\251\001\002\000\006\012\u0158" +
    "\026\257\001\002\000\010\002\uff75\015\136\057\uff75\001" +
    "\002\000\006\002\uffea\057\uffea\001\002\000\042\007\127" +
    "\012\u015b\017\130\020\115\021\113\022\124\024\125\025" +
    "\114\026\116\027\123\030\110\032\120\034\112\035\117" +
    "\036\111\042\126\001\002\000\062\002\uff99\005\uff99\007" +
    "\uff99\010\uff99\012\uff99\013\uff99\014\uff99\016\uff99\017\uff99" +
    "\020\uff99\021\uff99\022\uff99\024\uff99\025\uff99\026\uff99\027" +
    "\uff99\030\uff99\032\uff99\034\uff99\035\uff99\036\uff99\041\uff99" +
    "\042\uff99\057\uff99\001\002\000\060\005\uffcd\006\uffba\007" +
    "\uffba\011\072\013\uffba\015\uffba\017\uffba\020\uffba\021\uffba" +
    "\022\uffba\024\uffba\025\uffba\026\uffba\027\uffba\030\uffba\031" +
    "\uffba\032\uffba\033\uffba\034\uffba\035\uffba\036\uffba\042\uffba" +
    "\065\uffcd\001\002\000\012\002\uff7c\014\uff7c\057\uff7c\073" +
    "\u016c\001\002\000\046\011\ufffd\014\ufffd\015\ufffd\030\ufffd" +
    "\037\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd\052" +
    "\ufffd\053\ufffd\054\ufffd\055\ufffd\057\006\064\ufffd\070\ufffd" +
    "\072\ufffd\001\002\000\006\014\u0167\072\u0166\001\002\000" +
    "\044\011\017\014\uffd1\015\070\030\026\037\031\045\021" +
    "\046\040\047\044\050\065\051\062\052\014\053\u015c\054" +
    "\056\055\063\064\045\070\041\072\uffd1\001\002\000\010" +
    "\014\uffcf\057\uffcf\072\uffcf\001\002\000\010\014\ufffd\057" +
    "\006\072\ufffd\001\002\000\046\011\017\014\ufffe\015\070" +
    "\030\026\037\031\045\021\046\040\047\044\050\065\051" +
    "\062\052\014\053\u015c\054\056\055\063\057\216\064\045" +
    "\070\041\072\ufffe\001\002\000\006\014\uffd2\072\uffd2\001" +
    "\002\000\010\014\uffd0\057\uffd0\072\uffd0\001\002\000\004" +
    "\013\u0168\001\002\000\010\002\uff7d\014\uff7d\057\uff7d\001" +
    "\002\000\050\011\ufffd\014\ufffd\015\ufffd\030\ufffd\037\ufffd" +
    "\045\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd\053" +
    "\ufffd\054\ufffd\055\ufffd\057\006\064\ufffd\066\ufffd\070\ufffd" +
    "\071\ufffd\001\002\000\004\014\u016a\001\002\000\004\014" +
    "\u016b\001\002\000\010\002\uff7e\014\uff7e\057\uff7e\001\002" +
    "\000\004\013\u016d\001\002\000\050\011\ufffd\014\ufffd\015" +
    "\ufffd\030\ufffd\037\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd" +
    "\051\ufffd\052\ufffd\053\ufffd\054\ufffd\055\ufffd\057\006\064" +
    "\ufffd\066\ufffd\070\ufffd\071\ufffd\001\002\000\004\014\u016f" +
    "\001\002\000\010\002\uff7b\014\uff7b\057\uff7b\001\002\000" +
    "\040\011\017\015\070\030\026\037\031\045\021\046\040" +
    "\047\044\050\065\051\062\052\014\053\071\054\056\055" +
    "\063\064\045\070\041\001\002\000\046\002\uffbf\007\127" +
    "\014\uffbf\017\130\020\115\021\113\022\124\024\125\025" +
    "\114\026\116\027\123\030\110\032\120\034\112\035\117" +
    "\036\111\042\126\057\uffbf\001\002\000\004\011\u0173\001" +
    "\002\000\006\012\uffdf\053\320\001\002\000\004\012\u0175" +
    "\001\002\000\004\013\u0176\001\002\000\050\011\ufffd\014" +
    "\ufffd\015\ufffd\030\ufffd\037\ufffd\045\ufffd\046\ufffd\047\ufffd" +
    "\050\ufffd\051\ufffd\052\ufffd\053\ufffd\054\ufffd\055\ufffd\057" +
    "\006\064\ufffd\066\ufffd\070\ufffd\071\ufffd\001\002\000\004" +
    "\014\u0178\001\002\000\006\002\uffe2\057\uffe2\001\002\000" +
    "\040\011\017\015\070\030\026\037\031\045\021\046\040" +
    "\047\044\050\065\051\062\052\014\053\071\054\056\055" +
    "\063\064\045\070\041\001\002\000\062\002\uffb5\005\uffb5" +
    "\007\127\010\uffb5\012\uffb5\013\uffb5\014\uffb5\016\uffb5\017" +
    "\uffb5\020\uffb5\021\uffb5\022\uffb5\024\uffb5\025\uffb5\026\116" +
    "\027\123\030\uffb5\032\uffb5\034\uffb5\035\uffb5\036\uffb5\041" +
    "\uffb5\042\uffb5\057\uffb5\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0179\000\010\003\003\004\006\005\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\070" +
    "\006\065\007\063\010\027\011\010\015\066\016\023\026" +
    "\026\030\047\034\032\036\060\041\042\043\014\045\011" +
    "\046\035\047\007\050\046\052\057\053\045\054\034\057" +
    "\022\071\031\072\056\074\053\075\051\100\024\102\036" +
    "\115\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\031\367\036\372\043\100\045\011\046" +
    "\035\050\046\052\077\053\074\054\076\057\022\065\u015c" +
    "\067\365\071\031\072\056\073\371\074\053\075\051\115" +
    "\021\001\001\000\036\036\u0159\043\100\045\011\046\035" +
    "\050\046\052\077\053\074\054\076\057\022\071\031\072" +
    "\056\074\053\075\051\115\021\001\001\000\004\027\u014b" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\036\u014a" +
    "\043\100\045\011\046\035\050\046\052\077\053\074\054" +
    "\076\057\022\071\031\072\056\074\053\075\051\115\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\036" +
    "\u0149\043\100\045\011\046\035\050\046\052\077\053\074" +
    "\054\076\057\022\071\031\072\056\074\053\075\051\115" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\012\316\013" +
    "\315\014\321\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\022\243\023\237\024\240\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\036\216\043\100\045\011\046\035\050\046\052\077\053" +
    "\074\054\076\057\022\071\031\072\056\074\053\075\051" +
    "\115\021\001\001\000\006\003\212\004\213\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\036\204\043\100\045\011\046\035\050\046\052\077\053" +
    "\074\054\076\055\205\056\075\057\022\071\031\072\056" +
    "\074\053\075\051\115\021\001\001\000\002\001\001\000" +
    "\042\036\072\043\100\045\011\046\035\050\046\052\077" +
    "\053\074\054\076\055\073\056\075\057\022\071\031\072" +
    "\056\074\053\075\051\115\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\036\106\043\100\045\011\046\035\050" +
    "\046\052\077\053\074\054\076\057\022\071\031\072\056" +
    "\074\053\075\051\115\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\036\177\043\100\045\011\046\035\050\046\052\077\053" +
    "\074\054\076\057\022\071\031\072\056\074\053\075\051" +
    "\115\021\001\001\000\036\036\176\043\100\045\011\046" +
    "\035\050\046\052\077\053\074\054\076\057\022\071\031" +
    "\072\056\074\053\075\051\115\021\001\001\000\036\036" +
    "\175\043\100\045\011\046\035\050\046\052\077\053\074" +
    "\054\076\057\022\071\031\072\056\074\053\075\051\115" +
    "\021\001\001\000\036\036\174\043\100\045\011\046\035" +
    "\050\046\052\077\053\074\054\076\057\022\071\031\072" +
    "\056\074\053\075\051\115\021\001\001\000\036\036\173" +
    "\043\100\045\011\046\035\050\046\052\077\053\074\054" +
    "\076\057\022\071\031\072\056\074\053\075\051\115\021" +
    "\001\001\000\036\036\172\043\100\045\011\046\035\050" +
    "\046\052\077\053\074\054\076\057\022\071\031\072\056" +
    "\074\053\075\051\115\021\001\001\000\036\036\171\043" +
    "\100\045\011\046\035\050\046\052\077\053\074\054\076" +
    "\057\022\071\031\072\056\074\053\075\051\115\021\001" +
    "\001\000\036\036\170\043\100\045\011\046\035\050\046" +
    "\052\077\053\074\054\076\057\022\071\031\072\056\074" +
    "\053\075\051\115\021\001\001\000\036\036\167\043\100" +
    "\045\011\046\035\050\046\052\077\053\074\054\076\057" +
    "\022\071\031\072\056\074\053\075\051\115\021\001\001" +
    "\000\036\036\165\043\100\045\011\046\035\050\046\052" +
    "\077\053\074\054\076\057\022\071\031\072\056\074\053" +
    "\075\051\115\021\001\001\000\002\001\001\000\036\036" +
    "\164\043\100\045\011\046\035\050\046\052\077\053\074" +
    "\054\076\057\022\071\031\072\056\074\053\075\051\115" +
    "\021\001\001\000\036\036\163\043\100\045\011\046\035" +
    "\050\046\052\077\053\074\054\076\057\022\071\031\072" +
    "\056\074\053\075\051\115\021\001\001\000\036\036\162" +
    "\043\100\045\011\046\035\050\046\052\077\053\074\054" +
    "\076\057\022\071\031\072\056\074\053\075\051\115\021" +
    "\001\001\000\006\052\152\112\150\001\001\000\002\001" +
    "\001\000\036\036\130\043\100\045\011\046\035\050\046" +
    "\052\077\053\074\054\076\057\022\071\031\072\056\074" +
    "\053\075\051\115\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\036\072\043\100\045\011\046\035\050" +
    "\046\052\077\053\074\054\076\055\133\056\075\057\022" +
    "\071\031\072\056\074\053\075\051\115\021\001\001\000" +
    "\002\001\001\000\004\101\136\001\001\000\006\040\140" +
    "\042\137\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\036\143\043\100" +
    "\045\011\046\035\050\046\052\077\053\074\054\076\057" +
    "\022\071\031\072\056\074\053\075\051\115\021\001\001" +
    "\000\002\001\001\000\004\042\146\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\036\154\043" +
    "\100\045\011\046\035\050\046\052\077\053\074\054\076" +
    "\057\022\071\031\072\056\074\053\075\051\113\156\114" +
    "\155\115\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\036\161\043" +
    "\100\045\011\046\035\050\046\052\077\053\074\054\076" +
    "\057\022\071\031\072\056\074\053\075\051\115\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\036\201" +
    "\043\100\045\011\046\035\050\046\052\077\053\074\054" +
    "\076\057\022\071\031\072\056\074\053\075\051\115\021" +
    "\001\001\000\002\001\001\000\004\101\203\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\036\210\043\100\045\011\046\035\050" +
    "\046\052\077\053\074\054\076\057\022\071\031\072\056" +
    "\074\053\075\051\115\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\064\010\214\011\010\015\066\016\023" +
    "\026\026\030\047\034\032\036\060\041\042\043\014\045" +
    "\011\046\035\047\007\050\046\052\057\053\045\054\034" +
    "\057\022\071\031\072\056\074\053\075\051\100\024\102" +
    "\036\115\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\003\004" +
    "\220\001\001\000\004\076\221\001\001\000\006\003\003" +
    "\004\226\001\001\000\002\001\001\000\036\036\224\043" +
    "\100\045\011\046\035\050\046\052\077\053\074\054\076" +
    "\057\022\071\031\072\056\074\053\075\051\115\021\001" +
    "\001\000\002\001\001\000\006\003\003\004\230\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\036\233\043\100\045\011\046\035" +
    "\050\046\052\077\053\074\054\076\057\022\071\031\072" +
    "\056\074\053\075\051\115\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\022\244\023\237\024\240\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\017\252\020\253\021\251\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\255\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\261\001\001\000\004\101\262" +
    "\001\001\000\002\001\001\000\006\020\264\021\251\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\017\267" +
    "\020\253\021\251\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\272\001\001\000\004\101\273\001\001" +
    "\000\002\001\001\000\004\024\275\001\001\000\002\001" +
    "\001\000\004\025\277\001\001\000\002\001\001\000\010" +
    "\017\301\020\253\021\251\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\017\304\020\253\021\251\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\101\314\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\322\013\315\014\321\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\036\325\043\100" +
    "\045\011\046\035\050\046\052\077\053\074\054\076\057" +
    "\022\071\031\072\056\074\053\075\051\115\021\001\001" +
    "\000\002\001\001\000\010\003\003\004\327\032\330\001" +
    "\001\000\052\033\336\034\333\035\334\036\060\041\042" +
    "\043\014\045\011\046\035\047\007\050\046\051\332\052" +
    "\057\053\045\054\034\057\022\071\031\072\056\074\053" +
    "\075\051\115\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\036\342\043\100\045\011\046\035\050\046\052" +
    "\077\053\074\054\076\057\022\071\031\072\056\074\053" +
    "\075\051\115\021\001\001\000\006\003\337\004\340\001" +
    "\001\000\050\034\333\035\341\036\060\041\042\043\014" +
    "\045\011\046\035\047\007\050\046\051\332\052\057\053" +
    "\045\054\034\057\022\071\031\072\056\074\053\075\051" +
    "\115\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\036\344\043\100\045\011\046\035" +
    "\050\046\052\077\053\074\054\076\057\022\071\031\072" +
    "\056\074\053\075\051\115\021\001\001\000\002\001\001" +
    "\000\036\036\346\043\100\045\011\046\035\050\046\052" +
    "\077\053\074\054\076\057\022\071\031\072\056\074\053" +
    "\075\051\115\021\001\001\000\002\001\001\000\010\003" +
    "\003\004\327\032\350\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\353\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\012\356\013\315\014\321\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\003\004" +
    "\361\060\362\001\001\000\056\031\367\036\372\043\100" +
    "\045\011\046\035\050\046\052\077\053\074\054\076\057" +
    "\022\061\366\062\375\065\376\066\364\067\365\071\031" +
    "\072\056\073\371\074\053\075\051\077\374\115\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\u0129\004\u012a\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\070\u0107\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\036" +
    "\072\043\100\045\011\046\035\050\046\052\077\053\074" +
    "\054\076\055\u0104\056\075\057\022\071\031\072\056\074" +
    "\053\075\051\115\021\001\001\000\002\001\001\000\004" +
    "\101\u0106\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\036\u0109\043\100\045\011\046\035\050\046\052\077" +
    "\053\074\054\076\057\022\071\031\072\056\074\053\075" +
    "\051\115\021\001\001\000\002\001\001\000\010\003\003" +
    "\004\327\032\u010b\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\036\072\043\100\045\011" +
    "\046\035\050\046\052\077\053\074\054\076\055\u010f\056" +
    "\075\057\022\071\031\072\056\074\053\075\051\115\021" +
    "\001\001\000\002\001\001\000\004\101\u0111\001\001\000" +
    "\002\001\001\000\042\036\072\043\100\045\011\046\035" +
    "\050\046\052\077\053\074\054\076\055\u0113\056\075\057" +
    "\022\071\031\072\056\074\053\075\051\115\021\001\001" +
    "\000\002\001\001\000\004\077\u0115\001\001\000\004\070" +
    "\u0117\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\003\003\004\327\032\u0119\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\043\u011e\044\u011f" +
    "\057\u0120\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\036\060\043\100\045\011\046\035\050\046\052\077\053" +
    "\074\054\076\057\022\071\u0123\072\056\074\053\075\051" +
    "\115\021\001\001\000\002\001\001\000\036\036\060\043" +
    "\100\045\011\046\035\050\046\052\077\053\074\054\076" +
    "\057\022\071\u0125\072\056\074\053\075\051\115\021\001" +
    "\001\000\002\001\001\000\036\036\060\043\100\045\011" +
    "\046\035\050\046\052\077\053\074\054\076\057\022\071" +
    "\u0127\072\056\074\053\075\051\115\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\054\031\367\036\372\043" +
    "\100\045\011\046\035\050\046\052\077\053\074\054\076" +
    "\057\022\062\u012b\065\376\066\364\067\365\071\031\072" +
    "\056\073\371\074\053\075\051\077\374\115\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\003\004" +
    "\327\032\u012d\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\103\u0132\104\u0133\001\001\000" +
    "\002\001\001\000\006\003\003\004\u0145\001\001\000\002" +
    "\001\001\000\010\107\u0135\110\u0138\111\u0137\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\111\u013a\001\001\000\002\001\001\000" +
    "\010\104\u013f\105\u013d\106\u013e\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\107\u0142\110\u0138\111\u0137\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\104\u0148\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\u0151\001\001\000" +
    "\002\001\001\000\004\101\u0153\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\u0156\001\001\000\002\001" +
    "\001\000\004\101\u0158\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\003\003\004\u015f\063\u015e\001\001\000\002" +
    "\001\001\000\050\031\367\036\372\043\100\045\011\046" +
    "\035\050\046\052\077\053\074\054\076\057\022\064\u0161" +
    "\065\u0160\067\365\071\031\072\056\073\371\074\053\075" +
    "\051\115\021\001\001\000\002\001\001\000\006\003\u0162" +
    "\004\u0163\001\001\000\046\031\367\036\372\043\100\045" +
    "\011\046\035\050\046\052\077\053\074\054\076\057\022" +
    "\065\u0164\067\365\071\031\072\056\073\371\074\053\075" +
    "\051\115\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\003\004" +
    "\327\032\u0168\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\003\004" +
    "\327\032\u016d\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\036\u0170\043\100\045\011\046\035\050\046\052" +
    "\077\053\074\054\076\057\022\071\031\072\056\074\053" +
    "\075\051\115\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\012\u0173\013\315\014\321\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\003\003\004\327\032" +
    "\u0176\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\036\u0179\043\100\045\011\046\035\050\046\052\077\053" +
    "\074\054\076\057\022\071\031\072\056\074\053\075\051" +
    "\115\021\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$IniParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$IniParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$IniParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	public Types types;
	public PrintStream out = System.out;
	public PrintStream err = System.err;
	private int userTypeIndex = 1;

	public int nextUserTypeIndex() {
		return userTypeIndex++;
	}

	public List<AstNode> topLevels =  new ArrayList<AstNode>();

	public IniEnv env;
	public List<Executable> builtInExecutables;

	private List<Executable> createBuiltInExecutables() {
		return Arrays.asList( //
			new AnyFunction(this), //
			new ClearFunction(this), //
			new CopyFunction(this), //
			new ErrorFunction(this), //
			new FirstFunction(this), //
			new KeyFunction(this), //
			new KillAt(this), //
			new PrintFunction(this), //
			new PrintlnFunction(this), //
			new ProduceFunction(this), //
			new ReadKeyboardFunction(this), //
			new RestFunction(this), //
			new SizeFunction(this), //
			new SleepFunction(this), //
			new SwapFunction(this), //
			new TimeFunction(this), //
			new ToIntFunction(this), //
			new ToJsonFunction(this), //
			new ToLongFunction(this), //
			new ToByteFunction(this), //
			new ToCharFunction(this), //
			new ToFloatFunction(this), //
			new ToDoubleFunction(this), //
			new ToStringFunction(this), //
			new WaitFunction(this), //
			// ========================
			// will be removed from default builtins and accessed through bindings
			new StartWebServiceFunction(this), //
			new StopWebServiceFunction(this)
		);
	}
	
	public static IniParser createParserForFile(IniEnv env, IniParser parent, String fileName) throws java.io.FileNotFoundException {
      IniScanner scanner= new IniScanner(new java.io.FileReader(fileName));
      scanner.setFileName(fileName);
      IniParser parser= new IniParser(scanner);
      if(env==null) {
      	env = new IniEnv();
      }
      parser.env = env;
      if(parent != null) {
	      parser.types = parent.types;
	      parser.builtInExecutables = parser.builtInExecutables;
	  } else {
	      parser.types = new Types(parser);
	      parser.builtInExecutables = parser.createBuiltInExecutables();
	  }
      return parser;
	}

	public static IniParser createParserForCode(IniEnv env, IniParser parent, String code) throws Exception {
      IniScanner scanner= new IniScanner(new java.io.StringReader(code));
      scanner.setFileName("<none>");
      IniParser parser= new IniParser(scanner);
      if(env==null) {
      	env = new IniEnv();
      }
      parser.env = env;
      if(parent != null) {
	      parser.types = parent.types;
	      parser.builtInExecutables = parser.builtInExecutables;
	  } else {
	      parser.types = new Types(parser);
	      parser.builtInExecutables = parser.createBuiltInExecutables();
	  }
      return parser;
	}

	public List<SyntaxError> errors = new ArrayList<SyntaxError>();
	
  public void syntax_error(java_cup.runtime.Symbol current) {
    //errors.add(new SyntaxError("syntax error: '"+current.value + "' is not expected", at " + (current.left+1)+"("+(current.right+1)+")" );
    errors.add(new SyntaxError((Token)current.value, "'"+current.value + "' is not expected"));
  }
  
  	public void printErrors(PrintStream out) {
		for (SyntaxError error : errors) {
			out.println(error.toString());
		}
	}

	public boolean hasErrors() {
		return !errors.isEmpty();
	}
  
  
  

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$IniParser$actions {
  private final IniParser parser;

  /** Constructor */
  CUP$IniParser$actions(IniParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$IniParser$do_action(
    int                        CUP$IniParser$act_num,
    java_cup.runtime.lr_parser CUP$IniParser$parser,
    java.util.Stack            CUP$IniParser$stack,
    int                        CUP$IniParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$IniParser$result;

      /* select the action based on the action number */
      switch (CUP$IniParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // field ::= IDENTIFIER COL list_constructor 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = new Field(parser,(Token)i,i.toString(),(Constructor)c);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(71/*field*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // field_list ::= field 
            {
              Object RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List l=new ArrayList();
		l.add(f);
		RESULT=l;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(70/*field_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // field_list ::= field_list COMMA field 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=(List)l;
		list.add(f);
		RESULT=list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(70/*field_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // field_list_opt ::= 
            {
              Object RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(69/*field_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // field_list_opt ::= field_list 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = l; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(69/*field_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // list_constructor ::= list_constructor MULT 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 
		RESULT = new Constructor(parser,(Token)m,(Constructor)c);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(67/*list_constructor*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // list_constructor ::= constructor_or_type 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = c; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(67/*list_constructor*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // constructor_or_type ::= TIDENTIFIER 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = new Constructor(parser,(Token)i,i.toString(),null);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(68/*constructor_or_type*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // constructor_or_type ::= constructor 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = c;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(68/*constructor_or_type*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // constructor ::= LSPAREN field_list_opt RSPAREN 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
		RESULT = new Constructor(parser,(Token)i,null,(List)l);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(66/*constructor*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // constructor ::= TIDENTIFIER LSPAREN field_list_opt RSPAREN 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
		RESULT = new Constructor(parser,(Token)i,i.toString(),(List)l);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(66/*constructor*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // constructor_list ::= constructor 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=new ArrayList();
		list.add(c);
		RESULT=list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(65/*constructor_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // constructor_list ::= constructor_list lf_opt TUBE constructor 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=(List)l;
		list.add(c);
		RESULT=list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(65/*constructor_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // usertype ::= TYPE TIDENTIFIER ASSIGN constructor_list lf_opt END 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		
		UserType type = new UserType(parser,(Token)t,i.toString(),(List)l);
		// parser.parsedTypes.add(type);
		RESULT = type;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(64/*usertype*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // set_logical_expr ::= var_list OF var_access TUBE logical_expr 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int ofleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int ofright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object of = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = new SetExpression(parser,(Token)of,(List)l,(Expression)s,(Expression)e);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(57/*set_logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // set_logical_expr ::= var_list OF set_var_access TUBE logical_expr 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int ofleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int ofright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object of = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = new SetExpression(parser,(Token)of,(List)l,(Expression)s,(Expression)e);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(57/*set_logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // set_logical_expr ::= var_list OF list_expr TUBE logical_expr 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int ofleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int ofright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object of = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = new SetExpression(parser,(Token)of,(List)l,(Expression)s,(Expression)e);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(57/*set_logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // guard ::= set_logical_expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(53/*guard*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // guard ::= expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(53/*guard*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // ret_statement ::= RETURN 
            {
              Object RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = new ReturnStatement(parser,(Token)r,null); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(39/*ret_statement*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // ret_statement ::= RETURN expr 
            {
              Object RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = new ReturnStatement(parser,(Token)r,(Expression)e); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(39/*ret_statement*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // boolean_expr_opt ::= 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(54/*boolean_expr_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // boolean_expr_opt ::= ANDAND expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(54/*boolean_expr_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // basic_rule ::= guard LCPAREN statement_list_opt RCPAREN 
            {
              Object RESULT = null;
		int gleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
		RESULT = new Rule(parser,((AstNode)g).token(),null,(Expression)g,(Sequence)l, null);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(51/*basic_rule*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // event_rule ::= DOLLAR LPAREN arg_list_opt RPAREN at_expr boolean_expr_opt LCPAREN statement_list_opt RCPAREN 
            {
              Object RESULT = null;
		int elleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).value;
		int atleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object at = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
		RESULT = new Rule(parser,((AstNode)at).token(),(AtPredicate)at,(Expression)g,(Sequence)l, (List)el);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(52/*event_rule*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // event_rule ::= at_expr boolean_expr_opt LCPAREN statement_list_opt RCPAREN 
            {
              Object RESULT = null;
		int atleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object at = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
		RESULT = new Rule(parser,((AstNode)at).token(),(AtPredicate)at,(Expression)g,(Sequence)l, null);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(52/*event_rule*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // rule ::= basic_rule 
            {
              Object RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=r; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(48/*rule*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // rule ::= event_rule 
            {
              Object RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=r; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(48/*rule*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // identifier_assignment_list ::= identifier_assignment 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=new ArrayList();
		list.add(e);
		RESULT=list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(30/*identifier_assignment_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // identifier_assignment_list ::= identifier_assignment_list COMMA identifier_assignment 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=(List)l;
		list.add(e);
		RESULT=list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(30/*identifier_assignment_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // identifier_assignment_list_opt ::= 
            {
              Object RESULT = null;
		 RESULT=new ArrayList(); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(29/*identifier_assignment_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // identifier_assignment_list_opt ::= identifier_assignment_list 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=l; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(29/*identifier_assignment_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // arg_list ::= expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=new ArrayList();
		list.add(e);
		RESULT=list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(44/*arg_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // arg_list ::= arg_list COMMA expr 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=(List)l;
		list.add(e);
		RESULT=list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(44/*arg_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // arg_list_opt ::= 
            {
              Object RESULT = null;
		 RESULT=new ArrayList(); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(43/*arg_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // arg_list_opt ::= arg_list 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=l; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(43/*arg_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // dot_invocation ::= expr INVDOT IDENTIFIER LPAREN arg_list_opt RPAREN annotations_opt 
            {
              Object RESULT = null;
		int targetleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).left;
		int targetright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).right;
		Object target = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List args = (List)l;
		args.add(0, target);
		Invocation inv = new Invocation(parser,(Token)i,i.toString(),args);
		inv.annotations = (List)a;
		RESULT = inv;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(41/*dot_invocation*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // invocation ::= IDENTIFIER LPAREN arg_list_opt RPAREN annotations_opt 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		Invocation inv = new Invocation(parser,(Token)i,i.toString(),(List)l);
		inv.annotations = (List)a;
		RESULT = inv;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(40/*invocation*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // pre_post_op ::= var_access MINUSMINUS 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new UnaryOperator(parser,(Token)op,UnaryOperator.Kind.POST_DEC,(Expression)e); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(42/*pre_post_op*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // pre_post_op ::= var_access PLUSPLUS 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new UnaryOperator(parser,(Token)op,UnaryOperator.Kind.POST_INC,(Expression)e); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(42/*pre_post_op*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // at_expr ::= AT IDENTIFIER LPAREN arg_list_opt RPAREN annotations_opt 
            {
              Object RESULT = null;
		int atleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).right;
		Object at = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 
	RESULT = new AtPredicate(parser,(Token)at,name.toString(),(List)a,(List)rp, null);

              CUP$IniParser$result = new java_cup.runtime.Symbol(61/*at_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // at_expr ::= IDENTIFIER COL AT IDENTIFIER LPAREN arg_list_opt RPAREN annotations_opt 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).value;
		int atleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).right;
		Object at = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 
	RESULT = new AtPredicate(parser,(Token)at,name.toString(),(List)a,(List)rp, id.toString());

              CUP$IniParser$result = new java_cup.runtime.Symbol(61/*at_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // annotations_opt ::= 
            {
              Object RESULT = null;
		
	RESULT = (List)null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(63/*annotations_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // annotations_opt ::= LSPAREN identifier_assignment_list RSPAREN 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
	RESULT = (List)l;

              CUP$IniParser$result = new java_cup.runtime.Symbol(63/*annotations_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // field_match_expr_list ::= expr 
            {
              Object RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List l=new ArrayList();
		l.add(f);
		RESULT=l;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(74/*field_match_expr_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // field_match_expr_list ::= field_match_expr_list COMMA expr 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=(List)l;
		list.add(f);
		RESULT=list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(74/*field_match_expr_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // field_match_expr_list_opt ::= 
            {
              Object RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(73/*field_match_expr_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // field_match_expr_list_opt ::= field_match_expr_list 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = l; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(73/*field_match_expr_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // case_expr ::= CASE basic_rule ELSE LCPAREN statement_list_opt RCPAREN 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
		RESULT = new CaseStatement(parser,(Token)c,(List<Rule>)(List)Arrays.asList(r),(Sequence)s); 
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(37/*case_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // case_expr ::= CASE basic_rule 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = new CaseStatement(parser,(Token)c,(List<Rule>)(List)Arrays.asList(r),null); 
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(37/*case_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // case_expr ::= CASE LCPAREN basic_rule_list_opt RCPAREN 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
		RESULT = new CaseStatement(parser,(Token)c, (List)l,null); 
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(37/*case_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // case_expr ::= CASE LCPAREN basic_rule_list_opt DEFAULT LCPAREN statement_list_opt RCPAREN RCPAREN 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		
		RESULT = new CaseStatement(parser,(Token)c, (List)l,(Sequence)s); 
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(37/*case_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // logical_expr ::= expr MATCHES constructor_match_expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.MATCHES,(Expression)e1,(ConstructorMatchExpression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(55/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // logical_expr ::= expr MATCHES invocation 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.MATCHES,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(55/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // logical_expr ::= expr GTE expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.GTE,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(55/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // logical_expr ::= expr GT expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.GT,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(55/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // logical_expr ::= expr LTE expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.LTE,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(55/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // logical_expr ::= expr LT expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.LT,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(55/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // logical_expr ::= expr NOTEQUALS expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.NOTEQUALS,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(55/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // logical_expr ::= expr EQUALS expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.EQUALS,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(55/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // logical_expr ::= QUESTION expr 
            {
              Object RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new UnaryOperator(parser,(Token)op,UnaryOperator.Kind.OPT,(Expression)e); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(55/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // logical_expr ::= NOT expr 
            {
              Object RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new UnaryOperator(parser,(Token)op,UnaryOperator.Kind.NOT,(Expression)e); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(55/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // logical_expr ::= expr OROR expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.OR,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(55/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // logical_expr ::= expr ANDAND expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.AND,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(55/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // logical_expr ::= boolean_literal 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(55/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // algebraic_expr ::= expr DIV expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.DIV,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(56/*algebraic_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // algebraic_expr ::= expr MULT expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.MULT,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(56/*algebraic_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // algebraic_expr ::= MINUS expr 
            {
              Object RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new UnaryOperator(parser,(Token)op,UnaryOperator.Kind.MINUS,(Expression)e); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(56/*algebraic_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // algebraic_expr ::= expr MINUS expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.MINUS,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(56/*algebraic_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // algebraic_expr ::= expr PLUS expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.PLUS,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(56/*algebraic_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // algebraic_expr ::= pre_post_op 
            {
              Object RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=op; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(56/*algebraic_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // algebraic_expr ::= INT 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new NumberLiteral(parser,(Token)e,Integer.parseInt(e.toString())); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(56/*algebraic_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // algebraic_expr ::= NUM 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new NumberLiteral(parser,(Token)e,Double.parseDouble(e.toString())); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(56/*algebraic_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // list_concat_expr ::= expr AND expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.CONCAT,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(75/*list_concat_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // lambda_expr ::= LAMBDA param_list_opt IMPLIES expr 
            {
              Object RESULT = null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int defleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object def = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		Function f = new Function(parser, (Token)def, null, (List)vars, new Sequence(s));	
		f.oneExpressionLambda = true;
		RESULT = f;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(38/*lambda_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // lambda_expr ::= LAMBDA LPAREN param_list_opt RPAREN IMPLIES expr 
            {
              Object RESULT = null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int defleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object def = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		Function f = new Function(parser, (Token)def, null, (List)vars, new Sequence(s));
		f.oneExpressionLambda = true;
		RESULT = f;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(38/*lambda_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // lambda_expr ::= LAMBDA param_list_opt IMPLIES LCPAREN statement_list_opt RCPAREN 
            {
              Object RESULT = null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int defleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object def = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object statements = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
		RESULT = new Function(parser, (Token)def, null, (List)vars, (Sequence)statements);	
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(38/*lambda_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // lambda_expr ::= LAMBDA LPAREN param_list_opt RPAREN IMPLIES LCPAREN statement_list_opt RCPAREN 
            {
              Object RESULT = null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).value;
		int defleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object def = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object statements = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
		RESULT = new Function(parser, (Token)def, null, (List)vars, (Sequence)statements);	
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(38/*lambda_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expr ::= LPAREN expr RPAREN 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(28/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expr ::= lambda_expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(28/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expr ::= list_concat_expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(28/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expr ::= constructor_expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(28/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expr ::= list_expr 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=l; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(28/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expr ::= string_expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(28/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expr ::= logical_expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(28/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expr ::= algebraic_expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(28/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expr ::= CHAR 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = new CharLiteral(parser,(Token)c,c.toString().charAt(0)); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(28/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expr ::= dot_invocation 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(28/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expr ::= invocation 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(28/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expr ::= THIS 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = new ThisLiteral(parser,(Token)t); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(28/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expr ::= var_access 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(28/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // statement ::= ret_statement 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(27/*statement*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // statement ::= top_level_statement 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(27/*statement*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // top_level_statement ::= case_expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(26/*top_level_statement*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // top_level_statement ::= dot_invocation 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(26/*top_level_statement*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // top_level_statement ::= invocation 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(26/*top_level_statement*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // top_level_statement ::= assignment_expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(26/*top_level_statement*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // top_level_statement ::= pre_post_op 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(26/*top_level_statement*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // assignment_list ::= IDENTIFIER ASSIGN expr 
            {
              Object RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=new ArrayList();
		list.add(new Assignment(parser,(Token)f,new Variable(parser,(Token)f,f.toString()),(Expression)e));
		RESULT=list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(60/*assignment_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // assignment_list ::= assignment_list COMMA lf_opt IDENTIFIER ASSIGN expr 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=(List)l;
		list.add(new Assignment(parser,(Token)f,new Variable(parser,(Token)f,f.toString()),(Expression)e));
		RESULT=list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(60/*assignment_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // constructor_match_expr ::= TIDENTIFIER 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = new ConstructorMatchExpression(parser,(Token)s,s.toString(),null);	
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(72/*constructor_match_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // constructor_match_expr ::= TIDENTIFIER LSPAREN field_match_expr_list_opt RSPAREN 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
		RESULT = new ConstructorMatchExpression(parser,(Token)s,s.toString(),(List)l);	
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(72/*constructor_match_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // constructor_expr ::= TIDENTIFIER LSPAREN lf_opt assignment_list lf_opt RSPAREN 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		
		RESULT = new SetConstructor(parser,(Token)s,s.toString(),(List)l);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(59/*constructor_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // list_expr ::= LSPAREN arg_list_opt RSPAREN 
            {
              Object RESULT = null;
		int openleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int openright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object open = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int closeleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int closeright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object close = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = new ListExpression(parser,(Token)open,(List)l);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(45/*list_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // list_expr ::= LSPAREN expr DOTDOT expr RSPAREN 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int lbleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object lb = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int ubleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int ubright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object ub = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = new SetDeclaration(parser,(Token)l,(Expression)lb,(Expression)ub);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(45/*list_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // single_string ::= STRING 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new StringLiteral(parser,(Token)s,s.toString()); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(35/*single_string*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // string_expr ::= single_string PLUS expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.PLUS,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(36/*string_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // string_expr ::= single_string 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=s; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(36/*string_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // var_access ::= var_access DOT IDENTIFIER 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = new FieldAccess(parser,(Token)t,(VariableAccess)v,i.toString()); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(33/*var_access*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // var_access ::= var_access LSPAREN expr DOTDOT expr RSPAREN 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int minleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int minright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object min = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int maxleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int maxright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object max = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		 RESULT = new SubArrayAccess(parser,(Token)t,(VariableAccess)v,(Expression)min,(Expression)max); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(33/*var_access*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // var_access ::= var_access LSPAREN expr RSPAREN 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		 RESULT = new ArrayAccess(parser,(Token)t,(VariableAccess)v,(Expression)e); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(33/*var_access*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // var_access ::= IDENTIFIER 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = new Variable(parser,(Token)v,v.toString()); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(33/*var_access*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // boolean_literal ::= FALSE 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BooleanLiteral(parser,(Token)e,false); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(58/*boolean_literal*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // boolean_literal ::= TRUE 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BooleanLiteral(parser,(Token)e,true); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(58/*boolean_literal*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // set_var_access ::= TIDENTIFIER 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = new TypeVariable(parser,(Token)v,v.toString()); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(34/*set_var_access*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // identifier_assignment ::= IDENTIFIER ASSIGN expr 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 
		RESULT = new Assignment(parser,(Token)a,new Variable(parser,(Token)v,v.toString()),(Expression)e);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(32/*identifier_assignment*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // assignment_expr ::= var_access ASSIGN expr 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = new Assignment(parser,(Token)a,(VariableAccess)v,(Expression)e);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(31/*assignment_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // type_decl ::= TIDENTIFIER LT TIDENTIFIER 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 
		TypeVariable tv = new TypeVariable(parser,(Token)i,i.toString(), true);
		TypeVariable sv = new TypeVariable(parser,(Token)s,s.toString());
		tv.superType = sv;
		RESULT = tv;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(18/*type_decl*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // type_decl ::= TIDENTIFIER 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = new TypeVariable(parser,(Token)i,i.toString(), true); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(18/*type_decl*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // type_decl_list ::= type_decl 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List l=new ArrayList();
		l.add(t);
		RESULT=l;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(17/*type_decl_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // type_decl_list ::= type_decl_list COMMA type_decl 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=(List)l;
		list.add(t);
		RESULT=list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(17/*type_decl_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // type_decl_list_opt ::= 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(16/*type_decl_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // type_decl_list_opt ::= type_decl_list 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = l; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(16/*type_decl_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // type ::= type MULT 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		 RESULT = new TypeVariable(parser,((TypeVariable)t).token,(TypeVariable)t); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(15/*type*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // type ::= TIDENTIFIER LPAREN type_list RPAREN 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int typesleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int typesright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object types = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
		TypeVariable tv = new TypeVariable(parser,(Token)i,i.toString()); 
		tv.typeParameters = (List)types;
		RESULT = tv;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(15/*type*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // type ::= TIDENTIFIER 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = new TypeVariable(parser,(Token)i,i.toString()); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(15/*type*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // type_list ::= type 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List l=new ArrayList();
		l.add(t);
		RESULT=l;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(14/*type_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // type_list ::= type_list COMMA type 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=(List)l;
		list.add(t);
		RESULT=list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(14/*type_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // type_list_opt ::= 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(13/*type_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // type_list_opt ::= type_list 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = l; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(13/*type_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // var_list ::= IDENTIFIER 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List l=new ArrayList();
		l.add(new Variable(parser,(Token)i,i.toString()));
		RESULT=l;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(23/*var_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // var_list ::= var_list COMMA IDENTIFIER 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=(List)l;
		list.add(new Variable(parser,(Token)i,i.toString()));
		RESULT=list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(23/*var_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // basic_rule_list ::= basic_rule 
            {
              Object RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List l=new ArrayList();
		l.add(r);
		RESULT=l;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(50/*basic_rule_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // basic_rule_list ::= basic_rule_list lf basic_rule 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=(List)l;
		list.add(r);
		RESULT = list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(50/*basic_rule_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // basic_rule_list_opt ::= lf_opt 
            {
              Object RESULT = null;
		 RESULT=new ArrayList(); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(49/*basic_rule_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // basic_rule_list_opt ::= lf_opt basic_rule_list lf_opt 
            {
              Object RESULT = null;
		int rlleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int rlright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object rl = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		 RESULT=rl; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(49/*basic_rule_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // rule_list ::= rule 
            {
              Object RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List l=new ArrayList();
		l.add(r);
		RESULT=l;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(47/*rule_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // rule_list ::= rule_list lf rule 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=(List)l;
		list.add(r);
		RESULT = list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(47/*rule_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // rule_list_opt ::= lf_opt 
            {
              Object RESULT = null;
		 RESULT=new ArrayList(); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(46/*rule_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // rule_list_opt ::= lf_opt rule_list lf_opt 
            {
              Object RESULT = null;
		int rlleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int rlright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object rl = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		 RESULT=rl; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(46/*rule_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statement_list ::= statement 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		Sequence seq=new Sequence(s);
		RESULT=seq;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(25/*statement_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // statement_list ::= statement_list lf statement 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		Sequence seq=(Sequence)l;
		seq.last().setNext(s);
		RESULT = seq;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(25/*statement_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statement_list_opt ::= lf_opt 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(24/*statement_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statement_list_opt ::= lf_opt statement_list lf_opt 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		 RESULT=l; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(24/*statement_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // param ::= IDENTIFIER 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = new Parameter(parser,(Token)i,i.toString());
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(10/*param*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // param ::= IDENTIFIER ASSIGN expr 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = new Parameter(parser,(Token)i,i.toString(),(Expression)e);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(10/*param*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // param_list ::= param 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List l=new ArrayList();
		l.add(p);
		RESULT=l;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(9/*param_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // param_list ::= param_list COMMA param 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=(List)l;
		list.add(p);
		RESULT=list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(9/*param_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // param_list_opt ::= 
            {
              Object RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(8/*param_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // param_list_opt ::= param_list 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = l; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(8/*param_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // function ::= PROCESS IDENTIFIER LPAREN param_list_opt RPAREN LCPAREN rule_list_opt RCPAREN 
            {
              Object RESULT = null;
		int defleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).right;
		Object def = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int rulesleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int rulesright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object rules = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
		Process p = new Process(parser, (Token)def, name.toString(), (List)vars, (List)rules);
		RESULT = p;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(7/*function*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // function ::= FUNCTION IDENTIFIER LPAREN param_list_opt RPAREN LCPAREN statement_list_opt RCPAREN 
            {
              Object RESULT = null;
		int defleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).right;
		Object def = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object statements = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
		Function f = new Function(parser, (Token)def, name.toString(), (List)vars, (Sequence)statements);
		RESULT = f;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(7/*function*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // at_binding ::= DECLARE AT IDENTIFIER at_binding_conf_type LPAREN type_list_opt RPAREN IMPLIES STRING 
            {
              Object RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-8)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-8)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-8)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).value;
		int ctleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left;
		int ctright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).right;
		Object ct = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).value;
		int ftleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int ftright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object ft = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int rtleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object rt = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object className = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		AtBinding b = new AtBinding(parser, (Token)d, name.toString(), (List)ct, (List) rt, className.toString());
		//parser.parsedAtBindingList.add(b);
		RESULT = b;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(62/*at_binding*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // at_binding_conf_type ::= LSPAREN type_list_opt RSPAREN 
            {
              Object RESULT = null;
		int ctleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int ctright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object ct = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
	RESULT = ct;

              CUP$IniParser$result = new java_cup.runtime.Symbol(19/*at_binding_conf_type*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // at_binding_conf_type ::= 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(19/*at_binding_conf_type*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // visibility ::= 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(21/*visibility*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // visibility ::= MINUS 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=Channel.Visibility.PRIVATE; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(21/*visibility*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // visibility ::= PLUS 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=Channel.Visibility.GLOBAL; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(21/*visibility*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // predicate_decl ::= PREDICATE IDENTIFIER STRING annotations_opt 
            {
              Object RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object expression = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = new Predicate(parser, (Token)d, name.toString(), expression.toString());
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(22/*predicate_decl*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // channel_decl ::= CHANNEL visibility IDENTIFIER LSPAREN RSPAREN LPAREN type RPAREN annotations_opt 
            {
              Object RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-8)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-8)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-8)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = new Channel(parser, (Token)d, name.toString(), (TypeVariable)t, (Channel.Visibility)v, true, (List)a);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(20/*channel_decl*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // channel_decl ::= CHANNEL visibility IDENTIFIER LPAREN type RPAREN annotations_opt 
            {
              Object RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = new Channel(parser, (Token)d, name.toString(), (TypeVariable)t, (Channel.Visibility)v, false, (List)a);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(20/*channel_decl*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // binding ::= DECLARE type_decl_list_opt 
            {
              Object RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int typedeclsleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int typedeclsright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object typedecls = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		Binding b = new Binding(parser, (Token)d, (String)null, (List)typedecls, (List)null, (TypeVariable)null, (List)null);
		RESULT = b;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(12/*binding*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // binding ::= DECLARE LPAREN type_decl_list_opt RPAREN IDENTIFIER LPAREN type_list_opt RPAREN IMPLIES type annotations_opt 
            {
              Object RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-10)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-10)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-10)).value;
		int typedeclsleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-8)).left;
		int typedeclsright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-8)).right;
		Object typedecls = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-8)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).value;
		int ftleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left;
		int ftright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).right;
		Object ft = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).value;
		int typesleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int typesright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object types = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int rtypeleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int rtyperight = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object rtype = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		Binding b = new Binding(parser, (Token)d, name.toString(), (List)typedecls, (List)types, (TypeVariable)rtype, (List)a);
		RESULT = b;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(12/*binding*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-10)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // binding ::= DECLARE IDENTIFIER LPAREN type_list_opt RPAREN IMPLIES type annotations_opt 
            {
              Object RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).value;
		int ftleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left;
		int ftright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).right;
		Object ft = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).value;
		int typesleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int typesright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object types = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int rtypeleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int rtyperight = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object rtype = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		Binding b = new Binding(parser, (Token)d, name.toString(), (List)null, (List)types, (TypeVariable)rtype, (List)a);
		//parser.parsedBindingList.add(b);
		RESULT = b;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(12/*binding*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // import_decl ::= IMPORT STRING 
            {
              Object RESULT = null;
		int itokenleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int itokenright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object itoken = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int filePathleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int filePathright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object filePath = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		Import i = new Import(parser, (Token)itoken, filePath.toString());
		RESULT = i;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(11/*import_decl*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // program_elt ::= top_level_statement 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(6/*program_elt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // program_elt ::= predicate_decl 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(6/*program_elt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // program_elt ::= channel_decl 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(6/*program_elt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // program_elt ::= usertype 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(6/*program_elt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // program_elt ::= function 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(6/*program_elt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // program_elt ::= at_binding 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(6/*program_elt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // program_elt ::= binding 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(6/*program_elt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // program_elt ::= import_decl 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(6/*program_elt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // program_elt_list ::= program_elt 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 parser.topLevels.add((AstNode)e); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(5/*program_elt_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // program_elt_list ::= program_elt_list lf program_elt 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 parser.topLevels.add((AstNode)e); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(5/*program_elt_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // program_elt_list_opt ::= 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(4/*program_elt_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // program_elt_list_opt ::= program_elt_list lf_opt 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(4/*program_elt_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ini_program ::= lf_opt program_elt_list_opt 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(3/*ini_program*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lf_opt ::= 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(2/*lf_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lf_opt ::= lf 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(2/*lf_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lf ::= LF 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(1/*lf*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // lf ::= lf LF 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(1/*lf*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini_program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		RESULT = start_val;
              CUP$IniParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$IniParser$parser.done_parsing();
          return CUP$IniParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

