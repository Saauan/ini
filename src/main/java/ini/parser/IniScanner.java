/* The following code was generated by JFlex 1.3.5 on 8/7/19 9:25 AM */


/*
 * This source code file is the exclusive property of its author. No copy or 
 * usage of the source code is permitted unless the author contractually 
 * allows it under the terms of a well-defined agreement.
 */

package ini.parser;

import java_cup.runtime.*;
import ini.ast.Token;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 8/7/19 9:25 AM from the specification file
 * <tt>file:/Users/renaudpawlak/Documents/INI/ini/src/main/java/ini/parser/ini.lex</tt>
 */
class IniScanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int STRING = 2;
  final public static int YYINITIAL = 0;
  final public static int CHAR = 3;
  final public static int BLOCK = 1;
  final public static int BBLOCK = 1;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\53\1\5"+
    "\1\0\1\57\1\0\1\60\1\63\1\42\1\43\1\7\1\61\1\52"+
    "\1\37\1\15\1\6\1\13\11\14\1\41\1\0\1\50\1\51\1\40"+
    "\1\56\1\62\32\12\1\46\1\4\1\47\1\0\1\11\1\0\1\32"+
    "\1\10\1\27\1\36\1\30\1\24\1\10\1\35\1\16\2\10\1\33"+
    "\1\17\1\26\1\21\1\20\1\10\1\22\1\31\1\23\1\25\3\10"+
    "\1\34\1\10\1\44\1\55\1\45\1\54\uff81\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    52,   104,   156,   208,   260,   208,   312,   364,   208, 
      416,   468,   520,   572,   624,   676,   728,   780,   832,   884, 
      936,   988,  1040,  1092,  1144,   208,   208,   208,   208,   208, 
      208,   208,  1196,  1248,   208,  1300,   208,  1352,   208,   208, 
     1404,  1456,   208,   208,  1508,   208,  1560,   208,  1612,   208, 
     1664,  1716,  1768,   208,  1820,  1872,   416,  1924,  1976,  2028, 
     2080,  2132,  2184,  2236,  2288,   208,   208,   208,   208,   208, 
      208,   208,   208,   208,   208,  2340,  2392,   208,  2444,  2496, 
     2548,  2600,  2652,  2704,  2756,  2808,  2860,  2912,  2964,  3016, 
     3068,  3120,  3172,  3224,   416,   416,   416,  3276,  3328,   416, 
     3380,  3432,  3484,  3536,  3588,  3640,   416,  3692,   416,  3744, 
      416,  3796,  3848,   416,  3900,   416,   416
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\5\1\6\2\7\1\5\1\10\1\11\1\12\1\13"+
    "\1\5\1\14\1\15\1\16\1\17\1\20\1\13\1\21"+
    "\1\22\1\23\1\24\1\25\2\13\1\26\6\13\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\64\5\2\55\1\56"+
    "\1\55\1\57\1\56\56\55\2\60\1\56\1\60\1\61"+
    "\56\60\1\56\66\0\1\7\66\0\1\62\64\0\1\63"+
    "\1\64\64\0\5\13\1\0\21\13\35\0\5\14\1\0"+
    "\21\14\42\0\1\65\61\0\2\16\1\65\63\0\1\66"+
    "\56\0\5\13\1\0\1\13\1\67\17\13\35\0\5\13"+
    "\1\0\4\13\1\70\14\13\35\0\5\13\1\0\6\13"+
    "\1\71\12\13\35\0\5\13\1\0\12\13\1\72\6\13"+
    "\35\0\5\13\1\0\4\13\1\73\11\13\1\74\1\75"+
    "\1\13\35\0\5\13\1\0\7\13\1\76\4\13\1\77"+
    "\4\13\35\0\5\13\1\0\14\13\1\100\4\13\35\0"+
    "\5\13\1\0\12\13\1\101\6\13\64\0\1\102\1\103"+
    "\74\0\1\104\63\0\1\105\52\0\1\106\10\0\1\107"+
    "\63\0\1\110\67\0\1\111\66\0\1\112\64\0\1\113"+
    "\2\0\2\55\1\0\1\55\1\57\1\0\60\55\1\0"+
    "\1\55\1\57\57\55\63\0\1\60\1\63\1\6\1\7"+
    "\61\63\7\114\1\115\54\114\13\0\1\116\1\117\57\0"+
    "\5\13\1\0\2\13\1\120\16\13\35\0\5\13\1\0"+
    "\3\13\1\121\15\13\35\0\5\13\1\0\5\13\1\122"+
    "\13\13\35\0\5\13\1\0\7\13\1\123\11\13\35\0"+
    "\5\13\1\0\2\13\1\124\16\13\35\0\5\13\1\0"+
    "\1\125\20\13\35\0\5\13\1\0\10\13\1\126\10\13"+
    "\35\0\5\13\1\0\15\13\1\127\3\13\35\0\5\13"+
    "\1\0\13\13\1\130\5\13\35\0\5\13\1\0\6\13"+
    "\1\131\12\13\25\0\7\114\1\132\54\114\7\115\1\133"+
    "\54\115\13\0\2\117\57\0\5\13\1\0\3\13\1\134"+
    "\15\13\35\0\5\13\1\0\11\13\1\135\7\13\35\0"+
    "\5\13\1\0\7\13\1\136\11\13\35\0\5\13\1\0"+
    "\12\13\1\137\6\13\35\0\5\13\1\0\12\13\1\140"+
    "\6\13\35\0\5\13\1\0\13\13\1\141\5\13\35\0"+
    "\5\13\1\0\11\13\1\142\7\13\35\0\5\13\1\0"+
    "\13\13\1\143\5\13\35\0\5\13\1\0\12\13\1\144"+
    "\6\13\35\0\5\13\1\0\14\13\1\145\4\13\25\0"+
    "\6\114\1\7\1\132\54\114\6\115\1\7\1\146\54\115"+
    "\10\0\5\13\1\0\4\13\1\147\14\13\35\0\5\13"+
    "\1\0\12\13\1\150\6\13\35\0\5\13\1\0\4\13"+
    "\1\151\14\13\35\0\5\13\1\0\5\13\1\152\13\13"+
    "\35\0\5\13\1\0\12\13\1\153\6\13\35\0\5\13"+
    "\1\0\7\13\1\154\11\13\25\0\6\115\1\0\1\146"+
    "\54\115\10\0\5\13\1\0\5\13\1\155\13\13\35\0"+
    "\5\13\1\0\13\13\1\156\5\13\35\0\5\13\1\0"+
    "\10\13\1\157\10\13\35\0\5\13\1\0\1\160\20\13"+
    "\35\0\5\13\1\0\15\13\1\161\3\13\35\0\5\13"+
    "\1\0\13\13\1\162\5\13\35\0\5\13\1\0\3\13"+
    "\1\163\15\13\35\0\5\13\1\0\5\13\1\164\13\13"+
    "\35\0\5\13\1\0\10\13\1\165\10\13\25\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  1,  0,  9,  1,  9,  1,  1,  9,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  9,  9,  9,  9,  9,  9, 
     1,  1,  9,  1,  9,  1,  9,  9,  1,  1,  9,  9,  1,  9,  1,  9, 
     1,  9,  0,  0,  0,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  0,  0,  9,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
	//StringBuffer string=new StringBuffer();
	String fileName;
	public void setFileName(String name) {
		fileName=name;
	}
	public String getFileName() {
		return fileName;
	}
	private Symbol symbol(int type) {
		return new Symbol(type,yyline,yycolumn,
		    new Token(type,fileName,yytext(),
		                    yyline+1,yycolumn+1,
		                    yycolumn+1+yytext().length()));
	}
	private Symbol emptyString() {
		return new Symbol(sym.STRING,yyline,yycolumn,
		    new Token(sym.STRING,fileName,"",
		                    yyline+1,yycolumn+1,
		                    yycolumn+1+0));
	}
	//private Symbol symbol(int type,Object value) {
	//	return new Symbol(type,yyline,yycolumn,value);
	//}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  IniScanner(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  IniScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[3952];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 134) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 115: 
          {  return symbol(sym.DEFAULT);  }
        case 118: break;
        case 113: 
          {  return symbol(sym.PROCESS);  }
        case 119: break;
        case 110: 
          {  return symbol(sym.RETURN);  }
        case 120: break;
        case 108: 
          {  return symbol(sym.IMPORT);  }
        case 121: break;
        case 73: 
          {  return symbol(sym.ANDAND);  }
        case 122: break;
        case 70: 
          {  return symbol(sym.EQUALS);  }
        case 123: break;
        case 69: 
          {  return symbol(sym.IMPLIES);  }
        case 124: break;
        case 29: 
          {  return symbol(sym.RCPAREN);  }
        case 125: break;
        case 28: 
          {  return symbol(sym.LCPAREN);  }
        case 126: break;
        case 27: 
          {  return symbol(sym.RPAREN);  }
        case 127: break;
        case 26: 
          {  return symbol(sym.LPAREN);  }
        case 128: break;
        case 2: 
        case 44: 
        case 46: 
          {  return symbol(sym.STRING);  }
        case 129: break;
        case 30: 
          {  return symbol(sym.LSPAREN);  }
        case 130: break;
        case 31: 
          {  return symbol(sym.RSPAREN);  }
        case 131: break;
        case 33: 
          {  return symbol(sym.ASSIGN);  }
        case 132: break;
        case 36: 
          {  return symbol(sym.MATCHES);  }
        case 133: break;
        case 39: 
          {  return symbol(sym.DOLLAR);  }
        case 134: break;
        case 43: 
          {  yybegin(CHAR);  }
        case 135: break;
        case 53: 
          {  return symbol(sym.DOTDOT);  }
        case 136: break;
        case 66: 
          {  return symbol(sym.ARROW_RIGHT);  }
        case 137: break;
        case 65: 
          {  return symbol(sym.MINUSMINUS);  }
        case 138: break;
        case 10: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 54: 
        case 55: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
        case 64: 
        case 79: 
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 91: 
        case 92: 
        case 93: 
        case 97: 
        case 98: 
        case 100: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 107: 
        case 109: 
        case 111: 
        case 112: 
        case 114: 
          {  return symbol(sym.IDENTIFIER);  }
        case 139: break;
        case 11: 
          {  return symbol(sym.TIDENTIFIER);  }
        case 140: break;
        case 49: 
          {  return emptyString();  }
        case 141: break;
        case 116: 
          {  return symbol(sym.FUNCTION);  }
        case 142: break;
        case 74: 
          {  return symbol(sym.PLUSPLUS);  }
        case 143: break;
        case 71: 
          {  return symbol(sym.NOTEQUALS);  }
        case 144: break;
        case 38: 
          {  return symbol(sym.QUESTION);  }
        case 145: break;
        case 77: 
        case 78: 
          {  return symbol(sym.NUM);  }
        case 146: break;
        case 68: 
          {  return symbol(sym.LTE);  }
        case 147: break;
        case 67: 
          {  return symbol(sym.GTE);  }
        case 148: break;
        case 56: 
          {  return symbol(sym.OF);  }
        case 149: break;
        case 25: 
          {  return symbol(sym.COL);  }
        case 150: break;
        case 24: 
          {  return symbol(sym.GT);  }
        case 151: break;
        case 14: 
          {  return symbol(sym.DOT);  }
        case 152: break;
        case 12: 
        case 13: 
          {  return symbol(sym.INT);  }
        case 153: break;
        case 5: 
        case 6: 
          {  /* ignore */  }
        case 154: break;
        case 8: 
          {  return symbol(sym.DIV);  }
        case 155: break;
        case 32: 
          {  return symbol(sym.LT);  }
        case 156: break;
        case 35: 
          {  return symbol(sym.NOT);  }
        case 157: break;
        case 40: 
          {  return symbol(sym.AND);  }
        case 158: break;
        case 42: 
          {  return symbol(sym.AT);  }
        case 159: break;
        case 4: 
          {  System.out.println("unmatched:"+yytext());  }
        case 160: break;
        case 106: 
          {  return symbol(sym.FALSE);  }
        case 161: break;
        case 99: 
          {  return symbol(sym.CASE);  }
        case 162: break;
        case 96: 
          {  return symbol(sym.THIS);  }
        case 163: break;
        case 95: 
          {  return symbol(sym.TYPE);  }
        case 164: break;
        case 94: 
          {  return symbol(sym.TRUE);  }
        case 165: break;
        case 72: 
          {  return symbol(sym.OROR);  }
        case 166: break;
        case 23: 
          {  return symbol(sym.MINUS);  }
        case 167: break;
        case 9: 
          {  return symbol(sym.MULT);  }
        case 168: break;
        case 34: 
          {  return symbol(sym.COMMA);  }
        case 169: break;
        case 37: 
          {  return symbol(sym.TUBE);  }
        case 170: break;
        case 41: 
          {  return symbol(sym.PLUS);  }
        case 171: break;
        case 47: 
        case 48: 
          {  return symbol(sym.CHAR);  }
        case 172: break;
        case 45: 
          {  yybegin(YYINITIAL);  }
        case 173: break;
        case 7: 
          {  yybegin(STRING);  }
        case 174: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
