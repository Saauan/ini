
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Mon Jul 29 21:20:53 CEST 2019
//----------------------------------------------------

package ini.parser;

import java.util.*;
import java.io.*;
import ini.ast.*;
import ini.eval.function.*;
import ini.eval.at.*;

/** CUP v0.10k generated parser.
  * @version Mon Jul 29 21:20:53 CEST 2019
  */
public class IniParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public IniParser() {super();}

  /** Constructor which sets the default scanner. */
  public IniParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\237\000\002\002\004\000\002\003\005\000\002\004" +
    "\003\000\002\004\002\000\002\005\004\000\002\005\003" +
    "\000\002\006\003\000\002\006\003\000\002\013\003\000" +
    "\002\013\002\000\002\014\004\000\002\014\003\000\002" +
    "\015\004\000\002\016\003\000\002\016\002\000\002\017" +
    "\004\000\002\017\003\000\002\017\004\000\002\017\003" +
    "\000\002\020\014\000\002\024\002\000\002\024\005\000" +
    "\002\065\012\000\002\007\012\000\002\007\012\000\002" +
    "\010\003\000\002\010\002\000\002\011\005\000\002\011" +
    "\003\000\002\012\005\000\002\012\003\000\002\026\003" +
    "\000\002\026\002\000\002\027\004\000\002\027\003\000" +
    "\002\047\003\000\002\047\002\000\002\050\004\000\002" +
    "\050\003\000\002\025\005\000\002\025\003\000\002\021" +
    "\003\000\002\021\002\000\002\022\005\000\002\022\003" +
    "\000\002\023\003\000\002\023\004\000\002\033\005\000" +
    "\002\033\005\000\002\033\005\000\002\036\003\000\002" +
    "\060\003\000\002\060\003\000\002\034\003\000\002\034" +
    "\006\000\002\034\010\000\002\034\005\000\002\040\003" +
    "\000\002\040\005\000\002\037\003\000\002\046\005\000" +
    "\002\062\006\000\002\077\006\000\002\077\003\000\002" +
    "\063\007\000\002\063\005\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\031\003" +
    "\000\002\031\005\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\006\000\002\031\003" +
    "\000\002\102\005\000\002\102\005\000\002\056\003\000" +
    "\002\056\003\000\002\056\003\000\002\056\005\000\002" +
    "\056\005\000\002\056\004\000\002\056\005\000\002\056" +
    "\005\000\002\056\005\000\002\055\003\000\002\055\003" +
    "\000\002\055\005\000\002\055\003\000\002\055\003\000" +
    "\002\055\005\000\002\055\005\000\002\055\004\000\002" +
    "\055\004\000\002\055\005\000\002\055\005\000\002\055" +
    "\005\000\002\055\005\000\002\055\005\000\002\055\005" +
    "\000\002\055\005\000\002\055\005\000\002\055\005\000" +
    "\002\041\012\000\002\041\006\000\002\100\003\000\002" +
    "\100\002\000\002\101\005\000\002\101\003\000\002\066" +
    "\005\000\002\066\002\000\002\064\012\000\002\064\010" +
    "\000\002\043\004\000\002\043\004\000\002\042\006\000" +
    "\002\044\003\000\002\044\002\000\002\045\005\000\002" +
    "\045\003\000\002\051\007\000\002\051\013\000\002\051" +
    "\006\000\002\052\004\000\002\054\003\000\002\054\002" +
    "\000\002\032\004\000\002\032\004\000\002\032\003\000" +
    "\002\032\002\000\002\053\003\000\002\053\003\000\002" +
    "\057\007\000\002\057\007\000\002\061\007\000\002\067" +
    "\006\000\002\070\005\000\002\070\003\000\002\071\006" +
    "\000\002\071\005\000\002\073\003\000\002\073\003\000" +
    "\002\072\003\000\002\072\004\000\002\074\003\000\002" +
    "\074\002\000\002\075\005\000\002\075\003\000\002\076" +
    "\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u012f\000\020\002\ufff8\042\ufff8\052\ufff8\056\005\057" +
    "\ufff8\060\ufff8\063\ufff8\001\002\000\016\002\ufff3\042\015" +
    "\052\017\057\ufff3\060\ufff3\063\ufff3\001\002\000\004\050" +
    "\013\001\002\000\004\002\012\001\002\000\020\002\ufff9" +
    "\042\ufff9\052\ufff9\056\005\057\ufff9\060\ufff9\063\ufff9\001" +
    "\002\000\020\002\ufff6\042\ufff6\052\ufff6\056\ufff6\057\ufff6" +
    "\060\ufff6\063\ufff6\001\002\000\020\002\ufff7\042\ufff7\052" +
    "\ufff7\056\ufff7\057\ufff7\060\ufff7\063\ufff7\001\002\000\004" +
    "\002\001\001\002\000\020\002\ufff5\042\ufff5\052\ufff5\056" +
    "\ufff5\057\ufff5\060\ufff5\063\ufff5\001\002\000\012\002\ufffe" +
    "\057\063\060\060\063\064\001\002\000\004\052\043\001" +
    "\002\000\016\002\ufff4\042\015\052\017\057\ufff4\060\ufff4" +
    "\063\ufff4\001\002\000\004\010\022\001\002\000\016\002" +
    "\uffef\042\uffef\052\uffef\057\uffef\060\uffef\063\uffef\001\002" +
    "\000\016\002\ufff1\042\ufff1\052\ufff1\057\ufff1\060\ufff1\063" +
    "\ufff1\001\002\000\006\011\uffd7\053\023\001\002\000\014" +
    "\005\uffd4\011\uffd4\015\uffd4\025\uffd4\040\uffd4\001\002\000" +
    "\012\005\uffd5\011\uffd5\015\uffd5\025\031\001\002\000\004" +
    "\011\032\001\002\000\010\005\027\011\uffd8\015\uffd8\001" +
    "\002\000\004\053\023\001\002\000\012\005\uffd6\011\uffd6" +
    "\015\uffd6\025\031\001\002\000\014\005\uffd3\011\uffd3\015" +
    "\uffd3\025\uffd3\040\uffd3\001\002\000\004\043\033\001\002" +
    "\000\004\053\023\001\002\000\006\025\031\040\035\001" +
    "\002\000\004\050\036\001\002\000\004\005\037\001\002" +
    "\000\004\050\040\001\002\000\016\002\uffee\042\uffee\052" +
    "\uffee\057\uffee\060\uffee\063\uffee\001\002\000\016\002\ufff0" +
    "\042\ufff0\052\ufff0\057\ufff0\060\ufff0\063\ufff0\001\002\000" +
    "\016\002\ufff2\042\ufff2\052\ufff2\057\ufff2\060\ufff2\063\ufff2" +
    "\001\002\000\006\010\uffed\014\045\001\002\000\004\010" +
    "\050\001\002\000\006\015\uffd7\053\023\001\002\000\004" +
    "\015\047\001\002\000\004\010\uffec\001\002\000\006\011" +
    "\uffd7\053\023\001\002\000\004\011\052\001\002\000\004" +
    "\040\053\001\002\000\004\050\054\001\002\000\016\002" +
    "\uffeb\042\uffeb\052\uffeb\057\uffeb\060\uffeb\063\uffeb\001\002" +
    "\000\012\002\ufffb\057\ufffb\060\ufffb\063\ufffb\001\002\000" +
    "\012\002\ufffa\057\ufffa\060\ufffa\063\ufffa\001\002\000\012" +
    "\002\ufffc\057\ufffc\060\ufffc\063\ufffc\001\002\000\004\052" +
    "\u012b\001\002\000\004\002\000\001\002\000\012\002\uffff" +
    "\057\063\060\060\063\064\001\002\000\004\052\115\001" +
    "\002\000\004\053\065\001\002\000\004\022\066\001\002" +
    "\000\006\014\072\053\067\001\002\000\004\014\107\001" +
    "\002\000\014\002\uff70\037\113\057\uff70\060\uff70\063\uff70" +
    "\001\002\000\014\002\uff6e\037\uff6e\057\uff6e\060\uff6e\063" +
    "\uff6e\001\002\000\006\015\uff66\052\074\001\002\000\004" +
    "\015\112\001\002\000\004\004\101\001\002\000\006\005" +
    "\uff64\015\uff64\001\002\000\006\005\077\015\uff67\001\002" +
    "\000\004\052\074\001\002\000\006\005\uff65\015\uff65\001" +
    "\002\000\006\014\072\053\102\001\002\000\012\005\uff6a" +
    "\014\107\015\uff6a\025\uff6a\001\002\000\010\005\uff63\015" +
    "\uff63\025\106\001\002\000\010\005\uff69\015\uff69\025\uff69" +
    "\001\002\000\010\005\uff6b\015\uff6b\025\uff6b\001\002\000" +
    "\010\005\uff68\015\uff68\025\uff68\001\002\000\006\015\uff66" +
    "\052\074\001\002\000\004\015\111\001\002\000\022\002" +
    "\uff6d\005\uff6d\015\uff6d\025\uff6d\037\uff6d\057\uff6d\060\uff6d" +
    "\063\uff6d\001\002\000\022\002\uff6c\005\uff6c\015\uff6c\025" +
    "\uff6c\037\uff6c\057\uff6c\060\uff6c\063\uff6c\001\002\000\006" +
    "\014\072\053\067\001\002\000\014\002\uff6f\037\uff6f\057" +
    "\uff6f\060\uff6f\063\uff6f\001\002\000\004\010\116\001\002" +
    "\000\006\011\uffe7\052\121\001\002\000\006\005\u0128\011" +
    "\uffe8\001\002\000\004\011\244\001\002\000\010\005\uffe3" +
    "\011\uffe3\022\123\001\002\000\006\005\uffe5\011\uffe5\001" +
    "\002\000\030\010\133\014\146\027\142\044\126\045\137" +
    "\050\140\051\127\052\130\053\141\057\132\064\134\001" +
    "\002\000\060\005\uffb2\007\uffb2\011\uffb2\012\uffb2\013\uffb2" +
    "\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\023\uffb2\024" +
    "\uffb2\025\uffb2\026\uffb2\027\uffb2\031\uffb2\033\uffb2\034\uffb2" +
    "\041\uffb2\052\uffb2\053\uffb2\062\uffb2\065\uffb2\001\002\000" +
    "\016\005\uffe4\011\uffe4\025\163\026\166\027\165\031\164" +
    "\001\002\000\060\005\uffaa\007\uffaa\011\uffaa\012\uffaa\013" +
    "\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa\023\uffaa" +
    "\024\uffaa\025\uffaa\026\uffaa\027\uffaa\031\uffaa\033\uffaa\034" +
    "\uffaa\041\uffaa\052\uffaa\053\uffaa\062\uffaa\065\uffaa\001\002" +
    "\000\060\005\uffb6\007\uffb6\011\uffb6\012\uffb6\013\uffb6\015" +
    "\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\023\uffb6\024\uffb6" +
    "\025\uffb6\026\uffb6\027\uffb6\031\uffb6\033\uffb6\034\uffb6\041" +
    "\uffb6\052\uffb6\053\uffb6\062\uffb6\065\uffb6\001\002\000\076" +
    "\005\uffcc\006\uffcc\007\uffcc\010\240\011\uffcc\012\uffcc\013" +
    "\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc" +
    "\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030" +
    "\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\041\uffcc" +
    "\052\uffcc\053\uffcc\062\uffcc\065\uffcc\001\002\000\060\005" +
    "\uffb0\007\uffb0\011\uffb0\012\uffb0\013\uffb0\015\uffb0\016\uffb0" +
    "\017\uffb0\020\uffb0\021\uffb0\023\uffb0\024\uffb0\025\uffb0\026" +
    "\uffb0\027\uffb0\031\uffb0\033\uffb0\034\uffb0\041\uffb0\052\uffb0" +
    "\053\uffb0\062\uffb0\065\uffb0\001\002\000\004\010\235\001" +
    "\002\000\030\010\133\014\146\027\142\044\126\045\137" +
    "\050\140\051\127\052\130\053\141\057\132\064\134\001" +
    "\002\000\060\005\uffb8\007\uffb8\011\uffb8\012\uffb8\013\uffb8" +
    "\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\023\uffb8\024" +
    "\uffb8\025\uffb8\026\uffb8\027\uffb8\031\uffb8\033\uffb8\034\uffb8" +
    "\041\uffb8\052\uffb8\053\uffb8\062\uffb8\065\uffb8\001\002\000" +
    "\060\005\uffb5\007\uffb5\011\uffb5\012\uffb5\013\uffb5\015\uffb5" +
    "\016\uffb5\017\uffb5\020\uffb5\021\uffb5\023\uffb5\024\uffb5\025" +
    "\uffb5\026\uffb5\027\uffb5\031\uffb5\033\uffb5\034\uffb5\041\uffb5" +
    "\052\uffb5\053\uffb5\062\uffb5\065\uffb5\001\002\000\062\005" +
    "\uffb3\007\uffb3\011\uffb3\012\uffb3\013\uffb3\015\uffb3\016\uffb3" +
    "\017\uffb3\020\uffb3\021\uffb3\023\uffb3\024\uffb3\025\uffb3\026" +
    "\uffb3\027\uffb3\031\uffb3\033\uffb3\034\uffb3\035\230\041\uffb3" +
    "\052\uffb3\053\uffb3\062\uffb3\065\uffb3\001\002\000\060\005" +
    "\uffab\007\uffab\011\uffab\012\uffab\013\uffab\015\uffab\016\uffab" +
    "\017\uffab\020\uffab\021\uffab\023\uffab\024\uffab\025\uffab\026" +
    "\uffab\027\uffab\031\uffab\033\uffab\034\uffab\041\uffab\052\uffab" +
    "\053\uffab\062\uffab\065\uffab\001\002\000\060\005\uffc6\007" +
    "\uffc6\011\uffc6\012\uffc6\013\uffc6\015\uffc6\016\uffc6\017\uffc6" +
    "\020\uffc6\021\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027" +
    "\uffc6\031\uffc6\033\uffc6\034\uffc6\041\uffc6\052\uffc6\053\uffc6" +
    "\062\uffc6\065\uffc6\001\002\000\062\005\uffcf\007\uffcf\011" +
    "\uffcf\012\uffcf\013\uffcf\014\216\015\uffcf\016\uffcf\017\uffcf" +
    "\020\uffcf\021\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027" +
    "\uffcf\031\uffcf\033\uffcf\034\uffcf\041\uffcf\052\uffcf\053\uffcf" +
    "\062\uffcf\065\uffcf\001\002\000\030\010\133\014\146\027" +
    "\142\044\126\045\137\050\140\051\127\052\130\053\141" +
    "\057\132\064\134\001\002\000\060\005\uffa9\007\uffa9\011" +
    "\uffa9\012\uffa9\013\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9" +
    "\021\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9\027\uffa9\031" +
    "\uffa9\033\uffa9\034\uffa9\041\uffa9\052\uffa9\053\uffa9\062\uffa9" +
    "\065\uffa9\001\002\000\060\005\uffb9\007\uffb9\011\uffb9\012" +
    "\uffb9\013\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9" +
    "\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\031\uffb9\033" +
    "\uffb9\034\uffb9\041\uffb9\052\uffb9\053\uffb9\062\uffb9\065\uffb9" +
    "\001\002\000\060\005\uffb7\007\uffb7\011\uffb7\012\uffb7\013" +
    "\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\023\uffb7" +
    "\024\uffb7\025\uffb7\026\uffb7\027\uffb7\031\uffb7\033\uffb7\034" +
    "\uffb7\041\uffb7\052\uffb7\053\uffb7\062\uffb7\065\uffb7\001\002" +
    "\000\032\010\133\014\146\015\uff82\027\142\044\126\045" +
    "\137\050\140\051\127\052\130\053\141\057\132\064\134" +
    "\001\002\000\060\005\uffae\007\uffae\011\uffae\012\uffae\013" +
    "\uffae\015\uffae\016\uffae\017\uffae\020\uffae\021\uffae\023\uffae" +
    "\024\uffae\025\uffae\026\uffae\027\uffae\031\uffae\033\uffae\034" +
    "\uffae\041\uffae\052\uffae\053\uffae\062\uffae\065\uffae\001\002" +
    "\000\060\005\uffc8\007\uffc8\011\uffc8\012\uffc8\013\uffc8\015" +
    "\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\023\uffc8\024\uffc8" +
    "\025\uffc8\026\uffc8\027\uffc8\031\202\033\uffc8\034\uffc8\041" +
    "\uffc8\052\uffc8\053\uffc8\062\uffc8\065\uffc8\001\002\000\060" +
    "\005\uffb1\007\uffb1\011\uffb1\012\uffb1\013\uffb1\015\uffb1\016" +
    "\uffb1\017\uffb1\020\uffb1\021\uffb1\023\uffb1\024\uffb1\025\uffb1" +
    "\026\uffb1\027\uffb1\031\uffb1\033\uffb1\034\uffb1\041\uffb1\052" +
    "\uffb1\053\uffb1\062\uffb1\065\uffb1\001\002\000\060\005\uffb4" +
    "\007\uffb4\011\uffb4\012\uffb4\013\uffb4\015\uffb4\016\uffb4\017" +
    "\uffb4\020\uffb4\021\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4" +
    "\027\uffb4\031\uffb4\033\uffb4\034\uffb4\041\uffb4\052\uffb4\053" +
    "\uffb4\062\uffb4\065\uffb4\001\002\000\074\005\uffbb\006\160" +
    "\007\uffbb\011\uffbb\012\uffbb\013\uffbb\014\156\015\uffbb\016" +
    "\uffbb\017\uffbb\020\uffbb\021\uffbb\022\161\023\uffbb\024\uffbb" +
    "\025\uffbb\026\uffbb\027\uffbb\030\155\031\uffbb\032\157\033" +
    "\uffbb\034\uffbb\035\154\041\uffbb\052\uffbb\053\uffbb\062\uffbb" +
    "\065\uffbb\001\002\000\030\010\133\014\146\027\142\044" +
    "\126\045\137\050\140\051\127\052\130\053\141\057\132" +
    "\064\134\001\002\000\060\005\uff85\007\uff85\011\uff85\012" +
    "\uff85\013\uff85\015\uff85\016\uff85\017\uff85\020\uff85\021\uff85" +
    "\023\uff85\024\uff85\025\uff85\026\uff85\027\uff85\031\uff85\033" +
    "\uff85\034\uff85\041\uff85\052\uff85\053\uff85\062\uff85\065\uff85" +
    "\001\002\000\030\010\133\014\146\027\142\044\126\045" +
    "\137\050\140\051\127\052\130\053\141\057\132\064\134" +
    "\001\002\000\060\005\uff86\007\uff86\011\uff86\012\uff86\013" +
    "\uff86\015\uff86\016\uff86\017\uff86\020\uff86\021\uff86\023\uff86" +
    "\024\uff86\025\uff86\026\uff86\027\uff86\031\uff86\033\uff86\034" +
    "\uff86\041\uff86\052\uff86\053\uff86\062\uff86\065\uff86\001\002" +
    "\000\004\052\173\001\002\000\030\010\133\014\146\027" +
    "\142\044\126\045\137\050\140\051\127\052\130\053\141" +
    "\057\132\064\134\001\002\000\060\005\uffba\007\uffba\011" +
    "\uffba\012\uffba\013\uffba\015\uffba\016\uffba\017\uffba\020\uffba" +
    "\021\uffba\023\uffba\024\uffba\025\163\026\166\027\165\031" +
    "\164\033\uffba\034\uffba\041\uffba\052\uffba\053\uffba\062\uffba" +
    "\065\uffba\001\002\000\030\010\133\014\146\027\142\044" +
    "\126\045\137\050\140\051\127\052\130\053\141\057\132" +
    "\064\134\001\002\000\030\010\133\014\146\027\142\044" +
    "\126\045\137\050\140\051\127\052\130\053\141\057\132" +
    "\064\134\001\002\000\030\010\133\014\146\027\142\044" +
    "\126\045\137\050\140\051\127\052\130\053\141\057\132" +
    "\064\134\001\002\000\030\010\133\014\146\027\142\044" +
    "\126\045\137\050\140\051\127\052\130\053\141\057\132" +
    "\064\134\001\002\000\060\005\uffa4\007\uffa4\011\uffa4\012" +
    "\uffa4\013\uffa4\015\uffa4\016\uffa4\017\uffa4\020\uffa4\021\uffa4" +
    "\023\uffa4\024\uffa4\025\uffa4\026\uffa4\027\uffa4\031\uffa4\033" +
    "\uffa4\034\uffa4\041\uffa4\052\uffa4\053\uffa4\062\uffa4\065\uffa4" +
    "\001\002\000\060\005\uffa7\007\uffa7\011\uffa7\012\uffa7\013" +
    "\uffa7\015\uffa7\016\uffa7\017\uffa7\020\uffa7\021\uffa7\023\uffa7" +
    "\024\uffa7\025\163\026\166\027\uffa7\031\uffa7\033\uffa7\034" +
    "\uffa7\041\uffa7\052\uffa7\053\uffa7\062\uffa7\065\uffa7\001\002" +
    "\000\060\005\uffa8\007\uffa8\011\uffa8\012\uffa8\013\uffa8\015" +
    "\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\023\uffa8\024\uffa8" +
    "\025\163\026\166\027\uffa8\031\uffa8\033\uffa8\034\uffa8\041" +
    "\uffa8\052\uffa8\053\uffa8\062\uffa8\065\uffa8\001\002\000\060" +
    "\005\uffa5\007\uffa5\011\uffa5\012\uffa5\013\uffa5\015\uffa5\016" +
    "\uffa5\017\uffa5\020\uffa5\021\uffa5\023\uffa5\024\uffa5\025\uffa5" +
    "\026\uffa5\027\uffa5\031\uffa5\033\uffa5\034\uffa5\041\uffa5\052" +
    "\uffa5\053\uffa5\062\uffa5\065\uffa5\001\002\000\074\005\uffc9" +
    "\006\uffc9\007\uffc9\011\uffc9\012\uffc9\013\uffc9\014\uffc9\015" +
    "\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9" +
    "\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032" +
    "\uffc9\033\uffc9\034\uffc9\035\uffc9\041\uffc9\052\uffc9\053\uffc9" +
    "\062\uffc9\065\uffc9\001\002\000\016\007\176\015\175\025" +
    "\163\026\166\027\165\031\164\001\002\000\074\005\uffcb" +
    "\006\uffcb\007\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb\015" +
    "\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb" +
    "\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032" +
    "\uffcb\033\uffcb\034\uffcb\035\uffcb\041\uffcb\052\uffcb\053\uffcb" +
    "\062\uffcb\065\uffcb\001\002\000\030\010\133\014\146\027" +
    "\142\044\126\045\137\050\140\051\127\052\130\053\141" +
    "\057\132\064\134\001\002\000\014\015\200\025\163\026" +
    "\166\027\165\031\164\001\002\000\074\005\uffca\006\uffca" +
    "\007\uffca\011\uffca\012\uffca\013\uffca\014\uffca\015\uffca\016" +
    "\uffca\017\uffca\020\uffca\021\uffca\022\uffca\023\uffca\024\uffca" +
    "\025\uffca\026\uffca\027\uffca\030\uffca\031\uffca\032\uffca\033" +
    "\uffca\034\uffca\035\uffca\041\uffca\052\uffca\053\uffca\062\uffca" +
    "\065\uffca\001\002\000\060\005\uffac\007\uffac\011\uffac\012" +
    "\uffac\013\uffac\015\uffac\016\uffac\017\uffac\020\uffac\021\uffac" +
    "\023\uffac\024\uffac\025\163\026\166\027\165\031\164\033" +
    "\uffac\034\uffac\041\uffac\052\uffac\053\uffac\062\uffac\065\uffac" +
    "\001\002\000\030\010\133\014\146\027\142\044\126\045" +
    "\137\050\140\051\127\052\130\053\141\057\132\064\134" +
    "\001\002\000\060\005\uffc7\007\uffc7\011\uffc7\012\uffc7\013" +
    "\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\023\uffc7" +
    "\024\uffc7\025\163\026\166\027\uffc7\031\uffc7\033\uffc7\034" +
    "\uffc7\041\uffc7\052\uffc7\053\uffc7\062\uffc7\065\uffc7\001\002" +
    "\000\020\005\uff80\007\212\015\uff80\025\163\026\166\027" +
    "\165\031\164\001\002\000\004\015\211\001\002\000\010" +
    "\005\207\011\uff83\015\uff83\001\002\000\030\010\133\014" +
    "\146\027\142\044\126\045\137\050\140\051\127\052\130" +
    "\053\141\057\132\064\134\001\002\000\020\005\uff81\011" +
    "\uff81\015\uff81\025\163\026\166\027\165\031\164\001\002" +
    "\000\062\005\uffc5\007\uffc5\011\uffc5\012\uffc5\013\uffc5\015" +
    "\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\023\uffc5\024\uffc5" +
    "\025\uffc5\026\uffc5\027\uffc5\031\uffc5\033\uffc5\034\uffc5\035" +
    "\uffc5\041\uffc5\052\uffc5\053\uffc5\062\uffc5\065\uffc5\001\002" +
    "\000\030\010\133\014\146\027\142\044\126\045\137\050" +
    "\140\051\127\052\130\053\141\057\132\064\134\001\002" +
    "\000\014\015\214\025\163\026\166\027\165\031\164\001" +
    "\002\000\062\005\uff71\007\uff71\011\uff71\012\uff71\013\uff71" +
    "\015\uff71\016\uff71\017\uff71\020\uff71\021\uff71\023\uff71\024" +
    "\uff71\025\uff71\026\uff71\027\uff71\031\uff71\033\uff71\034\uff71" +
    "\037\uff71\041\uff71\052\uff71\053\uff71\062\uff71\065\uff71\001" +
    "\002\000\060\005\uffa6\007\uffa6\011\uffa6\012\uffa6\013\uffa6" +
    "\015\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6\023\uffa6\024" +
    "\uffa6\025\163\026\166\027\uffa6\031\uffa6\033\uffa6\034\uffa6" +
    "\041\uffa6\052\uffa6\053\uffa6\062\uffa6\065\uffa6\001\002\000" +
    "\004\052\220\001\002\000\006\005\223\015\224\001\002" +
    "\000\004\022\221\001\002\000\030\010\133\014\146\027" +
    "\142\044\126\045\137\050\140\051\127\052\130\053\141" +
    "\057\132\064\134\001\002\000\016\005\uffc0\015\uffc0\025" +
    "\163\026\166\027\165\031\164\001\002\000\004\052\225" +
    "\001\002\000\060\005\uffc4\007\uffc4\011\uffc4\012\uffc4\013" +
    "\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\023\uffc4" +
    "\024\uffc4\025\uffc4\026\uffc4\027\uffc4\031\uffc4\033\uffc4\034" +
    "\uffc4\041\uffc4\052\uffc4\053\uffc4\062\uffc4\065\uffc4\001\002" +
    "\000\004\022\226\001\002\000\030\010\133\014\146\027" +
    "\142\044\126\045\137\050\140\051\127\052\130\053\141" +
    "\057\132\064\134\001\002\000\016\005\uffc1\015\uffc1\025" +
    "\163\026\166\027\165\031\164\001\002\000\030\010\133" +
    "\014\146\027\142\044\126\045\137\050\140\051\127\052" +
    "\130\053\141\057\132\064\134\001\002\000\060\005\uffad" +
    "\007\uffad\011\uffad\012\uffad\013\uffad\015\uffad\016\uffad\017" +
    "\uffad\020\uffad\021\uffad\023\uffad\024\uffad\025\163\026\166" +
    "\027\165\031\164\033\uffad\034\uffad\041\uffad\052\uffad\053" +
    "\uffad\062\uffad\065\uffad\001\002\000\012\025\163\026\166" +
    "\027\165\031\164\001\002\000\032\011\234\016\uffb5\017" +
    "\uffb5\020\uffb5\021\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5" +
    "\027\uffb5\031\uffb5\041\uffb5\001\002\000\060\005\uffa3\007" +
    "\uffa3\011\uffa3\012\uffa3\013\uffa3\015\uffa3\016\uffa3\017\uffa3" +
    "\020\uffa3\021\uffa3\023\uffa3\024\uffa3\025\uffa3\026\uffa3\027" +
    "\uffa3\031\uffa3\033\uffa3\034\uffa3\041\uffa3\052\uffa3\053\uffa3" +
    "\062\uffa3\065\uffa3\001\002\000\004\052\236\001\002\000" +
    "\004\011\237\001\002\000\060\005\uffaf\007\uffaf\011\uffaf" +
    "\012\uffaf\013\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf\021" +
    "\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf\031\uffaf" +
    "\033\uffaf\034\uffaf\041\uffaf\052\uffaf\053\uffaf\062\uffaf\065" +
    "\uffaf\001\002\000\032\010\133\011\uff82\014\146\027\142" +
    "\044\126\045\137\050\140\051\127\052\130\053\141\057" +
    "\132\064\134\001\002\000\020\005\uff80\011\uff80\015\uff80" +
    "\025\163\026\166\027\165\031\164\001\002\000\004\011" +
    "\243\001\002\000\060\005\uff84\007\uff84\011\uff84\012\uff84" +
    "\013\uff84\015\uff84\016\uff84\017\uff84\020\uff84\021\uff84\023" +
    "\uff84\024\uff84\025\uff84\026\uff84\027\uff84\031\uff84\033\uff84" +
    "\034\uff84\041\uff84\052\uff84\053\uff84\062\uff84\065\uff84\001" +
    "\002\000\004\012\245\001\002\000\046\010\247\013\uffdd" +
    "\014\146\027\142\036\251\042\266\044\126\045\137\046" +
    "\254\047\267\050\140\051\127\052\272\053\141\054\265" +
    "\055\261\057\132\064\134\001\002\000\060\005\uffa1\006" +
    "\160\011\uffa1\012\uffa1\014\156\015\uffa1\016\uffbb\017\uffbb" +
    "\020\uffbb\021\uffbb\022\u0125\023\uffbb\024\uffbb\025\uffbb\026" +
    "\uffbb\027\uffbb\030\155\031\uffbb\032\157\033\uffa1\034\uffa1" +
    "\035\154\041\uffbb\001\002\000\040\010\247\014\146\027" +
    "\142\036\251\044\126\045\137\046\254\047\267\050\140" +
    "\051\127\052\130\053\141\054\265\057\132\064\134\001" +
    "\002\000\004\013\u0122\001\002\000\040\010\247\014\146" +
    "\027\142\036\251\044\126\045\137\046\254\047\267\050" +
    "\140\051\127\052\130\053\141\054\265\057\132\064\134" +
    "\001\002\000\010\012\uff75\033\310\034\307\001\002\000" +
    "\004\012\u011e\001\002\000\030\005\uffce\011\uffce\012\uffce" +
    "\013\uffce\015\uffce\033\uffce\034\uffce\052\uffce\053\uffce\062" +
    "\uffce\065\uffce\001\002\000\050\010\247\013\uffde\014\146" +
    "\027\142\036\251\042\266\044\126\045\137\046\254\047" +
    "\267\050\140\051\127\052\272\053\141\054\265\055\261" +
    "\057\132\064\134\066\uffde\001\002\000\016\005\uffa2\011" +
    "\uffa2\012\uffa2\015\uffa2\033\uffa2\034\uffa2\001\002\000\044" +
    "\005\uff9f\011\uff9f\012\uff9f\015\uff9f\016\uffb9\017\uffb9\020" +
    "\uffb9\021\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9" +
    "\031\uffb9\033\uff9f\034\uff9f\041\uffb9\001\002\000\006\005" +
    "\u0114\061\u0115\001\002\000\004\010\u010b\001\002\000\044" +
    "\005\uff9e\011\uff9e\012\uff9e\015\uff9e\016\uffb7\017\uffb7\020" +
    "\uffb7\021\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7" +
    "\031\uffb7\033\uff9e\034\uff9e\041\uffb7\001\002\000\004\012" +
    "\uff74\001\002\000\030\016\371\017\365\020\364\021\366" +
    "\023\367\024\363\025\163\026\166\027\165\031\164\041" +
    "\370\001\002\000\040\010\247\014\146\027\142\036\251" +
    "\044\126\045\137\046\254\047\267\050\140\051\127\052" +
    "\130\053\141\054\265\057\132\064\134\001\002\000\004" +
    "\052\355\001\002\000\030\005\uffcd\011\uffcd\012\uffcd\013" +
    "\uffcd\015\uffcd\033\uffcd\034\uffcd\052\uffcd\053\uffcd\062\uffcd" +
    "\065\uffcd\001\002\000\042\010\247\012\uff7a\014\146\027" +
    "\142\036\251\044\126\045\137\046\254\047\267\050\140" +
    "\051\127\052\130\053\141\054\265\057\132\064\134\001" +
    "\002\000\050\010\uffdb\013\uffdb\014\uffdb\027\uffdb\036\uffdb" +
    "\042\uffdb\044\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb\051" +
    "\uffdb\052\uffdb\053\uffdb\054\uffdb\055\uffdb\057\uffdb\064\uffdb" +
    "\066\uffdb\001\002\000\062\004\273\005\uffd9\006\uffcc\010" +
    "\240\012\uffcc\014\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc" +
    "\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030" +
    "\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\041\uffcc" +
    "\061\uffd9\001\002\000\004\042\274\001\002\000\004\052" +
    "\275\001\002\000\006\010\uff89\014\276\001\002\000\032" +
    "\010\133\014\146\015\uff82\027\142\044\126\045\137\050" +
    "\140\051\127\052\130\053\141\057\132\064\134\001\002" +
    "\000\004\010\300\001\002\000\032\010\133\011\uff82\014" +
    "\146\027\142\044\126\045\137\050\140\051\127\052\130" +
    "\053\141\057\132\064\134\001\002\000\004\011\302\001" +
    "\002\000\042\010\uff88\012\uff88\014\uff88\027\uff88\036\uff88" +
    "\044\uff88\045\uff88\046\uff88\047\uff88\050\uff88\051\uff88\052" +
    "\uff88\053\uff88\054\uff88\057\uff88\064\uff88\001\002\000\004" +
    "\015\304\001\002\000\004\010\uff8a\001\002\000\004\012" +
    "\313\001\002\000\010\012\uff7b\033\310\034\307\001\002" +
    "\000\040\010\247\014\146\027\142\036\251\044\126\045" +
    "\137\046\254\047\267\050\140\051\127\052\130\053\141" +
    "\054\265\057\132\064\134\001\002\000\040\010\247\014" +
    "\146\027\142\036\251\044\126\045\137\046\254\047\267" +
    "\050\140\051\127\052\130\053\141\054\265\057\132\064" +
    "\134\001\002\000\016\005\uff9c\011\uff9c\012\uff9c\015\uff9c" +
    "\033\uff9c\034\307\001\002\000\016\005\uff9d\011\uff9d\012" +
    "\uff9d\015\uff9d\033\uff9d\034\uff9d\001\002\000\014\013\uffe1" +
    "\052\130\053\327\062\uffe1\065\323\001\002\000\004\013" +
    "\354\001\002\000\004\022\350\001\002\000\014\013\uffbc" +
    "\052\uffbc\053\uffbc\062\uffbc\065\uffbc\001\002\000\014\013" +
    "\uffbe\052\uffbe\053\uffbe\062\uffbe\065\uffbe\001\002\000\014" +
    "\013\uffdf\052\uffdf\053\uffdf\062\uffdf\065\uffdf\001\002\000" +
    "\006\013\uff76\062\344\001\002\000\014\006\160\014\156" +
    "\022\341\030\155\032\157\001\002\000\004\012\331\001" +
    "\002\000\014\013\uffbd\052\uffbd\053\uffbd\062\uffbd\065\uffbd" +
    "\001\002\000\014\013\uffbf\052\uffbf\053\uffbf\062\uffbf\065" +
    "\uffbf\001\002\000\014\013\uffe2\052\130\053\327\062\uffe2" +
    "\065\323\001\002\000\006\022\uffcf\037\uffcf\001\002\000" +
    "\014\013\uffe0\052\uffe0\053\uffe0\062\uffe0\065\uffe0\001\002" +
    "\000\050\010\247\013\uffdd\014\146\027\142\036\251\042" +
    "\266\044\126\045\137\046\254\047\267\050\140\051\127" +
    "\052\272\053\141\054\265\055\261\057\132\064\134\066" +
    "\uffdd\001\002\000\006\013\334\066\333\001\002\000\004" +
    "\012\335\001\002\000\014\013\uff8f\052\uff8f\053\uff8f\062" +
    "\uff8f\065\uff8f\001\002\000\012\013\uffe1\052\130\053\327" +
    "\065\323\001\002\000\004\013\337\001\002\000\004\013" +
    "\340\001\002\000\014\013\uff90\052\uff90\053\uff90\062\uff90" +
    "\065\uff90\001\002\000\034\010\133\014\146\027\142\044" +
    "\126\045\137\046\254\047\267\050\140\051\127\052\130" +
    "\053\141\057\132\064\134\001\002\000\024\013\uffd2\025" +
    "\163\026\166\027\165\031\164\052\uffd2\053\uffd2\062\uffd2" +
    "\065\uffd2\001\002\000\014\013\uffd1\052\uffd1\053\uffd1\062" +
    "\uffd1\065\uffd1\001\002\000\036\010\133\013\uff77\014\146" +
    "\027\142\044\126\045\137\046\254\047\267\050\140\051" +
    "\127\052\130\053\141\057\132\064\134\001\002\000\004" +
    "\013\uff7c\001\002\000\014\013\uff79\025\163\026\166\027" +
    "\165\031\164\001\002\000\004\013\uff78\001\002\000\004" +
    "\014\352\001\002\000\014\013\uffd0\052\uffd0\053\uffd0\062" +
    "\uffd0\065\uffd0\001\002\000\030\010\133\014\146\027\142" +
    "\044\126\045\137\050\140\051\127\052\130\053\141\057" +
    "\132\064\134\001\002\000\014\007\212\025\163\026\166" +
    "\027\165\031\164\001\002\000\050\010\uff7f\013\uff7f\014" +
    "\uff7f\027\uff7f\036\uff7f\042\uff7f\044\uff7f\045\uff7f\046\uff7f" +
    "\047\uff7f\050\uff7f\051\uff7f\052\uff7f\053\uff7f\054\uff7f\055" +
    "\uff7f\057\uff7f\064\uff7f\066\uff7f\001\002\000\006\010\uff89" +
    "\014\276\001\002\000\004\010\357\001\002\000\032\010" +
    "\133\011\uff82\014\146\027\142\044\126\045\137\050\140" +
    "\051\127\052\130\053\141\057\132\064\134\001\002\000" +
    "\004\011\361\001\002\000\042\010\uff87\012\uff87\014\uff87" +
    "\027\uff87\036\uff87\044\uff87\045\uff87\046\uff87\047\uff87\050" +
    "\uff87\051\uff87\052\uff87\053\uff87\054\uff87\057\uff87\064\uff87" +
    "\001\002\000\016\005\uff9a\011\uff9a\012\uff9a\015\uff9a\033" +
    "\310\034\307\001\002\000\030\010\133\014\146\027\142" +
    "\044\126\045\137\050\140\051\127\052\130\053\141\057" +
    "\132\064\134\001\002\000\030\010\133\014\146\027\142" +
    "\044\126\045\137\050\140\051\127\052\130\053\141\057" +
    "\132\064\134\001\002\000\030\010\133\014\146\027\142" +
    "\044\126\045\137\050\140\051\127\052\130\053\141\057" +
    "\132\064\134\001\002\000\030\010\133\014\146\027\142" +
    "\044\126\045\137\050\140\051\127\052\130\053\141\057" +
    "\132\064\134\001\002\000\030\010\133\014\146\027\142" +
    "\044\126\045\137\050\140\051\127\052\130\053\141\057" +
    "\132\064\134\001\002\000\006\052\375\053\373\001\002" +
    "\000\030\010\133\014\146\027\142\044\126\045\137\050" +
    "\140\051\127\052\130\053\141\057\132\064\134\001\002" +
    "\000\026\005\uff97\011\uff97\012\uff97\015\uff97\025\163\026" +
    "\166\027\165\031\164\033\uff97\034\uff97\001\002\000\020" +
    "\005\uffc2\011\uffc2\012\uffc2\014\377\015\uffc2\033\uffc2\034" +
    "\uffc2\001\002\000\016\005\uff92\011\uff92\012\uff92\015\uff92" +
    "\033\uff92\034\uff92\001\002\000\004\010\240\001\002\000" +
    "\016\005\uff93\011\uff93\012\uff93\015\uff93\033\uff93\034\uff93" +
    "\001\002\000\042\010\247\014\146\015\uff8d\027\142\036" +
    "\251\044\126\045\137\046\254\047\267\050\140\051\127" +
    "\052\130\053\141\054\265\057\132\064\134\001\002\000" +
    "\006\005\u0104\015\uff8e\001\002\000\012\005\uff8b\015\uff8b" +
    "\033\310\034\307\001\002\000\004\015\u0103\001\002\000" +
    "\016\005\uffc3\011\uffc3\012\uffc3\015\uffc3\033\uffc3\034\uffc3" +
    "\001\002\000\040\010\247\014\146\027\142\036\251\044" +
    "\126\045\137\046\254\047\267\050\140\051\127\052\130" +
    "\053\141\054\265\057\132\064\134\001\002\000\012\005" +
    "\uff8c\015\uff8c\033\310\034\307\001\002\000\026\005\uff99" +
    "\011\uff99\012\uff99\015\uff99\025\163\026\166\027\165\031" +
    "\164\033\uff99\034\uff99\001\002\000\026\005\uff95\011\uff95" +
    "\012\uff95\015\uff95\025\163\026\166\027\165\031\164\033" +
    "\uff95\034\uff95\001\002\000\026\005\uff96\011\uff96\012\uff96" +
    "\015\uff96\025\163\026\166\027\165\031\164\033\uff96\034" +
    "\uff96\001\002\000\026\005\uff94\011\uff94\012\uff94\015\uff94" +
    "\025\163\026\166\027\165\031\164\033\uff94\034\uff94\001" +
    "\002\000\026\005\uff98\011\uff98\012\uff98\015\uff98\025\163" +
    "\026\166\027\165\031\164\033\uff98\034\uff98\001\002\000" +
    "\032\010\133\011\uff82\014\146\027\142\044\126\045\137" +
    "\050\140\051\127\052\130\053\141\057\132\064\134\001" +
    "\002\000\004\011\u010d\001\002\000\006\042\266\052\u010f" +
    "\001\002\000\042\010\247\012\uff7a\014\146\027\142\036" +
    "\251\044\126\045\137\046\254\047\267\050\140\051\127" +
    "\052\130\053\141\054\265\057\132\064\134\001\002\000" +
    "\004\004\273\001\002\000\004\012\u0111\001\002\000\014" +
    "\013\uffe1\052\130\053\327\062\uffe1\065\323\001\002\000" +
    "\004\013\u0113\001\002\000\050\010\uff7e\013\uff7e\014\uff7e" +
    "\027\uff7e\036\uff7e\042\uff7e\044\uff7e\045\uff7e\046\uff7e\047" +
    "\uff7e\050\uff7e\051\uff7e\052\uff7e\053\uff7e\054\uff7e\055\uff7e" +
    "\057\uff7e\064\uff7e\066\uff7e\001\002\000\004\052\u011c\001" +
    "\002\000\006\014\352\053\327\001\002\000\004\037\u011a" +
    "\001\002\000\004\037\u0118\001\002\000\040\010\247\014" +
    "\146\027\142\036\251\044\126\045\137\046\254\047\267" +
    "\050\140\051\127\052\130\053\141\054\265\057\132\064" +
    "\134\001\002\000\010\012\uff73\033\310\034\307\001\002" +
    "\000\040\010\247\014\146\027\142\036\251\044\126\045" +
    "\137\046\254\047\267\050\140\051\127\052\130\053\141" +
    "\054\265\057\132\064\134\001\002\000\010\012\uff72\033" +
    "\310\034\307\001\002\000\006\005\uffda\061\uffda\001\002" +
    "\000\050\010\uffdc\013\uffdc\014\uffdc\027\uffdc\036\uffdc\042" +
    "\uffdc\044\uffdc\045\uffdc\046\uffdc\047\uffdc\050\uffdc\051\uffdc" +
    "\052\uffdc\053\uffdc\054\uffdc\055\uffdc\057\uffdc\064\uffdc\066" +
    "\uffdc\001\002\000\014\013\uffe1\052\130\053\327\062\uffe1" +
    "\065\323\001\002\000\004\013\u0120\001\002\000\050\010" +
    "\uff7d\013\uff7d\014\uff7d\027\uff7d\036\uff7d\042\uff7d\044\uff7d" +
    "\045\uff7d\046\uff7d\047\uff7d\050\uff7d\051\uff7d\052\uff7d\053" +
    "\uff7d\054\uff7d\055\uff7d\057\uff7d\064\uff7d\066\uff7d\001\002" +
    "\000\016\005\uff9b\011\uff9b\012\uff9b\015\uff9b\033\uff9b\034" +
    "\uff9b\001\002\000\012\002\uffea\057\uffea\060\uffea\063\uffea" +
    "\001\002\000\010\011\u0124\033\310\034\307\001\002\000" +
    "\016\005\uff91\011\uff91\012\uff91\015\uff91\033\uff91\034\uff91" +
    "\001\002\000\040\010\247\014\146\027\142\036\251\044" +
    "\126\045\137\046\254\047\267\050\140\051\127\052\130" +
    "\053\141\054\265\057\132\064\134\001\002\000\030\016" +
    "\371\017\365\020\364\021\366\023\367\024\363\025\163" +
    "\026\166\027\165\031\164\041\370\001\002\000\016\005" +
    "\uffa0\011\uffa0\012\uffa0\015\uffa0\033\310\034\307\001\002" +
    "\000\004\052\121\001\002\000\006\005\uffe6\011\uffe6\001" +
    "\002\000\012\002\ufffd\057\ufffd\060\ufffd\063\ufffd\001\002" +
    "\000\004\010\u012c\001\002\000\006\011\uffe7\052\121\001" +
    "\002\000\004\011\u012e\001\002\000\004\012\u012f\001\002" +
    "\000\046\010\247\013\uffdd\014\146\027\142\036\251\042" +
    "\266\044\126\045\137\046\254\047\267\050\140\051\127" +
    "\052\272\053\141\054\265\055\261\057\132\064\134\001" +
    "\002\000\004\013\u0131\001\002\000\012\002\uffe9\057\uffe9" +
    "\060\uffe9\063\uffe9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u012f\000\012\003\005\013\003\014\006\015\007\001" +
    "\001\000\012\016\013\017\015\020\020\065\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\004\060\005\061\006\056\007" +
    "\054\067\055\001\001\000\002\001\001\000\006\020\041" +
    "\065\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\021\024\022\025\023\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\043\001\001\000\002\001\001" +
    "\000\010\021\045\022\025\023\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\021\050\022\025\023\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\006\u0129\007\054\067\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\070\067\071" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\074\072\075\075\076\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\076\077\001\001\000\002\001\001\000" +
    "\010\071\104\072\102\073\103\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\074\107\075\075\076\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\071\113\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\010\117\011\116\012\121\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\031\124\034\152\035\143\036\130\037\147\040" +
    "\151\042\144\043\142\046\135\056\134\061\150\062\123" +
    "\102\146\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\031\231\034\152\035" +
    "\143\036\130\037\147\040\151\042\144\043\142\046\135" +
    "\056\232\061\150\062\123\102\146\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\031\214\034" +
    "\152\035\143\036\130\037\147\040\151\042\144\043\142" +
    "\046\135\056\134\061\150\062\123\102\146\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\031\203\034\152\035\143\036\130\037\147\040\151\042" +
    "\144\043\142\044\204\045\205\046\135\056\134\061\150" +
    "\062\123\102\146\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\031\200\034\152\035\143\036\130\037\147\040" +
    "\151\042\144\043\142\046\135\056\134\061\150\062\123" +
    "\102\146\001\001\000\002\001\001\000\034\031\173\034" +
    "\152\035\143\036\130\037\147\040\151\042\144\043\142" +
    "\046\135\056\134\061\150\062\123\102\146\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\031\161\034\152" +
    "\035\143\036\130\037\147\040\151\042\144\043\142\046" +
    "\135\056\134\061\150\062\123\102\146\001\001\000\002" +
    "\001\001\000\034\031\171\034\152\035\143\036\130\037" +
    "\147\040\151\042\144\043\142\046\135\056\134\061\150" +
    "\062\123\102\146\001\001\000\034\031\170\034\152\035" +
    "\143\036\130\037\147\040\151\042\144\043\142\046\135" +
    "\056\134\061\150\062\123\102\146\001\001\000\034\031" +
    "\167\034\152\035\143\036\130\037\147\040\151\042\144" +
    "\043\142\046\135\056\134\061\150\062\123\102\146\001" +
    "\001\000\034\031\166\034\152\035\143\036\130\037\147" +
    "\040\151\042\144\043\142\046\135\056\134\061\150\062" +
    "\123\102\146\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\031\176\034\152" +
    "\035\143\036\130\037\147\040\151\042\144\043\142\046" +
    "\135\056\134\061\150\062\123\102\146\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\031" +
    "\202\034\152\035\143\036\130\037\147\040\151\042\144" +
    "\043\142\046\135\056\134\061\150\062\123\102\146\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\031\207\034\152\035\143\036" +
    "\130\037\147\040\151\042\144\043\142\046\135\056\134" +
    "\061\150\062\123\102\146\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\031\212\034\152\035\143\036\130" +
    "\037\147\040\151\042\144\043\142\046\135\056\134\061" +
    "\150\062\123\102\146\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\063\216\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\031\221\034\152" +
    "\035\143\036\130\037\147\040\151\042\144\043\142\046" +
    "\135\056\134\061\150\062\123\102\146\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\031\226\034\152\035\143\036\130\037\147" +
    "\040\151\042\144\043\142\046\135\056\134\061\150\062" +
    "\123\102\146\001\001\000\002\001\001\000\034\031\230" +
    "\034\152\035\143\036\130\037\147\040\151\042\144\043" +
    "\142\046\135\056\134\061\150\062\123\102\146\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\031\240\034\152\035\143\036\130\037" +
    "\147\040\151\042\144\043\142\044\241\045\205\046\135" +
    "\056\134\061\150\062\123\102\146\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\056\025\257\031\263\034\245\035\256\036\130\037" +
    "\147\040\151\042\261\043\142\046\135\047\247\050\254" +
    "\051\270\053\252\055\251\056\134\057\262\060\255\061" +
    "\150\062\123\064\267\102\146\001\001\000\002\001\001" +
    "\000\040\031\263\034\245\035\256\036\130\037\147\040" +
    "\151\042\261\043\142\046\135\055\u0122\056\232\060\255" +
    "\061\150\062\123\102\146\001\001\000\002\001\001\000" +
    "\040\031\263\034\245\035\256\036\130\037\147\040\151" +
    "\042\261\043\142\046\135\055\u0120\056\134\060\255\061" +
    "\150\062\123\102\146\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\025\257\031\263\034" +
    "\245\035\256\036\130\037\147\040\151\042\261\043\142" +
    "\046\135\051\u011c\053\252\055\251\056\134\057\262\060" +
    "\255\061\150\062\123\064\267\102\146\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\031\263\034\245\035\256\036\130\037\147\040" +
    "\151\042\261\043\142\046\135\055\361\056\134\060\255" +
    "\061\150\062\123\102\146\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\031\263\034\245\035\256\036\130" +
    "\037\147\040\151\042\261\043\142\046\135\054\304\055" +
    "\305\056\134\060\255\061\150\062\123\102\146\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\066\276\001\001\000\040\031\240" +
    "\034\152\035\143\036\130\037\147\040\151\042\144\043" +
    "\142\044\302\045\205\046\135\056\134\061\150\062\123" +
    "\102\146\001\001\000\002\001\001\000\040\031\240\034" +
    "\152\035\143\036\130\037\147\040\151\042\144\043\142" +
    "\044\300\045\205\046\135\056\134\061\150\062\123\102" +
    "\146\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\031\263\034\245\035\256\036\130\037\147" +
    "\040\151\042\261\043\142\046\135\055\311\056\134\060" +
    "\255\061\150\062\123\102\146\001\001\000\040\031\263" +
    "\034\245\035\256\036\130\037\147\040\151\042\261\043" +
    "\142\046\135\055\310\056\134\060\255\061\150\062\123" +
    "\102\146\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\026\320\027\325\030\317\033\316\034\321\036\314" +
    "\041\315\042\323\043\324\052\313\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\344\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\030\327\033\316\034\321\036\314\041\315\042" +
    "\323\043\324\001\001\000\002\001\001\000\002\001\001" +
    "\000\056\025\257\031\263\034\245\035\256\036\130\037" +
    "\147\040\151\042\261\043\142\046\135\047\331\050\254" +
    "\051\270\053\252\055\251\056\134\057\262\060\255\061" +
    "\150\062\123\064\267\102\146\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\026\335\027" +
    "\325\030\317\033\316\034\321\036\314\041\315\042\323" +
    "\043\324\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\031\341\034\152\035\143\036\130" +
    "\037\147\040\151\042\144\043\142\046\135\056\134\060" +
    "\342\061\150\062\123\102\146\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\031\345\034\152\035\143\036" +
    "\130\037\147\040\151\042\144\043\142\046\135\056\134" +
    "\060\346\061\150\062\123\102\146\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\061\350" +
    "\001\001\000\002\001\001\000\034\031\352\034\152\035" +
    "\143\036\130\037\147\040\151\042\144\043\142\046\135" +
    "\056\134\061\150\062\123\102\146\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\066\355\001\001\000\002" +
    "\001\001\000\040\031\240\034\152\035\143\036\130\037" +
    "\147\040\151\042\144\043\142\044\357\045\205\046\135" +
    "\056\134\061\150\062\123\102\146\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\031\u0109" +
    "\034\152\035\143\036\130\037\147\040\151\042\144\043" +
    "\142\046\135\056\134\061\150\062\123\102\146\001\001" +
    "\000\034\031\u0108\034\152\035\143\036\130\037\147\040" +
    "\151\042\144\043\142\046\135\056\134\061\150\062\123" +
    "\102\146\001\001\000\034\031\u0107\034\152\035\143\036" +
    "\130\037\147\040\151\042\144\043\142\046\135\056\134" +
    "\061\150\062\123\102\146\001\001\000\034\031\u0106\034" +
    "\152\035\143\036\130\037\147\040\151\042\144\043\142" +
    "\046\135\056\134\061\150\062\123\102\146\001\001\000" +
    "\034\031\u0105\034\152\035\143\036\130\037\147\040\151" +
    "\042\144\043\142\046\135\056\134\061\150\062\123\102" +
    "\146\001\001\000\006\042\375\077\373\001\001\000\034" +
    "\031\371\034\152\035\143\036\130\037\147\040\151\042" +
    "\144\043\142\046\135\056\134\061\150\062\123\102\146" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\031\263" +
    "\034\245\035\256\036\130\037\147\040\151\042\261\043" +
    "\142\046\135\055\u0100\056\134\060\255\061\150\062\123" +
    "\100\u0101\101\377\102\146\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\031\263\034\245\035\256\036\130\037\147\040\151\042" +
    "\261\043\142\046\135\055\u0104\056\134\060\255\061\150" +
    "\062\123\102\146\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\031\240\034\152\035\143\036" +
    "\130\037\147\040\151\042\144\043\142\044\u010b\045\205" +
    "\046\135\056\134\061\150\062\123\102\146\001\001\000" +
    "\002\001\001\000\004\064\u010d\001\001\000\042\031\263" +
    "\034\245\035\256\036\130\037\147\040\151\042\261\043" +
    "\142\046\135\054\u010f\055\305\056\134\060\255\061\150" +
    "\062\123\102\146\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\026\320\027\325\030\317\033\316\034\321" +
    "\036\314\041\315\042\323\043\324\052\u0111\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\036\u0115\061\u0116\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\031\263\034\245\035\256\036\130\037\147" +
    "\040\151\042\261\043\142\046\135\055\u0118\056\134\060" +
    "\255\061\150\062\123\102\146\001\001\000\002\001\001" +
    "\000\040\031\263\034\245\035\256\036\130\037\147\040" +
    "\151\042\261\043\142\046\135\055\u011a\056\134\060\255" +
    "\061\150\062\123\102\146\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\026\320\027\325" +
    "\030\317\033\316\034\321\036\314\041\315\042\323\043" +
    "\324\052\u011e\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\031\u0125\034\245\035\256\036\130" +
    "\037\147\040\151\042\261\043\142\046\135\055\u0126\056" +
    "\134\060\255\061\150\062\123\102\146\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\u0128\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\010\u012c\011\116\012\121\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\025\257\031\263\034\245\035\256" +
    "\036\130\037\147\040\151\042\261\043\142\046\135\047" +
    "\u012f\050\254\051\270\053\252\055\251\056\134\057\262" +
    "\060\255\061\150\062\123\064\267\102\146\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$IniParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$IniParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$IniParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	public Ast ast;
	public PrintStream out = System.out;
	public PrintStream err = System.err;

	public Map<String,Function> parsedFunctionMap=new HashMap<String,Function>();
	public List<UserType> parsedTypes=new ArrayList<UserType>();
	public List<Function> parsedFunctionList=new ArrayList<Function>();
	public List<Binding> parsedBindingList=new ArrayList<Binding>();
	public List<AtBinding> parsedAtBindingList=new ArrayList<AtBinding>();
	public List<Import> parsedImportList=new ArrayList<Import>();

	protected static IniParser createParser(String fileName) throws java.io.FileNotFoundException {
      IniScanner scanner= new IniScanner(new java.io.FileReader(fileName));
      scanner.setFileName(fileName);
      IniParser parser= new IniParser(scanner);
      parser.ast = new Ast(parser);
      return parser;
	}

	protected static IniParser createParser(Ast ast, String fileName) throws java.io.FileNotFoundException {
      IniScanner scanner= new IniScanner(new java.io.FileReader(fileName));
      scanner.setFileName(fileName);
      IniParser parser= new IniParser(scanner);
      parser.ast = ast;
      return parser;
	}

	public static IniParser parseFile(String fileName) throws java.io.FileNotFoundException {
      IniScanner scanner= new IniScanner(new java.io.FileReader(fileName));
      scanner.setFileName(fileName);
	  IniParser parser= new IniParser(scanner);
      parser.ast = new Ast(parser);
      try {
    	parser.parse();
	  	for (Binding b : parser.parsedBindingList) {
			IniFunction.functions.put(b.name, new BoundJavaFunction(b));
	  	}
	  	for (AtBinding b : parser.parsedAtBindingList) {
			//At.atPredicates.put(b.name, ((At)Class.forName(b.className).newInstance()).getClass());
			At.atPredicates.put(b.name, (Class<? extends At>)Class.forName(b.className));
	  	}
	  } catch(Exception e) {
	  	e.printStackTrace();
	  	parser.errors.add(new SyntaxError(null, "internal parser error"));
	  }
      return parser;
	}

	public static IniParser parseCode(String code,PrintStream out,PrintStream err) throws Exception {
		IniScanner scanner= new IniScanner(new java.io.StringReader(code));
		scanner.setFileName("<none>");
		IniParser parser= new IniParser(scanner);
		parser.out = out;
		parser.err = err;
      parser.ast = new Ast(parser);
      try {
		parser.parse();
		for (Binding b : parser.parsedBindingList) {
			IniFunction.functions.put(b.name, new BoundJavaFunction(b));
		}
	  } catch(Exception e) {
		if(parser.errors.size()==0) {
			e.printStackTrace();
			parser.errors.add(new SyntaxError(null, "internal parser error"));
		}
	  }
		return parser;
	}

	public static IniParser parseCode(String code) throws Exception {
		return parseCode(code,System.out,System.err);
	}
	
	public ini.type.AstAttrib attrib() throws Exception {
		return ini.Main.attrib(this);
	}
	
	public void evalMainFunction() throws Exception {
		ini.Main.evalMainFunction(this,null);
	}
	
	
	public List<SyntaxError> errors = new ArrayList<SyntaxError>();
	
  public void syntax_error(java_cup.runtime.Symbol current) {
    //errors.add(new SyntaxError("syntax error: '"+current.value + "' is not expected", at " + (current.left+1)+"("+(current.right+1)+")" );
    errors.add(new SyntaxError((Token)current.value, "'"+current.value + "' is not expected"));
  }
  
  	public void printErrors(PrintStream out) {
		for (SyntaxError error : errors) {
			out.println(error.toString());
		}
	}

	public boolean hasErrors() {
		return !errors.isEmpty();
	}
  
  
  

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$IniParser$actions {
  private final IniParser parser;

  /** Constructor */
  CUP$IniParser$actions(IniParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$IniParser$do_action(
    int                        CUP$IniParser$act_num,
    java_cup.runtime.lr_parser CUP$IniParser$parser,
    java.util.Stack            CUP$IniParser$stack,
    int                        CUP$IniParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$IniParser$result;

      /* select the action based on the action number */
      switch (CUP$IniParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // field ::= IDENTIFIER COL list_constructor 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = new Field(parser,(Token)i,i.toString(),(Constructor)c);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(60/*field*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // field_list ::= field 
            {
              Object RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List l=new ArrayList();
		l.add(f);
		RESULT=l;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(59/*field_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // field_list ::= field_list COMMA field 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=(List)l;
		list.add(f);
		RESULT=list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(59/*field_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // field_list_opt ::= 
            {
              Object RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(58/*field_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // field_list_opt ::= field_list 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = l; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(58/*field_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // list_constructor ::= list_constructor MULT 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 
		RESULT = new Constructor(parser,(Token)m,(Constructor)c);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(56/*list_constructor*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // list_constructor ::= constructor_or_type 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = c; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(56/*list_constructor*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // constructor_or_type ::= TIDENTIFIER 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = new Constructor(parser,(Token)i,i.toString(),null);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(57/*constructor_or_type*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // constructor_or_type ::= constructor 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = c;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(57/*constructor_or_type*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // constructor ::= LSPAREN field_list_opt RSPAREN 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
		RESULT = new Constructor(parser,(Token)i,null,(List)l);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(55/*constructor*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // constructor ::= TIDENTIFIER LSPAREN field_list_opt RSPAREN 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
		RESULT = new Constructor(parser,(Token)i,i.toString(),(List)l);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(55/*constructor*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // constructor_list ::= constructor 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=new ArrayList();
		list.add(c);
		RESULT=list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(54/*constructor_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // constructor_list ::= constructor_list TUBE constructor 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=(List)l;
		list.add(c);
		RESULT=list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(54/*constructor_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // usertype ::= TYPE TIDENTIFIER ASSIGN constructor_list 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		UserType type = new UserType(parser,(Token)t,i.toString(),(List)l);
		parser.parsedTypes.add(type);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(53/*usertype*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // set_decl ::= LSPAREN expr DOTDOT expr RSPAREN 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int lbleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object lb = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int ubleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int ubright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object ub = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
	RESULT = new SetDeclaration(parser,(Token)l,(Expression)lb,(Expression)ub);

              CUP$IniParser$result = new java_cup.runtime.Symbol(47/*set_decl*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // set_logical_expr ::= var_list OF set_var_access TUBE logical_expr 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int ofleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int ofright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object of = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = new SetExpression(parser,(Token)of,(List)l,(Expression)s,(Expression)e);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(45/*set_logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // set_logical_expr ::= var_list OF set_decl TUBE logical_expr 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int ofleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int ofright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object of = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = new SetExpression(parser,(Token)of,(List)l,(Expression)s,(Expression)e);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(45/*set_logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // guard ::= set_logical_expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(41/*guard*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // guard ::= logical_expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(41/*guard*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // ret_expr_opt ::= 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(24/*ret_expr_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // ret_expr_opt ::= RETURN 
            {
              Object RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = new ReturnStatement(parser,(Token)r,null); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(24/*ret_expr_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // ret_expr_opt ::= RETURN boolean_literal 
            {
              Object RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = new ReturnStatement(parser,(Token)r,(Expression)e); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(24/*ret_expr_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // ret_expr_opt ::= RETURN expr 
            {
              Object RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = new ReturnStatement(parser,(Token)r,(Expression)e); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(24/*ret_expr_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // logical_expr_opt ::= 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(42/*logical_expr_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // logical_expr_opt ::= logical_expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(42/*logical_expr_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // rule_body ::= statement_list_opt ret_expr_opt 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int retleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int retright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object ret = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		if(ret!=null) {
			if(l!=null) {
				((Sequence)l).last().setNext(ret);
			} else {
				l = new Sequence(ret);
			}
		}
		RESULT = l;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(40/*rule_body*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // rule ::= guard LCPAREN rule_body RCPAREN 
            {
              Object RESULT = null;
		int gleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
		RESULT = new Rule(parser,((AstNode)g).token(),null,(Expression)g,(Sequence)l, null);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(39/*rule*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // rule ::= DOLLAR LPAREN arg_list_opt RPAREN at_expr logical_expr_opt LCPAREN rule_body RCPAREN 
            {
              Object RESULT = null;
		int elleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).value;
		int atleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object at = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
		RESULT = new Rule(parser,((AstNode)at).token(),(AtPredicate)at,(Expression)g,(Sequence)l, (List)el);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(39/*rule*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // rule ::= at_expr logical_expr_opt LCPAREN rule_body RCPAREN 
            {
              Object RESULT = null;
		int atleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object at = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
		RESULT = new Rule(parser,((AstNode)at).token(),(AtPredicate)at,(Expression)g,(Sequence)l, null);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(39/*rule*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // arg_list ::= expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=new ArrayList();
		list.add(e);
		RESULT=list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(35/*arg_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // arg_list ::= arg_list COMMA expr 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=(List)l;
		list.add(e);
		RESULT=list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(35/*arg_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // arg_list_opt ::= 
            {
              Object RESULT = null;
		 RESULT=new ArrayList(); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(34/*arg_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // arg_list_opt ::= arg_list 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=l; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(34/*arg_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // invocation ::= IDENTIFIER LPAREN arg_list_opt RPAREN 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
		RESULT = new Invocation(parser,(Token)i,i.toString(),(List)l);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(32/*invocation*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // pre_post_op ::= var_access MINUSMINUS 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new UnaryOperator(parser,(Token)op,UnaryOperator.Kind.POST_DEC,(Expression)e); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(33/*pre_post_op*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // pre_post_op ::= var_access PLUSPLUS 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new UnaryOperator(parser,(Token)op,UnaryOperator.Kind.POST_INC,(Expression)e); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(33/*pre_post_op*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // at_expr ::= AT IDENTIFIER at_params_conf_opt LPAREN arg_list_opt RPAREN 
            {
              Object RESULT = null;
		int atleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).right;
		Object at = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int cpleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object cp = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		 
	RESULT = new AtPredicate(parser,(Token)at,name.toString(),(List)cp,(List)rp, null);

              CUP$IniParser$result = new java_cup.runtime.Symbol(50/*at_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // at_expr ::= IDENTIFIER COL AT IDENTIFIER at_params_conf_opt LPAREN arg_list_opt RPAREN 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).value;
		int atleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).right;
		Object at = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int cpleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object cp = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		 
	RESULT = new AtPredicate(parser,(Token)at,name.toString(),(List)cp,(List)rp, id.toString());

              CUP$IniParser$result = new java_cup.runtime.Symbol(50/*at_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // at_params_conf_opt ::= 
            {
              Object RESULT = null;
		
	RESULT = new ArrayList();

              CUP$IniParser$result = new java_cup.runtime.Symbol(52/*at_params_conf_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // at_params_conf_opt ::= LSPAREN arg_list_opt RSPAREN 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
	RESULT = (List)l;

              CUP$IniParser$result = new java_cup.runtime.Symbol(52/*at_params_conf_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // field_match_expr_list ::= logical_expr 
            {
              Object RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List l=new ArrayList();
		l.add(f);
		RESULT=l;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(63/*field_match_expr_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // field_match_expr_list ::= field_match_expr_list COMMA logical_expr 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=(List)l;
		list.add(f);
		RESULT=list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(63/*field_match_expr_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // field_match_expr_list_opt ::= 
            {
              Object RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(62/*field_match_expr_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // field_match_expr_list_opt ::= field_match_expr_list 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = l; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(62/*field_match_expr_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // case_expr ::= CASE LCPAREN rule_list_opt RCPAREN 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
		RESULT = new CaseStatement(parser,(Token)c, (List)l,null); 
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(31/*case_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // case_expr ::= CASE LCPAREN rule_list_opt DEFAULT LCPAREN statement_list_opt RCPAREN RCPAREN 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		
		RESULT = new CaseStatement(parser,(Token)c, (List)l,(Sequence)s); 
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(31/*case_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // logical_expr ::= LPAREN logical_expr RPAREN 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(43/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // logical_expr ::= expr MATCHES constructor_match_expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.MATCHES,(Expression)e1,(ConstructorMatchExpression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(43/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // logical_expr ::= expr MATCHES invocation 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.MATCHES,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(43/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // logical_expr ::= expr GTE expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.GTE,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(43/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // logical_expr ::= expr GT expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.GT,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(43/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // logical_expr ::= expr LTE expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.LTE,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(43/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // logical_expr ::= expr LT expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.LT,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(43/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // logical_expr ::= expr NOTEQUALS expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.NOTEQUALS,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(43/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // logical_expr ::= expr EQUALS expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.EQUALS,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(43/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // logical_expr ::= QUESTION logical_expr 
            {
              Object RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new UnaryOperator(parser,(Token)op,UnaryOperator.Kind.OPT,(Expression)e); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(43/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // logical_expr ::= NOT logical_expr 
            {
              Object RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new UnaryOperator(parser,(Token)op,UnaryOperator.Kind.NOT,(Expression)e); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(43/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // logical_expr ::= logical_expr OROR logical_expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.OR,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(43/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // logical_expr ::= logical_expr ANDAND logical_expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.AND,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(43/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // logical_expr ::= invocation 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(43/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // logical_expr ::= sync_var_access 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(43/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // logical_expr ::= var_access ASSIGN logical_expr 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = new Assignment(parser,(Token)a,(VariableAccess)v,(Expression)e);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(43/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // logical_expr ::= var_access 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(43/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // logical_expr ::= boolean_literal 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(43/*logical_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // algebraic_expr ::= LPAREN algebraic_expr RPAREN 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(44/*algebraic_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // algebraic_expr ::= expr DIV expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.DIV,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(44/*algebraic_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // algebraic_expr ::= expr MULT expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.MULT,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(44/*algebraic_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // algebraic_expr ::= MINUS expr 
            {
              Object RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new UnaryOperator(parser,(Token)op,UnaryOperator.Kind.MINUS,(Expression)e); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(44/*algebraic_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // algebraic_expr ::= expr MINUS expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.MINUS,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(44/*algebraic_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // algebraic_expr ::= expr PLUS expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.PLUS,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(44/*algebraic_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // algebraic_expr ::= pre_post_op 
            {
              Object RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=op; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(44/*algebraic_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // algebraic_expr ::= INT 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new NumberLiteral(parser,(Token)e,Integer.parseInt(e.toString())); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(44/*algebraic_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // algebraic_expr ::= NUM 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new NumberLiteral(parser,(Token)e,Double.parseDouble(e.toString())); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(44/*algebraic_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // list_concat_expr ::= var_access AND expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.CONCAT,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(64/*list_concat_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // list_concat_expr ::= list_expr AND expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.CONCAT,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(64/*list_concat_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expr ::= list_concat_expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(23/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expr ::= FUNCTION LPAREN IDENTIFIER RPAREN 
            {
              Object RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		 RESULT = new FunctionLiteral(parser,(Token)f,i.toString()); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(23/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expr ::= set_var_access 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(23/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expr ::= set_decl 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(23/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expr ::= constructor_expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(23/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expr ::= list_expr 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=l; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(23/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expr ::= string_expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(23/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expr ::= algebraic_expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(23/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expr ::= CHAR 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = new CharLiteral(parser,(Token)c,c.toString().charAt(0)); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(23/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expr ::= invocation 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(23/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expr ::= THIS 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = new ThisLiteral(parser,(Token)t); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(23/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expr ::= sync_var_access 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(23/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expr ::= var_access ASSIGN expr 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = new Assignment(parser,(Token)a,(VariableAccess)v,(Expression)e);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(23/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr ::= var_access 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(23/*expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // statement ::= case_expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(22/*statement*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // statement ::= invocation 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(22/*statement*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // statement ::= assignment_expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(22/*statement*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // statement ::= pre_post_op 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = e; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(22/*statement*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // assignment_list ::= IDENTIFIER ASSIGN expr 
            {
              Object RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=new ArrayList();
		list.add(new Assignment(parser,(Token)f,new Variable(parser,(Token)f,f.toString()),(Expression)e));
		RESULT=list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(49/*assignment_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // assignment_list ::= assignment_list COMMA IDENTIFIER ASSIGN expr 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=(List)l;
		list.add(new Assignment(parser,(Token)f,new Variable(parser,(Token)f,f.toString()),(Expression)e));
		RESULT=list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(49/*assignment_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // constructor_match_expr ::= TIDENTIFIER 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = new ConstructorMatchExpression(parser,(Token)s,s.toString(),null);	
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(61/*constructor_match_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // constructor_match_expr ::= TIDENTIFIER LSPAREN field_match_expr_list_opt RSPAREN 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
		RESULT = new ConstructorMatchExpression(parser,(Token)s,s.toString(),(List)l);	
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(61/*constructor_match_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // constructor_expr ::= TIDENTIFIER LSPAREN assignment_list RSPAREN 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
		RESULT = new SetConstructor(parser,(Token)s,s.toString(),(List)l);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(48/*constructor_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // list_expr ::= LSPAREN arg_list_opt RSPAREN 
            {
              Object RESULT = null;
		int openleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int openright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object open = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int closeleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int closeright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object close = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = new ListExpression(parser,(Token)open,(List)l);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(36/*list_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // single_string ::= STRING 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new StringLiteral(parser,(Token)s,s.toString()); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(29/*single_string*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // string_expr ::= single_string PLUS expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BinaryOperator(parser,(Token)op,BinaryOperator.Kind.PLUS,(Expression)e1,(Expression)e2); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(30/*string_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // string_expr ::= single_string 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=s; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(30/*string_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // var_access ::= var_access DOT IDENTIFIER 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = new FieldAccess(parser,(Token)t,(VariableAccess)v,i.toString()); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(26/*var_access*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // var_access ::= var_access LSPAREN expr DOTDOT expr RSPAREN 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int minleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int minright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object min = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int maxleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int maxright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object max = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		 RESULT = new SubArrayAccess(parser,(Token)t,(VariableAccess)v,(Expression)min,(Expression)max); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(26/*var_access*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // var_access ::= var_access LSPAREN expr RSPAREN 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		 RESULT = new ArrayAccess(parser,(Token)t,(VariableAccess)v,(Expression)e); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(26/*var_access*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // var_access ::= IDENTIFIER 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = new Variable(parser,(Token)v,v.toString()); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(26/*var_access*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // boolean_literal ::= FALSE 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BooleanLiteral(parser,(Token)e,false); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(46/*boolean_literal*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // boolean_literal ::= TRUE 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=new BooleanLiteral(parser,(Token)e,true); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(46/*boolean_literal*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // set_var_access ::= TIDENTIFIER 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = new Variable(parser,(Token)v,v.toString()); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(28/*set_var_access*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // assignment_expr ::= set_var_access ASSIGN set_decl 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 
		RESULT = new Assignment(parser,(Token)a,(VariableAccess)v,(Expression)e);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(25/*assignment_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // assignment_expr ::= var_access ASSIGN boolean_literal 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 
		RESULT = new Assignment(parser,(Token)a,(VariableAccess)v,(Expression)e);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(25/*assignment_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // assignment_expr ::= var_access ASSIGN expr 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = new Assignment(parser,(Token)a,(VariableAccess)v,(Expression)e);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(25/*assignment_expr*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // type ::= type MULT 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		 RESULT = new TypeVariable(parser,((TypeVariable)t).token,(TypeVariable)t); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(17/*type*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // type ::= TIDENTIFIER 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = new TypeVariable(parser,(Token)i,i.toString()); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(17/*type*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // type_list ::= type 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List l=new ArrayList();
		l.add(t);
		RESULT=l;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(16/*type_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // type_list ::= type_list COMMA type 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=(List)l;
		list.add(t);
		RESULT=list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(16/*type_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // type_list_opt ::= 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(15/*type_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // type_list_opt ::= type_list 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = l; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(15/*type_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // var_list ::= IDENTIFIER 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List l=new ArrayList();
		l.add(new Variable(parser,(Token)i,i.toString()));
		RESULT=l;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(19/*var_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // var_list ::= var_list COMMA IDENTIFIER 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=(List)l;
		list.add(new Variable(parser,(Token)i,i.toString()));
		RESULT=list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(19/*var_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // rule_list ::= rule 
            {
              Object RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List l=new ArrayList();
		l.add(r);
		RESULT=l;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(38/*rule_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // rule_list ::= rule_list rule 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=(List)l;
		list.add(r);
		RESULT = list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(38/*rule_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // rule_list_opt ::= 
            {
              Object RESULT = null;
		 RESULT=new ArrayList(); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(37/*rule_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // rule_list_opt ::= rule_list 
            {
              Object RESULT = null;
		int rlleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int rlright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object rl = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=rl; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(37/*rule_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement_list ::= statement 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		Sequence seq=new Sequence(s);
		RESULT=seq;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(21/*statement_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement_list ::= statement_list statement 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		Sequence seq=(Sequence)l;
		seq.last().setNext(s);
		RESULT = seq;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(21/*statement_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement_list_opt ::= 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(20/*statement_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement_list_opt ::= statement_list 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT=l; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(20/*statement_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // param ::= IDENTIFIER 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = new Parameter(parser,(Token)i,i.toString());
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(8/*param*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // param ::= IDENTIFIER ASSIGN expr 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = new Parameter(parser,(Token)i,i.toString(),(Expression)e);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(8/*param*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // param_list ::= param 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List l=new ArrayList();
		l.add(p);
		RESULT=l;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(7/*param_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // param_list ::= param_list COMMA param 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		List list=(List)l;
		list.add(p);
		RESULT=list;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(7/*param_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // param_list_opt ::= 
            {
              Object RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$IniParser$result = new java_cup.runtime.Symbol(6/*param_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // param_list_opt ::= param_list 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		 RESULT = l; 
              CUP$IniParser$result = new java_cup.runtime.Symbol(6/*param_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // function ::= PROCESS IDENTIFIER LPAREN param_list_opt RPAREN LCPAREN rule_list_opt RCPAREN 
            {
              Object RESULT = null;
		int defleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).right;
		Object def = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int rulesleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int rulesright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object rules = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
		//System.out.println("created function "+name);
		Function f = new Function(parser, (Token)def, name.toString(), (List)vars, (List)rules);
		parser.parsedFunctionMap.put(f.name,f);
		parser.parsedFunctionList.add(f);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(5/*function*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // function ::= FUNCTION IDENTIFIER LPAREN param_list_opt RPAREN LCPAREN rule_list_opt RCPAREN 
            {
              Object RESULT = null;
		int defleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).right;
		Object def = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int rulesleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int rulesright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object rules = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
		//System.out.println("created function "+name);
		Function f = new Function(parser, (Token)def, name.toString(), (List)vars, (List)rules);
		parser.parsedFunctionMap.put(f.name,f);
		parser.parsedFunctionList.add(f);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(5/*function*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // at_binding ::= AT IDENTIFIER at_binding_conf_type LPAREN type_list_opt RPAREN IMPLIES STRING 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-6)).value;
		int ctleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).left;
		int ctright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).right;
		Object ct = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-5)).value;
		int ftleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int ftright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object ft = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int rtleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).right;
		Object rt = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-3)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object className = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = new AtBinding(parser, (Token)name, name.toString(), (List)ct, (List) rt, className.toString());
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(51/*at_binding*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // at_binding_conf_type ::= LSPAREN type_list_opt RSPAREN 
            {
              Object RESULT = null;
		int ctleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int ctright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object ct = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		
	RESULT = ct;

              CUP$IniParser$result = new java_cup.runtime.Symbol(18/*at_binding_conf_type*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // at_binding_conf_type ::= 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(18/*at_binding_conf_type*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // binding ::= IDENTIFIER LPAREN type_list_opt RPAREN ARROW_RIGHT type IMPLIES STRING COMMA STRING 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-9)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-9)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-9)).value;
		int ftleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-8)).left;
		int ftright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-8)).right;
		Object ft = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-8)).value;
		int typesleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).left;
		int typesright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).right;
		Object types = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-7)).value;
		int rtypeleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).left;
		int rtyperight = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).right;
		Object rtype = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-4)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).right;
		Object className = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).value;
		int methodNameleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int methodNameright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object methodName = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		RESULT = new Binding(parser, (Token)name, name.toString(), (List)types, (TypeVariable)rtype, className.toString(), methodName.toString());
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(14/*binding*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-9)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // binding_list ::= at_binding 
            {
              Object RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		parser.parsedAtBindingList.add((AtBinding)b);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(13/*binding_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // binding_list ::= binding_list at_binding 
            {
              Object RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		parser.parsedAtBindingList.add((AtBinding)b);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(13/*binding_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // binding_list ::= binding 
            {
              Object RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		parser.parsedBindingList.add((Binding)b);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(13/*binding_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // binding_list ::= binding_list binding 
            {
              Object RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		parser.parsedBindingList.add((Binding)b);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(13/*binding_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // binding_list_opt ::= 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(12/*binding_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // binding_list_opt ::= binding_list 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(12/*binding_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // import_decl ::= IMPORT STRING 
            {
              Object RESULT = null;
		int itokenleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int itokenright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object itoken = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		int filePathleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int filePathright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object filePath = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		Import i = new Import(parser, (Token)itoken, filePath.toString());
		try {
			IniParser localParser = IniParser.createParser(parser.ast,filePath.toString());
			localParser.parse();
			parser.parsedFunctionMap.putAll(localParser.parsedFunctionMap);
			parser.parsedBindingList.addAll(localParser.parsedBindingList);
			parser.parsedFunctionList.addAll(localParser.parsedFunctionList);
		} catch (java.io.FileNotFoundException e) {
			throw new RuntimeException("Cannot import file '" + i.filePath + "'" 
				+ (i.token != null ? " at " + i.token.getLocation() : ""));
		}
		RESULT = i;
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(11/*import_decl*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // import_list ::= import_decl 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		parser.parsedImportList.add((Import)i);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(10/*import_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // import_list ::= import_list import_decl 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).value;
		
		parser.parsedImportList.add((Import)i);
	
              CUP$IniParser$result = new java_cup.runtime.Symbol(10/*import_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // import_list_opt ::= 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(9/*import_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // import_list_opt ::= import_list 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(9/*import_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // program_elt ::= usertype 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(4/*program_elt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // program_elt ::= function 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(4/*program_elt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // program_elt_list ::= program_elt 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(3/*program_elt_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program_elt_list ::= program_elt_list program_elt 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(3/*program_elt_list*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program_elt_list_opt ::= 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(2/*program_elt_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program_elt_list_opt ::= program_elt_list 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(2/*program_elt_list_opt*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini_program ::= import_list_opt binding_list_opt program_elt_list_opt 
            {
              Object RESULT = null;

              CUP$IniParser$result = new java_cup.runtime.Symbol(1/*ini_program*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          return CUP$IniParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini_program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).value;
		RESULT = start_val;
              CUP$IniParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$IniParser$stack.elementAt(CUP$IniParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$IniParser$parser.done_parsing();
          return CUP$IniParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

