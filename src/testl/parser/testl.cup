
/*
 * This source code file is the exclusive property of its author. No copy or 
 * usage of the source code is permitted unless the author contractually 
 * allows it under the terms of a well-defined agreement.
 */

import java.util.*;
import testl.parser.ast.*;

parser code {:
	public Expression expression;
:};

terminal NUM, IDENTIFIER, PLUS, MINUS, DIV, MULT, LPAREN, RPAREN;

non terminal exprs, expr; 

precedence left PLUS, MINUS;
precedence left MULT, DIV;


start with exprs;

/***************************************************************/
/***                      INI GRAMMAR                         **/    
/***************************************************************/

exprs ::= expr:e {:
	parser.expression = (Expression) e;	
:}
;


expr ::= NUM:n {:
	RESULT = new Num(Double.parseDouble(n.toString()));
:}
	| IDENTIFIER
	| expr:e1 PLUS expr:e2 {:
	RESULT = new BinaryOperator(BinaryOperator.OperatorType.PLUS,(Expression)e1,(Expression)e2);
:}
	| expr:e1 MINUS expr:e2 {:
	RESULT = new BinaryOperator(BinaryOperator.OperatorType.MINUS,(Expression)e1,(Expression)e2);
:}
	| expr:e1 DIV expr:e2 {:
	RESULT = new BinaryOperator(BinaryOperator.OperatorType.DIV,(Expression)e1,(Expression)e2);
:}
	| expr:e1 MULT expr:e2 {:
	RESULT = new BinaryOperator(BinaryOperator.OperatorType.MULT,(Expression)e1,(Expression)e2);
:}
	| LPAREN expr:e RPAREN {:
	RESULT = e;
:}
;


