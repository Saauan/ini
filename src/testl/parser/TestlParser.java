
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue Feb 01 15:32:36 CET 2011
//----------------------------------------------------

package testl.parser;

import java.util.*;
import testl.parser.ast.*;

/** CUP v0.10k generated parser.
  * @version Tue Feb 01 15:32:36 CET 2011
  */
public class TestlParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public TestlParser() {super();}

  /** Constructor which sets the default scanner. */
  public TestlParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\011\000\002\002\004\000\002\003\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\021\000\010\004\004\005\005\012\007\001\002\000" +
    "\016\002\uffff\006\uffff\007\uffff\010\uffff\011\uffff\013\uffff" +
    "\001\002\000\016\002\ufffe\006\ufffe\007\ufffe\010\ufffe\011" +
    "\ufffe\013\ufffe\001\002\000\014\002\000\006\015\007\016" +
    "\010\017\011\014\001\002\000\010\004\004\005\005\012" +
    "\007\001\002\000\004\002\011\001\002\000\004\002\001" +
    "\001\002\000\014\006\015\007\016\010\017\011\014\013" +
    "\013\001\002\000\016\002\ufff9\006\ufff9\007\ufff9\010\ufff9" +
    "\011\ufff9\013\ufff9\001\002\000\010\004\004\005\005\012" +
    "\007\001\002\000\010\004\004\005\005\012\007\001\002" +
    "\000\010\004\004\005\005\012\007\001\002\000\010\004" +
    "\004\005\005\012\007\001\002\000\016\002\ufffb\006\ufffb" +
    "\007\ufffb\010\ufffb\011\ufffb\013\ufffb\001\002\000\016\002" +
    "\ufffc\006\ufffc\007\ufffc\010\017\011\014\013\ufffc\001\002" +
    "\000\016\002\ufffd\006\ufffd\007\ufffd\010\017\011\014\013" +
    "\ufffd\001\002\000\016\002\ufffa\006\ufffa\007\ufffa\010\ufffa" +
    "\011\ufffa\013\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\021\000\006\003\007\004\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\022\001\001\000\004" +
    "\004\021\001\001\000\004\004\020\001\001\000\004\004" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$TestlParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$TestlParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$TestlParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public Expression expression;

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$TestlParser$actions {
  private final TestlParser parser;

  /** Constructor */
  CUP$TestlParser$actions(TestlParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$TestlParser$do_action(
    int                        CUP$TestlParser$act_num,
    java_cup.runtime.lr_parser CUP$TestlParser$parser,
    java.util.Stack            CUP$TestlParser$stack,
    int                        CUP$TestlParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$TestlParser$result;

      /* select the action based on the action number */
      switch (CUP$TestlParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= LPAREN expr RPAREN 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TestlParser$stack.elementAt(CUP$TestlParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TestlParser$stack.elementAt(CUP$TestlParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TestlParser$stack.elementAt(CUP$TestlParser$top-1)).value;
		
	RESULT = e;

              CUP$TestlParser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$TestlParser$stack.elementAt(CUP$TestlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TestlParser$stack.elementAt(CUP$TestlParser$top-0)).right, RESULT);
            }
          return CUP$TestlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= expr MULT expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$TestlParser$stack.elementAt(CUP$TestlParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$TestlParser$stack.elementAt(CUP$TestlParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$TestlParser$stack.elementAt(CUP$TestlParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$TestlParser$stack.elementAt(CUP$TestlParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$TestlParser$stack.elementAt(CUP$TestlParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$TestlParser$stack.elementAt(CUP$TestlParser$top-0)).value;
		
	RESULT = new BinaryOperator(BinaryOperator.OperatorType.MULT,(Expression)e1,(Expression)e2);

              CUP$TestlParser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$TestlParser$stack.elementAt(CUP$TestlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TestlParser$stack.elementAt(CUP$TestlParser$top-0)).right, RESULT);
            }
          return CUP$TestlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= expr DIV expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$TestlParser$stack.elementAt(CUP$TestlParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$TestlParser$stack.elementAt(CUP$TestlParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$TestlParser$stack.elementAt(CUP$TestlParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$TestlParser$stack.elementAt(CUP$TestlParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$TestlParser$stack.elementAt(CUP$TestlParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$TestlParser$stack.elementAt(CUP$TestlParser$top-0)).value;
		
	RESULT = new BinaryOperator(BinaryOperator.OperatorType.DIV,(Expression)e1,(Expression)e2);

              CUP$TestlParser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$TestlParser$stack.elementAt(CUP$TestlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TestlParser$stack.elementAt(CUP$TestlParser$top-0)).right, RESULT);
            }
          return CUP$TestlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= expr MINUS expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$TestlParser$stack.elementAt(CUP$TestlParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$TestlParser$stack.elementAt(CUP$TestlParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$TestlParser$stack.elementAt(CUP$TestlParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$TestlParser$stack.elementAt(CUP$TestlParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$TestlParser$stack.elementAt(CUP$TestlParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$TestlParser$stack.elementAt(CUP$TestlParser$top-0)).value;
		
	RESULT = new BinaryOperator(BinaryOperator.OperatorType.MINUS,(Expression)e1,(Expression)e2);

              CUP$TestlParser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$TestlParser$stack.elementAt(CUP$TestlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TestlParser$stack.elementAt(CUP$TestlParser$top-0)).right, RESULT);
            }
          return CUP$TestlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr ::= expr PLUS expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$TestlParser$stack.elementAt(CUP$TestlParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$TestlParser$stack.elementAt(CUP$TestlParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$TestlParser$stack.elementAt(CUP$TestlParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$TestlParser$stack.elementAt(CUP$TestlParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$TestlParser$stack.elementAt(CUP$TestlParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$TestlParser$stack.elementAt(CUP$TestlParser$top-0)).value;
		
	RESULT = new BinaryOperator(BinaryOperator.OperatorType.PLUS,(Expression)e1,(Expression)e2);

              CUP$TestlParser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$TestlParser$stack.elementAt(CUP$TestlParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TestlParser$stack.elementAt(CUP$TestlParser$top-0)).right, RESULT);
            }
          return CUP$TestlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr ::= IDENTIFIER 
            {
              Object RESULT = null;

              CUP$TestlParser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$TestlParser$stack.elementAt(CUP$TestlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TestlParser$stack.elementAt(CUP$TestlParser$top-0)).right, RESULT);
            }
          return CUP$TestlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr ::= NUM 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$TestlParser$stack.elementAt(CUP$TestlParser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$TestlParser$stack.elementAt(CUP$TestlParser$top-0)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$TestlParser$stack.elementAt(CUP$TestlParser$top-0)).value;
		
	RESULT = new Num(Double.parseDouble(n.toString()));

              CUP$TestlParser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$TestlParser$stack.elementAt(CUP$TestlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TestlParser$stack.elementAt(CUP$TestlParser$top-0)).right, RESULT);
            }
          return CUP$TestlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // exprs ::= expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TestlParser$stack.elementAt(CUP$TestlParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TestlParser$stack.elementAt(CUP$TestlParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TestlParser$stack.elementAt(CUP$TestlParser$top-0)).value;
		
	parser.expression = (Expression) e;	

              CUP$TestlParser$result = new java_cup.runtime.Symbol(1/*exprs*/, ((java_cup.runtime.Symbol)CUP$TestlParser$stack.elementAt(CUP$TestlParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TestlParser$stack.elementAt(CUP$TestlParser$top-0)).right, RESULT);
            }
          return CUP$TestlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= exprs EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$TestlParser$stack.elementAt(CUP$TestlParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$TestlParser$stack.elementAt(CUP$TestlParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$TestlParser$stack.elementAt(CUP$TestlParser$top-1)).value;
		RESULT = start_val;
              CUP$TestlParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$TestlParser$stack.elementAt(CUP$TestlParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TestlParser$stack.elementAt(CUP$TestlParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$TestlParser$parser.done_parsing();
          return CUP$TestlParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

