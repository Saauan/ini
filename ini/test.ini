process main() {
	@init() {
		myProcess("yeah") [node="n1"]
		sleep(2000)
		myProcess1("yeah") [node="n1"]
		sleep(2000)
		myProcess2(2) [node="n1"]
		sleep(2000)
		println("processes started")
	}
}

process myProcess(msg) {
	@init() {
		println(""+msg)
	}
}

process myProcess1(msg) {
	@init() {
		println(""+myFunction(msg) + myFunction(msg))
	}
}

process myProcess2(n) {
	@init() {
		println(""+(n-1))
	}
}

function myFunction(msg) {
	return "%"+msg+"%"
}


/*
process main() {
	@init() {
		l = ["Renaud", "Bruno", "Pierre"]
		channel("test_channel3").produce(l)
	}
	c:@consume(v) [from = channel("test_channel3")] {
		println("list value = "+to_json(v))
		println(v[1])
		stop(c)
	}
}*/

/*
process p(a, b) {
	a < b {
		b = b - a
	}
	b < a {
		a = a - b
	}
	@end() {
		return a
	}
}

a = 5*6*2*7*3
b = 3*5*3425
println("a={a}, b={b}")
println(p(a, b))
println(p(25, 15)) // result => 5
println(p(17, 28)) // result => 1
println(p(1260, 51375)) // result => 15
*/

/*
declare channel +c0(Int)
declare channel +c1(Int)
declare channel +c2(Int)
//declare predicate p1 "(<> end)"

process main() {
	@init() {
		p(c1, c2)	//[node="n1"]
		p(c2, c0)	//[node="n2"]
		println("processes started")
		c1.produce(1) [checkpoint="start"]
	}
	c:@consume(v) [channel=c0] {
		println("end of pipeline: {v}")
		stop(c) [checkpoint="end"]
	}
}

process p(in, out) {
	c:@consume(v) [channel=in] {
		println("{in}: {v}")
		out.produce(v+1)
		stop(c)
	}
}*/
