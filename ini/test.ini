
import "ini/lib/collect.ini"

declare channel facRequest[](Int)
declare channel facResult[](Int)
declare channel facAdmin[](String)

function main() {
	println("fac(5)="+fac(5))
}

process fac(n) {
	@init() {
		result = 0
		facRequest[n].produce(n)
		[1..n].foreach(i => {
			p(i++) //[node="n{i}"]
		})
	}
	c: @consume(r) [channel = facResult[n]] {
		result = r
		[1..n].foreach(i => facAdmin[i].produce("kill"))
		stop(c)
	}
	@end() {
		return result
	}
}

process p(n) {
	@init() {
		println("p({n}) started")
	}
	c1: @consume(n) [channel = facRequest[n]] {
		case {
			n == 1 {
				facResult[1].produce(1)
			}
			n > 1 {
				facRequest[n-1].produce(n-1)
			}
		}
	}
	c2: @consume(f) [channel = facResult[n-1]] {
		facResult[n].produce(f * n)
	}
	c3: @consume(msg) [channel = facAdmin[n]] && msg == "kill" {
		stop(c1)
		stop(c2)
		stop(c3)
	} 
	@end() {
		//println("killed p({n})")
	}
}


/*
process main() {
	@init() {
		l = ["Renaud", "Bruno", "Pierre"]
		channel("test_channel3").produce(l)
	}
	c:@consume(v) [from = channel("test_channel3")] {
		println("list value = "+to_json(v))
		println(v[1])
		stop(c)
	}
}*/

/*
process p(a, b) {
	a < b {
		b = b - a
	}
	b < a {
		a = a - b
	}
	@end() {
		return a
	}
}

a = 5*6*2*7*3
b = 3*5*3425
println("a={a}, b={b}")
println(p(a, b))
println(p(25, 15)) // result => 5
println(p(17, 28)) // result => 1
println(p(1260, 51375)) // result => 15
*/

/*
declare channel +c0(Int)
declare channel +c1(Int)
declare channel +c2(Int)
//declare predicate p1 "(<> end)"

process main() {
	@init() {
		p(c1, c2)	//[node="n1"]
		p(c2, c0)	//[node="n2"]
		println("processes started")
		c1.produce(1) [checkpoint="start"]
	}
	c:@consume(v) [channel=c0] {
		println("end of pipeline: {v}")
		stop(c) [checkpoint="end"]
	}
}

process p(in, out) {
	c:@consume(v) [channel=in] {
		println("{in}: {v}")
		out.produce(v+1)
		stop(c)
	}
}*/
