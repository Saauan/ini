
declare ServerSocket<Closeable
declare DataOutputStream<Closeable
declare socket_server(Int)=>ServerSocket [class="java.net.ServerSocket", member="new(..)"]
declare socket_accept(ServerSocket)=>Socket [class="java.net.ServerSocket", member="accept(..)"]
declare socket_address(Socket)=>InetAddress [class="java.net.Socket", member="getInetAddress(..)"]
declare host_name(InetAddress)=>String [class="java.net.InetAddress", member="getHostName(..)"]
declare socket_input_stream(Socket)=>InputStream [class="java.net.Socket", member="getInputStream(..)"]
declare socket_output_stream(Socket)=>OutputStream [class="java.net.Socket", member="getOutputStream(..)"]
declare reader(InputStream)=>Reader [class="java.io.InputStreamReader", member="new(..)"]
declare buffered_reader(Reader)=>BufferedReader [class="java.io.BufferedReader", member="new(..)"]
declare data_output_stream(OutputStream)=>DataOutputStream [class="java.io.DataOutputStream", member="new(..)"]
declare read_line(BufferedReader)=>String [class="java.io.BufferedReader", member="readLine(..)"]
declare write_string(DataOutputStream,String)=>Void [class="java.io.DataOutputStream", member="writeBytes(..)"]
declare close(Closeable)=>Void [class="java.io.Closeable", member="close(..)"]

process main() {
	@init() {
		println("coucou")
		start_http_server(8080, handler)
		println("end")
	}
}

process start_http_server(port, handler) {
	@init() {
		println("coucou2")
		s = socket_server(port)
		println("coucou3")
		clear(c)
		println("Server started on "+port)
	}
	s { 
		c = socket_accept(s)
	}
	@update(old,c) [variable=c, mode="async"] {
		client = socket_address(c)
		println(to_string(host_name(client))+" connected to server")
		in = buffered_reader(reader(socket_input_stream(c)))
		out = data_output_stream(socket_output_stream(c))
		wait(handle_http_request(s, in, out, handler))
	}
	// TODO: improve error handling with error type
	@error(msg) {
		println("error: "+msg)
	}
}

process handle_http_request(server, in, out, handler) {
	line!="" {
		line = read_line(in)
	}
	line ~ regexp("GET (.*) (.*)", path, version) {
		println("GET REQUEST: "+path+" - "+version)
	}
	path {
		body = handler(server, path)
		write_string(out, "HTTP/1.0 200 OK\r\n")
		write_string(out, "Connection: close\r\n")
		write_string(out, "Server: INI v0\r\n")
		write_string(out, "Content-Type: text/html\r\n")
		write_string(out, "Content-Length: "+size(body)+"\r\n\r\n")
		write_string(out, body)
		close(out)
	}
}

function handler(server, path) {
	s = "hello world-wide web @"+path
	case path == "/test" {
		s = s + " -- test page"
	}
	case path == "/stop" || path == "/close" {
		s = "bye!"
		close(server)
	}
	return s
}