

/*
 * This examples shows a pretty printer for an XML structure.
 */

type Attr = [name:String,value:String]
type Xml = [name:String,text:String,id:Int,attr:Attr*,content:Xml*]

function main() {
	i=0
	xml = Xml[name = "html"]
	xml.content[0] = Xml[name = "head"]
	xml.content[1] = Xml[name = "body"]
	xml.content[1].attr[0] = Attr[name = "bgcolor", value = "white"]
	xml.content[1].attr[1] = Attr[name="width", value="100%"]
	xml.content[1].content[0] = Xml[text="this is a body text example "]
	b = Xml[name = "b"]
	xml.content[1].content[1] = b
	b.content[0] = Xml[text="this is a strong text"]
	pretty_print(xml)
	println(to_json(xml))
}

function pretty_print(xml,indent=0) {
	case xml ~ Xml[name,!text] {
		wait(print_tag(xml,indent))
	}
	case xml ~ Xml[!name,text] {
		println(xml.text)
	}
}

process print_tag(xml,indent) {
	@init() {
		wait(print_indent(indent))
		print("<"+xml.name)
		i = 0
		j = 0
	}
	i < size(xml.attr) {
		print(" "+xml.attr[i].name+"=\""+xml.attr[i].value+"\"")
		i++
	}
	i == size(xml.attr) {
		println(">")
		i++
	}
	i == size(xml.attr)+1 && j < size(xml.content) {
		pretty_print(xml.content[j++],indent+4)
	}
	@end() {
		wait(print_indent(indent))
		println("</"+xml.name+">")
	}
}

process print_indent(indent) {
	@init() {
		i=0
	}
	i < indent {
		print(" ")
		i++
	}
}

/*
type Child = Boy[age:Int]
	| Girl[age:Int]
type Person = [name:String,firstName:String,age:Int,children:Child*]
declare channel +test_channel(Person)

function f(p) {
	case {
		//p of Person | !p.name || !p.firstName || !p.age {
		//	println("invalid person")
		//}
		p ~ Person[name=="renaud",firstName,!age] {
			println("Recieved INVALID person: {p.firstName} {p.name}, {p.age}")	
		}
		p ~ Boy[] {
			println("child {p.age}")
		}
		p ~ Person[name,firstName,age] {
			println("Recieved person: {p.firstName} {p.name}, {p.age}")	
		}
	}		
}

f(Person[name="renaud",firstName="pawlak",age=11])

f(Person[name="renaud",firstName="pawlak"])

f(Boy[age=2])

process p() {
	@consume(p) : [from=test_channel] {
		case {
			p of Person | !p.name || !p.firstName || !p.age {
				println("invalid person")
			} 
			p ~ Person[name,firstName,age] {
				println("Recieved person: {p.firstName} {p.name}, {p.age}")	
			}
			default {
				println("DEFAULT Recieved person: {p}")	
			}
		}
	}
}
*/

//p = Person[name="test"]

/*
declare channel +c0(Int)
declare channel +c1(Int)
declare channel +c2(Int)
declare predicate p1 "(<> end)"

process main() {
	@init() {
		p(c1, c2) : [node="n1"]
		p(c2, c0) : [node="n2"]
		println("processes started")
		c1.produce(1) : [checkpoint="start"]
	}
	c = @consume(v) : [channel=c0] {
		println("end of pipeline: {v}") : [checkpoint="end"]
		stop(c)
	}
}

process p(in, out) {
	c = @consume(v) : [channel=in] {
		println("{in}: {v}")
		out.produce(v+1)
		stop(c)
	}
}

*/