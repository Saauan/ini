
function foreach(l, handler) {
	p = (l, handler) ~> {
		@init() {
			i = 0
		}
		i<size(l) {
			handler(l[i++])
		}
	}
	wait(p(l, handler))
}

function foreach2(l, handler) {
	case size(l) > 0 {
		handler(first(l))
		return foreach(rest(l), handler)
	}
}

function map(l, mapper) {
	case size(l) > 0 {
		return [mapper(first(l))] & map(rest(l), mapper)
	}
}

function select(l, selector) {
	case size(l) > 0  {
		case selector(first(l)) {
			return [first(l)] & select(rest(l), selector)
		} else {
			return [] & select(rest(l), selector)
		}
	} else {
		return []
	}
}

//[1,2].select(e => { return false }).foreach(e => print(e))


