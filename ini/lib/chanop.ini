
import "ini/lib/math.ini"
import "ini/lib/collect.ini"

/**
 * Produce all the elements of the iterable in the channel.
 * 
 * @param channel
 *            the channel to produce to
 * @param iterable
 *            the elements to be produced
 * @return channel
 */
function produceEach(channel, iterable) {
	iterable.foreach(e => channel.produce(e))
	return channel
}

/**
 * Fully reads the iterable content and adds it to a new channel. Note that once
 * the channel has been filled with the content, this function sends the 'stop'
 * message to the channel.
 * 
 * @param iterable
 *            the iterable to read elements from
 * @return the new channel (where all the elements have been produced)
 */
function toChannel(iterable) {
	channel = channel()
	iterable.foreach(e => {
		channel.produce(e)
	})
	channel.stop()
	return channel
}

/**
 * Consumes the given channel elements and applies the handler to each of them.
 * The underlying process will end when a 'stop' message is received from the
 * channel.
 * 
 * @param channel
 *            the input channel to consume from
 * @param handler
 *            the function to apply to each consume element
 * @param node
 *            the node where to run the consume process (local node if
 *            unspecified)
 */
function consume(channel, handler, node="") {
	consumeProcess = (channel, handler) ~> {
		@consume(value) : [channel = channel] {
			handler(value)
		}
	}
	consumeProcess(channel, handler) : [node=node]
	return channel
}

function merge(in1, in2) {
	out = channel()
	mergeProcess(out, in1, in2)
	return out
}

function duplicate(in, out1, out2, node="") {
	duplicateProcess(in, out1, out2) : [node=node]
	return in
}

function roundRobin(in, outs, node="") {
	roundRobinProcess(in, outs) : [node=node]
	return outs
}

/**
 * Filters the elements thanks to the given predicate and produce them to a new
 * channel. If a list of nodes is provided, the filtering is concurrently
 * performed and distributed over the given nodes.
 * 
 * @param in
 *            the input channel
 * @param predicate
 *            the filtering function
 * @param nodes
 *            the nodes to which the filtering processes will be deployed
 * @return a new channel containing the filtered elements
 */
function filter(in, predicate, nodes=[]) {
	filterProcess = (in, out, predicate) ~> {
		@consume(v) : [from=in] && predicate(v) {
			out.produce(v)
		}
		@end() {
			out.stop()
		}
	}
    return distribute(in, (in, out, node) => {
		filterProcess(in, out, predicate) : [node=node]
	}, nodes)
}

function combineLastest(out, in1, in2, combiner, node="") {
	combineLatestProcess(out, in1, in2, combiner) : [node=node]
	return out
}

/**
 * Gets all the incoming elements and produces them to an output channel with a
 * given delay.
 * 
 * @param in
 *            the input channel
 * @param time
 *            the delay in milliseconds
 * @return the output channel
 */
function delay(in, time) {
	delayProcess = (in, out, time) ~> {
		@consume(v) : [from=in] {
			sleep(time)
			out.produce(v)
		}
		@end() {
			out.stop()
		}
	}
	out = channel()
	delayProcess(in, out, time)
	return out
}

function distribute(in, startProcess, nodes=[]) {
	case nodes.size() == 0 {
		out = channel()
		startProcess(in, out, node())
	} else {
		hasRemote = false
		nodes.foreach(node => {
			case node != node() {
				hasRemote = true
			}
		})
		tmpIn = channel(hasRemote?Global:Local)
		bind(in, tmpIn, 1, nodes.size())
		tmpOut = channel(hasRemote?Global:Local)
		nodes.foreach(node => {
			startProcess(tmpIn, tmpOut, node) : [node=node]
		})
		out = channel()
		bind(tmpOut, out, nodes.size(), 1)
	}
	return out
}

/**
 * Maps all the elements in the input channel to new elements that will be
 * produced in a new output channel. If a list of nodes is provided, the mapping
 * is concurrently performed and distributed over the given nodes.
 * 
 * @param in
 *            the input channel
 * @param mapper
 *            the mapping function
 * @param nodes
 *            the nodes to which the mapping processes will be deployed
 * @return a new channel containing the results of the mappings
 */
function mapc(in, mapper, nodes=[]) {
	mapProcess = (in, out, mapper) ~> {
		@consume(v) : [from=in] {
			out.produce(mapper(v))
		}
		@end() {
			out.stop()
		}
	}
    return distribute(in, (in, out, node) => {
		mapProcess(in, out, mapper) : [node=node]
	}, nodes)
}

function zip(out, in, tick, zipper=x=>x, node="") {
	zipProcess(out, in, tick, zipper) : [node=node]
	return out
}

/**
 * Reduces key->value tuples and returns the result in a map. The process ends
 * when receiving a 'stop' message.
 * 
 * @param in
 *            the input channel (should contain key->value tuples)
 * @param reducer
 *            a function taking the currently accumulated value for a given key
 *            and the new incoming value for that key (should return the new
 *            accumulated value)
 * @return a map will all the keys and corresponding accumulated values
 */
function reduceByKey(in, reducer, node="") {
	reduceByKeyProcess = (in, reducer) ~> {
		@init() {
			accumulator = []
		}
		@consume(v) : [from=in] {
		 	accumulator[v[0]] = reducer(accumulator[v[0]], v[1])
		}
		@end() {
			return accumulator
		}
	}	
	return reduceByKeyProcess(in, reducer) : [node=node]
}

/**
 * Collects all the elements from a channel (until the 'stop' message) and
 * returns them as a list. Note that the collect process will end when receiving
 * a 'stop' message.
 * 
 * @param in
 *            the channel to collect values from
 * @return a list containing all the collected values
 */
process collect(in) {
	@init() {
		result = []
	}
	@consume(v) : [from=in] {
		result = result & v
	}
	@end() {
		return result
	}
}

/**
 * Count all the elements from a channel until the 'stop' message. Note that the
 * count process will end when receiving a 'stop' message.
 * 
 * @param in
 *            the channel to count from
 * @return the number of elements counted from the channel
 */
process count(in) {
	@init() {
		result = 0
	}
	@consume(v) : [from=in] {
		result = result + 1
	}
	@end() {
		return result
	}
}

process mergeProcess(out, in1, in2) {
	@consume(v) : [from=in1] {
		out.produce(v)
	}
	@consume(v) : [from=in2] {
		out.produce(v)
	}
	@end() {
		out.stop()
	}
}

process combineLatestProcess(out, in1, in2, combiner) {
	@init() {
		latest1 = any()
		latest2 = any()
	}
	$(c2) c1 = @consume(v) : [from=in1] {
		latest1 = v
		case latest2 {
			out.produce(combiner(latest1, latest2))
		}
	}
	$(c1) c2 = @consume(v) : [from=in2] {
		latest2 = v
		case latest1 {
			out.produce(combiner(latest1, latest2))
		}
	}
	@end() {
		out.stop()
	}
}

process zipProcess(in, out, tick, zipper) {
	@init() {
		buffer = []
	}
	@consume() : [from=tick] {
		out.produce(zipper(buffer))
		buffer = []
	}
	@consume(v) : [from=in] {
		buffer = buffer & [v]
	}
}

process duplicateProcess(in, out1, out2) {
	@consume(v) : [from=in] {
		out1.produce(v)
		out2.produce(v)
	}
	@end() {
		out1.stop()
		out2.stop()
	}
}

process roundRobinProcess(in, outs) {
	@init() {
		i = 0
	}
	@consume(v) : [from=in] {
		outs[i].produce(v)
		i = mod(i + 1, outs.size())
	}
	@end() {
		outs.foreach(out => out.stop())
	}
}

/**
 * Binds a channel to another. All the elements of the input channel will be
 * forwarded to the output channel. The bind process will expect as many 'stop'
 * messages as the declared producers in order to end. Also, when ending, the
 * bind process will send as many 'stop' messages as the declared consumers.
 * 
 * @param in
 *            the input channel
 * @param out
 *            the output channel
 * @param producers
 *            the number of producers producing on the input channel (default is
 *            1)
 * @param consumers
 *            the number of consumers consuming on the output channel (default
 *            is 1)
 */
function bind(in, out, producers=1, consumers=1) {
	bindProcess = (in, out, producers, consumers) ~> {
		@consume(v) : [from=in, stop=producers] {
			out.produce(v)
		}
		@end() {
			[0..consumers].foreach(i => out.stop())
		}
	}
	bindProcess(in, out, producers, consumers)
	return out
}

