file(String)=>File [class="java.io.File", member="new(..)"]
file_exists(File)=>Boolean [class="java.io.File", member="exists(..)"]
file_is_directory(File)=>Boolean [class="java.io.File", member="isDirectory(..)"]
file_name(File)=>String [class="java.io.File", member="getName(..)"]
file_list(File)=>File* [class="java.io.File", member="listFiles(..)"]
file_mkdirs(File)=>Boolean [class="java.io.File", member="mkdirs(..)"]

file_writer(File)=>FileWriter [class="java.io.FileWriter", member="new(..)"]
file_writer_append(FileWriter,String)=>Void [class="java.io.FileWriter", member="write(..)"]
file_writer_close(FileWriter)=>Void [class="java.io.FileWriter", member="close(..)"]
file_writer_println(Writer,String)=>Void [class="java.io.Writer", member="println(..)"]

file_input_stream(File)=>InputStream [class="java.io.FileInputStream", member="new(..)"]

input_stream_close(InputStream)=>Void [class="java.io.InputStream", member="close(..)"]

reader(InputStream)=>Reader [class="java.io.InputStreamReader", member="new(..)"]
buffered_reader(Reader)=>BufferedReader [class="java.io.BufferedReader", member="new(..)"]
data_output_stream(OutputStream)=>DataOutputStream [class="java.io.DataOutputStream", member="new(..)"]
read_line(BufferedReader)=>String [class="java.io.BufferedReader", member="readLine(..)"]
read_char(BufferedReader)=>Int [class="java.io.BufferedReader", member="read(..)"]
write_string(DataOutputStream,String)=>Void [class="java.io.DataOutputStream", member="writeBytes(..)"]
close_data_output_stream(DataOutputStream)=>Void [class="java.io.Closeable", member="close(..)"]

function read_string(buffered_reader, count) {
	i = 0
	s = ""
	c = 0
	case i < count && c!=-1 {
		c = read_char(buffered_reader)
		s[i++] = to_char(c)
	}
	return s
}

function read_all_string(buffered_reader) {
	i = 0
	s = ""
	c = 0
	case c!=-1 {
		c = read_char(buffered_reader)
		s[i++] = to_char(c)
	}
	return s
}


/*
 * A simple function to write a string in a file.
 */
function file_write_content(file_path,string) {
	f = file_writer(file(file_path))
	file_writer_append(f,string)
	file_writer_close(f)
}

function file_read_content(file_path) {
	fis = file_input_stream(file(file_path))
	content = read_all_string(buffered_reader(reader(fis)))
	input_stream_close(fis)
	return content
}

