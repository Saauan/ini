
socket_server(Int)->ServerSocket [class="java.net.ServerSocket", member="new(..)"]
socket_accept(ServerSocket)->Socket [class="java.net.ServerSocket", member="accept(..)"]
socket_address(Socket)->InetAddress [class="java.net.Socket", member="getInetAddress(..)"]
host_name(InetAddress)->String [class="java.net.InetAddress", member="getHostName(..)"]
socket_input_stream(Socket)->InputStream [class="java.net.Socket", member="getInputStream(..)"]
socket_output_stream(Socket)->OutputStream [class="java.net.Socket", member="getOutputStream(..)"]
reader(InputStream)->Reader [class="java.io.InputStreamReader", member="new(..)"]
buffered_reader(Reader)->BufferedReader [class="java.io.BufferedReader", member="new(..)"]
data_output_stream(OutputStream)->DataOutputStream [class="java.io.DataOutputStream", member="new(..)"]
read_line(BufferedReader)->String [class="java.io.BufferedReader", member="readLine(..)"]
write_string(DataOutputStream,String)->Void [class="java.io.DataOutputStream", member="writeBytes(..)"]
close(DataOutputStream)->Void [class="java.io.Closeable", member="close(..)"]

process main() {
	@init() {
		start_http_server(8080, handler)
	}
}

process start_http_server(port, handler) {
	@init() {
		s = socket_server(port)
		clear(c)
		println("Server started on "+port)
	}
	s { 
		c = socket_accept(s)
	}
	@update(old,c) [variable=c, mode="async"] {
		client = socket_address(c)
		println(to_string(host_name(client))+" connected to server")
		in = buffered_reader(reader(socket_input_stream(c)))
		out = data_output_stream(socket_output_stream(c))
		handle_http_request(s, in, out, handler)
	}
	// TODO: improve error handling with error type
	@error(msg) {
		// println("error: "+msg)
	}
}

function handle_http_request(server, in, out, handler) {
	line!="" {
		line = read_line(in)
	}
	line ~ regexp("GET (.*) (.*)", path, version) {
		println("GET REQUEST: "+path+" - "+version)
	}
	@end() && path {
		body = handler(server, path)
		write_string(out, "HTTP/1.0 200 OK\r\n")
		write_string(out, "Connection: close\r\n")
		write_string(out, "Server: INI v0\r\n")
		write_string(out, "Content-Type: text/html\r\n")
		write_string(out, "Content-Length: "+size(body)+"\r\n\r\n")
		write_string(out, body)
		close(out)
	}
}

function handler(server, path) {
	@init() {
		s = "hello world-wide web @"+path
	}
	path == "/test" {
		s = s + " -- test page"
		clear(path)
	}
	path == "/stop" || path == "/close" {
		s = "bye!"
		close(server)
		clear(path)
	}
	@end() {
		return s
	}
}