
socket_server(Int)->ServerSocket => "java.net.ServerSocket", "new(..)"
socket_accept(ServerSocket)->Socket => "java.net.ServerSocket", "accept(..)"
socket_address(Socket)->InetAddress => "java.net.Socket", "getInetAddress(..)"
host_name(InetAddress)->String => "java.net.InetAddress", "getHostName(..)"
socket_input_stream(Socket)->InputStream => "java.net.Socket", "getInputStream(..)"
socket_output_stream(Socket)->OutputStream => "java.net.Socket", "getOutputStream(..)"
reader(InputStream)->Reader => "java.io.InputStreamReader", "new(..)"
buffered_reader(Reader)->BufferedReader => "java.io.BufferedReader", "new(..)"
data_output_stream(OutputStream)->DataOutputStream => "java.io.DataOutputStream", "new(..)"
read_line(BufferedReader)->String => "java.io.BufferedReader", "readLine(..)"
write_string(DataOutputStream,String)->Void => "java.io.DataOutputStream", "writeBytes(..)"
close(DataOutputStream)->Void => "java.io.Closeable", "close(..)"

function main() {
	@init() {
		start_http_server(8080, function(handler))
	}
}

function start_http_server(port, handler) {
	@init() {
		s = socket_server(port)
		clear(c)
		println("Server started on "+port)
	}
	s { 
		println("before")
		c = socket_accept(s)
		println("after")
	}
	@update[variable=c](old,c) {
		client = socket_address(c)
		println(to_string(host_name(client))+" connected to server")
		in = buffered_reader(reader(socket_input_stream(c)))
		out = data_output_stream(socket_output_stream(c))
		handle_http_request(in, out, handler)
	}	
}

function handle_http_request(in, out, handler) {
	line!="" {
		line = read_line(in)
	}
	line ~ regexp("GET (.*) (.*)", path, version) {
		println("GET REQUEST: "+path+" - "+version)
	}
	@end() path {
		println("end: "+ path)
		//body = eval(handler,path)
		body = handler(path)
		println("body: "+ body)
		println("size body: "+ size(body))
		write_string(out, "HTTP/1.0 200 OK\r\n")
		write_string(out, "Connection: close\r\n")
		write_string(out, "Server: INI v0\r\n")
		write_string(out, "Content-Type: text/html\r\n")
		write_string(out, "Content-Length: "+size(body)+"\r\n\r\n")
		write_string(out, ""+body)
		//write_string(out, "Content-Length: "+4+"\r\n\r\n")
		//write_string(out, "test")
		
		close(out)
		println("end of request")
	}
}

function handler(path) {
	@init() {
		s = "hello world-wide web @"+path
	}
	path == "/test" {
			s = s + " -- test page"
			clear(path)
	}
	@end() {
		return "hello"
	}
}