
import "ini/lib/io.ini"
import "ini/lib/mongo.ini"

declare type Person = [firstName:String, lastName:String, middleName:String, wikipedia:String]
declare channel +wikipedia_in(Person)
declare channel +wikipedia_out(Person)

process enrich() {
	@consume(p) : [from = wikipedia_in] {
		case p ~ Person[firstName, lastName] {
			println("Wikipedia Enrichment for "+p)
			case p.middleName {
				p.wikipedia = fetch(url("https://en.wikipedia.org/wiki/{p.firstName}_{p.middleName}_{p.lastName}"))
			} else {
				p.wikipedia = fetch(url("https://en.wikipedia.org/wiki/{p.firstName}_{p.lastName}"))
			}
			case p ~ Person[wikipedia] {
				println("Sending back enriched "+p)
				wikipedia_out.produce(p)
			}
		}
	}
}

function clear_person_db() {
	client = mongoClient("localhost:27017")
	client.database("test").collection("test").drop()
	client.close()
}

function fill_person_db() {
	client = mongoClient("localhost:27017")
	collection = client.database("test").collection("test")
	collection.insertOne(Person[firstName="Jacques", lastName="Chirac"])
	collection.insertOne(Person[firstName="Barack", lastName="Obama"])
	collection.insertOne(Person[firstName="Albert", lastName="Einstein"])
	collection.insertOne(Person[firstName="Titi"])
	collection.insertOne(Person[firstName="Edsger", middleName="W.", lastName="Dijkstra"])
	client.close()
}

function send_person_db() {
	client = mongoClient("localhost:27017")
	collection = client.database("test").collection("test")
	it = collection.find()
	it.toList().map(doc => fromDocument(Person[], doc)).foreach(p => {
		case p ~ Person[firstName, lastName] {
			println("Sending person {p} for enrichment")
			wikipedia_in.produce(p)
		} else {
			println("Skipping wrong person {p}")
		}
	})
	client.close()
}

function dump_person_db() {
	client = mongoClient("localhost:27017")
	collection = client.database("test").collection("test")
	it = collection.find()
	it.forEach(p => {
		println(p)
	})
	client.close()
}

dump_person_db()


/*println("Connecting to Mongodb...")
client = mongoClient("localhost:27017")
println("Connected.")

collection = client.database("test").collection("test")
println("Writing to Mongodb...")
collection.insertOne(Person[key1="hello",name="Renaud"])
println("Wrote one document.")

println("Read and dump a collection:")
it = collection.find()
it.forEach(e => println(e))

it.toList().map(doc => fromDocument(Person[], doc)).foreach(e => {
	case e ~ Person[name] {
		println("valid person: "+e)
	}
})*/

//client.close()
