import "ini/lib/chanop.ini"
import "ini/lib/collect.ini"

declare type Person = [name:String, age:Int]

l = [
     Person[name="Renaud",age=23],
     Person[name="Sacha",age=21], 
     Person[name="Joris",age=23]
     Person[name="Laurentiu",age=23]
     Person[name="Charlène",age=20]
     Person[name="Fabien",age=20]
     Person[name="Yann",age=21]
     Person[name="Yoann",age=22]
     Person[name="Paul",age=23]
     Person[name="Carlos",age=22]
     Person[name="Dany",age=20]
]
	
c = channel().produceEach(l)
result = channel().map(c, p => [p.age, [p.name]]).reduceByKey((a, b) => a & b)

//.consume(e => println(e))

c.stop()

println(result)

////////////////////

import "ini/lib/chanop.ini"
import "ini/lib/collect.ini"

declare type Person = [name:String, age:Int]

declare type Visibility = Private | Public

l = [Person[name="Renaud",age=23],
     Person[name="Sacha",age=21], 
     Person[name="Joris",age=23],
     Person[name="Laurentiu",age=23],
     Person[name="Charlène",age=20],
     Person[name="Fabien",age=20],
     Person[name="Yann",age=21],
     Person[name="Yoann",age=22],
     Person[name="Paul",age=23],
     Person[name="Carlos",age=22],
     Person[name="Dany",age=20]
]

group = ["n1", "n2"]
v = Private

println(v ~ Public?"+++":"---")

println(node())

//result = channel().map(c, p => [p.age, [p.name]]).reduceByKey((a, b) => a & b)

println(channel().produceEach(l).stop().mapc(p => [p.age, [p.name]], group).reduceByKey((a, b) => a & b))

println(channel().produceEach(l).stop().mapc(p => [p.age, [p.name]], group).reduceByKey((a, b) => a & b))
	
println(channel().produceEach(l).stop().mapc(p => [p.age, [p.name]], group).reduceByKey((a, b) => a & b))

