
/*
 * This examples shows a pretty printer for an XML structure.
 */

type Attr = [name:String,value:String]
type Xml = [name:String,text:String,id:Int,attr:Attr*,content:Xml*]

function main() {
	@init() {
		i=0
		xml = Xml[name = "html"]
		xml.content[0] = Xml[name = "head"]
		xml.content[1] = Xml[name = "body"]
		xml.content[1].attr[0] = Attr[name = "bgcolor", value = "white"]
		xml.content[1].attr[1] = Attr[name="width", value="100%"]
	    xml.content[1].content[0] = Xml[text="this is a body text example "]
		b = Xml[name = "b"]
		xml.content[1].content[1] = b
		b.content[0] = Xml[text="this is a strong text"]
		pretty_print(xml)

		xml2 = copy(xml)
		xml2.content[0].name = "tutu"
		
		println(to_json(xml))
		println(to_json(xml2))
		
	}
}

function pretty_print(xml,indent=0) {
	xml ~ Xml[name,!text] {
		print_tag(xml,indent)
		return
	}
	xml ~ Xml[!name,text] {
		println(xml.text)
		return
	}
}

function print_tag(xml,indent) {
	@init() {
		print_indent(indent)
		print("<"+xml.name)
		i = 0
		j = 0
	}
	i < size(xml.attr) {
		print(" "+xml.attr[i].name+"=\""+xml.attr[i].value+"\"")
		i++
	}
	i == size(xml.attr) {
		println(">")
		i++
	}
	i == size(xml.attr)+1 && j < size(xml.content) {
		pretty_print(xml.content[j++],indent+4)
	}
	@end() {
		print_indent(indent)
		println("</"+xml.name+">")
	}
}

function print_indent(indent) {
	@init() {
		i=0
	}
	i < indent {
		print(" ")
		i++
	}
}